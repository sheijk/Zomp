///
/// The Zomp prelude
/// Contains definitions and methods which are available everywhere
///

type int u32

///-----------------------------------------------------------------------------
/// Section: Content of runtime.c
///-----------------------------------------------------------------------------

std:base:func void printInt(int i)
std:base:func void printString(char* s)
std:base:func void printFloat(float f)
std:base:func void printDouble(double d)
std:base:func void printChar(char c)
std:base:func void printPtr(void* ptr)
std:base:func void printNewline()
std:base:func void flushStdout()

std:base:func float parseFloat(char* str)
std:base:func int parseInt(char* str)
std:base:func char* parseFloats(char* std, int count, float* dest)

std:base:func int zomp_closeFile(void* file)
std:base:func int zomp_writeInt(void* file, int i)
std:base:func int zomp_writeCString(void* file, char* val)
std:base:func int zomp_writeFloat(void* file, float val)
std:base:func int zomp_writeDouble(void* file, double val)
std:base:func int zomp_writeChar(void* file, char val)
std:base:func int zomp_writePtr(void* file, void* val)

std:base:func int zomp_readInt(void* file, int* val)
std:base:func int zomp_readFloat(void* file, float* val)
std:base:func int zomp_readDouble(void* file, double* val)
std:base:func int zomp_readChar(void* file, char* val)

std:base:func char* int2cstring(int i)
std:base:func char* float2cstring(float f)
std:base:func char* double2cstring(double d)
std:base:func char* char2cstring(char c)

std:base:func int printf(char* format, cvarargs...)
std:base:func int sprintf(char* buffer, char* format, cvarargs...)

std:base:func char* copyString(char* str)

///-----------------------------------------------------------------------------
/// Section: ZompVM
///-----------------------------------------------------------------------------

std:base:func void* zompLoadLib(char* libname)
std:base:func bool zompRequestedPause()
std:base:func void zompSetRequestPause(bool request)

std:base:func int zompLoadFileToMemory(char* filename, char** content)
std:base:func int zompFileModificationTimestamp(char* filename)

std:base:func void stdlibHello()

///-----------------------------------------------------------------------------
/// Section: C library
///-----------------------------------------------------------------------------

std:base:func void exit(int exitCode)

std:base:func double sin(double x)
std:base:func double cos(double x)
std:base:func float sinf(float x)
std:base:func float cosf(float x)

std:base:func float atanf(float x)
std:base:func float asinf(float x)
std:base:func float acosf(float x)

std:base:func int abs(int x)
std:base:func float fabsf(float l)

std:base:func float fmodf(float num, float divisor)

std:base:func float sqrtf(float x)
std:base:func double sqrt(double x)

///-----------------------------------------------------------------------------
/// Section: Utility functions
///-----------------------------------------------------------------------------

std:base:func u8* zompMalloc(size_t bytes)

macroReplace std:base:malloc1 type:
  cast type* zompMalloc(std:base:sizeof type)
end

macroReplace std:base:mallocN type count:
  cast type* zompMalloc(size_t:mul(std:base:sizeof type, count))
end

std:base:func bool bool:not(bool b):
  bool:xor true b
end

std:base:func int square(int x):
  u32:mul x x
end

std:base:func float squaref(float x):
  float:mul x x
end

std:base:func void printBool(bool b):
  branch b true false

  label true
  printChar 't'
  branch end

  label false
  printChar 'f'

  label end
end

macroReplace funcln name type printF:
  std:base:func void name(type v):
    printF v
    printNewline()
  end
end

funcln printlnInt int printInt
funcln printlnString char* printString
funcln printlnFloat float printFloat

macroReplace getField record componentName:
  load (fieldptr record componentName)
end

macroReplace setField record componentName value:
  store (fieldptr record componentName) value
end

///-----------------------------------------------------------------------------
/// Section: String functions
///-----------------------------------------------------------------------------


type cstring (ptr char)

std:base:func int strcmp(cstring l, cstring r)
std:base:func int strncmp(cstring l, cstring r, size_t maxChars)
std:base:func cstring strcpy(cstring dest, cstring source)
std:base:func cstring strdup(cstring src)
std:base:func size_t strlen(cstring str)

std:base:func cstring u32:toCString(int x):
  int2cstring x
end

/// print count spaces
std:base:func void printIndent(int count):
  var int counter count
  label start
  var bool t (u32:ugreater counter 0)
  branch t goon end
  label goon
  printChar ' '
  assign counter (u32:sub counter 1)
  branch start
  label end
end

std:base:func bool cstring:equal(cstring l, cstring r):
  std:base:ret u32:equal(0, strcmp l r)
end

std:base:func cstring cstring:quote(cstring unquoted):
  var size_t unquotedLength strlen(unquoted)
  var cstring quoted (std:base:mallocN char (size_t:add unquotedLength (cast size_t 3)))

  strcpy (ptradd quoted 1) unquoted
  store quoted '"' // "
  store (ptradd quoted (cast u32 (size_t:add unquotedLength (cast size_t 1)))) '"' // "
  store (ptradd quoted (cast u32 (size_t:add unquotedLength (cast size_t 2)))) '\0'

  std:base:ret quoted
end

///-----------------------------------------------------------------------------
/// Section: Abstract syntax tree representation
///-----------------------------------------------------------------------------

/// Also needs to be updated in zompvm_impl.cpp and expander.ml
type ast:
  cstring id
  int childCount
  ast** childs

  // All file names must be owned by the ZompVM
  char* file
  int line
  int column
end
type astp ast*

var int ast:totalCreatedAsts 0

std:base:func void ast:printStatistics():
  printString "ast:totalCreatedAsts = "
  printInt ast:totalCreatedAsts
  printNewline()
end

std:base:func void ast:init(ast* a):
  store (fieldptr a id) ""
  store (fieldptr a childCount) 0
  store (fieldptr a childs) nullptr(ast*)
  store (fieldptr a file) nullptr(char)
  store (fieldptr a line) 0
  store (fieldptr a column) 0
end

std:base:func void ast:setLocation(ast* a, char* file, int line, int column):
  store (fieldptr a file) file
  store (fieldptr a line) line
  store (fieldptr a column) column
end

std:base:func char* ast:file(ast* a):
  var bool isnull u32:equal(cast int a, 0)
  branch isnull returnDummy returnValue
  label returnValue
  std:base:ret load(fieldptr a file)
  label returnDummy
  std:base:ret ""
end

std:base:func int ast:line(ast* a):
  std:base:ret load(fieldptr a line)
end

std:base:func int ast:column(ast* a):
  std:base:ret load(fieldptr a column)
end

std:base:func ast* ast:fromString(cstring name):
  var ast* a std:base:malloc1(ast)

  ast:init(a)
  assign ast:totalCreatedAsts (u32:add ast:totalCreatedAsts 1)
  store (fieldptr a id) strdup(name)

  std:base:ret a
end

std:base:func ast* ast:fromStringLoc(cstring name, cstring file, int line, int column):
  var ast* a ast:fromString(name)
  ast:setLocation a file line column
  std:base:ret a
end

std:base:func (ptr ast) ast:fromInt(int i):
  ast:fromString (int2cstring i)
end

std:base:func ast* ast:fromIntLoc(int i, cstring file, int line, int column):
  var ast* a ast:fromInt(i)
  ast:setLocation a file line column
  std:base:ret a
end

std:base:func astp ast:fromFloat(float f):
  ast:fromString (float2cstring f)
end

std:base:func ast* ast:fromFloatLoc(float f, cstring file, int line, int column):
  var ast* a ast:fromFloat(f)
  ast:setLocation a file line column
  std:base:ret a
end


std:base:func void ast:print((ptr ast) a, int indent):
  printIndent indent
  printString (load (fieldptr a id))

  printString " @"
  printString ast:file(a)
  printString ":"
  printInt ast:line(a)

  var int childCount (getField a childCount)
  var bool hasChilds (u32:sgreater childCount 0)
  branch hasChilds hasChildsYes hasChildsNo

  label hasChildsYes
  printString " ["
  printInt childCount
  printString " childs]"

  label hasChildsNo
  printNewline()

  var int index 0
  label start
  var bool t (u32:uless index (getField a childCount))
  branch t goon end
  label goon
  var (ptr ast) child (load (ptradd (getField a childs) index))
  ast:print child (u32:add indent 4)
  assign index (u32:add index 1)
  branch start
  label end
end

std:base:func void ast:addChild((ptr ast) tree, (ptr ast) child):
  var int oldChildCount (getField tree childCount)
  var int newChildCount (u32:add 1 oldChildCount)
  var (ptr (ptr ast)) newChilds (std:base:mallocN (ptr ast) (cast size_t newChildCount))

  var int index 0
  label start
  var bool t (u32:uless index oldChildCount)
  branch t goon end
  label goon
  store (ptradd newChilds index) (load (ptradd (getField tree childs) index))
  assign index (u32:add index 1)
  branch start
  label end

  store (ptradd newChilds oldChildCount) child

  setField tree childs newChilds
  setField tree childCount newChildCount
end

/// get pointer to index-th child of parent
std:base:func astp ast:child((ptr ast) parent, int index):
  var u32 childCount getField(parent, childCount)
  var bool inRange bool:and(u32:sgreaterEqual index 0, u32:sgreater childCount index)
  branch inRange onOk onError

  label onOk
  var (ptr ast) child (load (ptradd (getField parent childs) index))
  std:base:ret child

  label onError
  printf "ast:child($(|%s [%d childs]...), %d) out of bounds\n"
    (getField parent id) childCount index
  ast:print parent 2
  std:base:ret nullptr(ast)
end

///-----------------------------------------------------------------------------
/// Section: Macro support
///-----------------------------------------------------------------------------

var cstring macroRest "postop..."

std:base:func cstring macroAstId(astp macroCurrentAst):
  var cstring name (getField (cast (ptr ast) macroCurrentAst) id)
  std:base:ret name
end

std:base:func int macroAstChildCount(astp macroCurrentAst):
  getField macroCurrentAst childCount
end

std:base:func astp macroAstChild(astp tree, int num):
  // var (ptr ast) tree (cast (ptr ast) treeaddr)
  var (ptr ast) child (load (ptradd (getField tree childs) num))
  // var int i (cast int child)
  // std:base:ret i
  std:base:ret child
end

std:base:func astp testMacro2(astp lastArg):
  std:base:ret ${native (nested tree) (with (args a b c #lastArg))}
end

std:base:func int macroExec():
  var astp tree (testMacro2 ${foo bar})
  var int i (cast int tree)
  std:base:ret i
end

std:base:func astp macroTest():
  std:base:ret ${macro test}
end

var int lastid 0

std:base:func int newUniqueId():
  assign lastid (u32:add lastid 1)
  std:base:ret lastid
end

std:base:func cstring cstrings:append(cstring l, cstring r):
  var size_t lLength strlen(l)
  var size_t rLength strlen(r)
  var cstring appended (std:base:mallocN char size_t:add(cast size_t 1, size_t:add lLength rLength))
  strcpy appended l
  strcpy (ptradd appended (cast u32 lLength)) r
  std:base:ret appended
end

std:base:func cstring newUniqueName():
  var int id newUniqueId()
  var cstring numstr (int2cstring id)
  std:base:ret (cstrings:append "_tmp_" numstr)
end

std:base:func cstring newUniqueNameFor(cstring purpose):
  var cstring name newUniqueName()
  std:base:ret (cstrings:append (cstrings:append name "_") purpose)
end

macro uniqueId name purpose:
  std:base:ret ${var cstring #name (newUniqueNameFor #purpose)}
end

/// workaround until "const" is properly supported
macro const type name default:
  std:base:ret ${var #type #name #default}
end

///-----------------------------------------------------------------------------
/// Section: control flow
///-----------------------------------------------------------------------------

macro while test body...:
  uniqueId begin "while_begin"
  uniqueId exit "while_exit"
  uniqueId goon "while_body"
  uniqueId testVar "while_testvar"

  std:base:ret $:
    var bool #testVar true
    label #begin
    assign #testVar (#test)
    branch #testVar #goon #exit
    label #goon
    #body
    branch #begin
    label #exit
  end
end

macro for index min supremum code:
  std:base:ret $:
    var int #index #min

    while (u32:sless #index #supremum):
      #code
      assign #index (u32:add #index 1)
    end
  end
end

macro when test onTrue:
  uniqueId trueLabel "when_block"
  uniqueId endLabel "when_end"
  uniqueId testResult "when_testresult"

  var ast* result $:
    var bool #testResult #test
    branch #testResult #trueLabel #endLabel
    label #trueLabel
    #onTrue
    label #endLabel
  end
  std:base:ret result
end

macro unless test onFalse:
  std:base:ret ${when bool:not(#test):
    #onFalse
  end}
end

/// if statement
///
/// Usage example:
///
/// if a > 10 then
///   print "It's bigger!"
/// else if a < 5 then
///   print "It's smaller!"
/// else
///   print "Neither to big nor to small. Purrfect"
/// end
macro if cond onTrue remArgs...:
  uniqueId endLabel "if_end"
  uniqueId trueLabel "if_true"
  uniqueId notTrueLabel "if_not_true"
  uniqueId condVar "if_cond"

  var astp code ${seq}

  ast:addChild code ${when #cond:
    #onTrue
    branch #endLabel
  end}

  var int currentArg 0
  const int argCount getField(remArgs, childCount)

  while (u32:slessEqual (u32:add currentArg 3) argCount):
    var astp econd ast:child(remArgs, u32:add currentArg 1)
    var astp eexpr ast:child(remArgs, u32:add currentArg 2)

    ast:addChild code $:
      when #econd:
        #eexpr
        branch #endLabel
      end
    end

    assign currentArg u32:add(currentArg, 3)
  end

  when (u32:sless (u32:add currentArg 1) argCount):
    var astp elseCode ast:child(remArgs, u32:add currentArg 1)

    ast:addChild code elseCode
  end

  ast:addChild code ${label #endLabel}

  std:base:ret code
end

/// execute code for each node of ast
macro forEachAstChild childVar tree code:
  uniqueId count "count"
  uniqueId index "index"

  std:base:ret $:
    const int #count (getField #tree childCount)
    for #index 0 #count:
      const (ptr ast) #childVar (ast:child #tree #index)
      #code
    end
  end
end

macro ret expr...:
  var2 retcode ${std:base:ret}
  forEachAstChild e expr:
    ast:addChild retcode e
  end
  std:base:ret retcode
end

/// A template is like a macro but is defined in another way.
/// Instead of writing a function which produces the final ast
/// you simply write down the produced ast directly. You can
/// use antiquotes to calculate parts of the ast from arbitrary
/// code expressions
macro template name argsAndImpl...:
  var (ptr ast) t (ast:fromString "macro")
  ast:addChild t name

  const int argCount (getField argsAndImpl childCount)
  for argnum 0 argCount:
    const (ptr ast) arg (ast:child argsAndImpl argnum)
    var bool firstArg (u32:uless argnum (u32:sub argCount 1))
    when firstArg:
      ast:addChild t arg
    end
    unless firstArg:
      var (ptr ast) foo (ast:fromString "quote")
      ast:addChild foo arg
      var (ptr ast) reti (ast:fromString "ret")
      ast:addChild reti foo
      ast:addChild t reti
    end
  end

  ret t
end

std:base:func void compiler:printWarning(cstring message):
  printString "Warning: "
  printString message
  printNewline()
end

/// quickly define a test function to be run with C-c,t in emacs
template testf impl...:
  std:base:func void test():
    #impl
  end
end

macro assert checkCode:
  ret $:
    when (bool:not (#checkCode)):
      printlnString "Assertion failed"
      ast:print ${#checkCode} 0
      exit 1
    end
  end
end

macro cstring:concat firstString strings...:
  var (ptr ast) code ${}
  uniqueId resultString "cstring_concat"

  ast:addChild code ${var cstring #resultString #firstString}

  forEachAstChild string strings:
    ast:addChild code ${assign #resultString (cstrings:append #resultString #string)}
  end

  ast:addChild code ${#resultString}

  ret code
end


///-----------------------------------------------------------------------------
/// Section: More
///-----------------------------------------------------------------------------

/// Prints the passed ast to stdout at compile time
/// and will return it at run time. Can be used to debug
/// a specific macro using mret instead of ret
template mret code:
  printNewline()
  ast:print #code 0
  ret #code
end

template pret code:
  printNewline()
  ast:print #code 0
  ret ${}
end

///-----------------------------------------------------------------------------
/// Section: Additional AST functions
///-----------------------------------------------------------------------------

std:base:func void ast:setChild(ast* parent, int index, ast* newChild):
  assert (u32:uless index (getField parent childCount))
  var (ptr (ptr ast)) childptrAddr (ptradd (getField parent childs) index)
  store childptrAddr newChild
end

std:base:func void ast:replace(ast* tree, cstring placeholder, ast* replacement):
  const int count (getField tree childCount)
  for childNum 0 count:
    var (ptr ast) child (ast:child tree childNum)
    when (cstring:equal placeholder (getField child id)):
      ast:setChild tree childNum replacement
    end
  end

  forEachAstChild c tree:
    ast:replace c placeholder replacement
  end
end

std:base:func void ast:replaceId(ast* tree, cstring placeholder, cstring newid):
  when (cstring:equal (getField tree id) placeholder):
    setField tree id newid
  end

  forEachAstChild child tree:
    ast:replaceId child placeholder newid
  end
end

///-----------------------------------------------------------------------------
/// Section: Floating point support
///-----------------------------------------------------------------------------

macro float:aliasNoQNAN funcName:
  var cstring macroName (cstrings:append "float:" (getField funcName id))
  var astp orderedName (ast:fromString (cstrings:append "float:o" (getField funcName id)))
  ast:addChild orderedName $${#l}
  ast:addChild orderedName $${#r}

  var astp macroDef ${macro #macroName l r:
    ret ${orderedName}
  end}
  ast:replace macroDef "orderedName" orderedName
  ret macroDef
end

float:aliasNoQNAN equal
float:aliasNoQNAN notEqual
float:aliasNoQNAN less
float:aliasNoQNAN greater
float:aliasNoQNAN lessEqual
float:aliasNoQNAN greaterEqual

template float:neg x (float:sub 0. #x)

///-----------------------------------------------------------------------------
/// Section: Additional operators and basic math functions
///-----------------------------------------------------------------------------

std:base:func int u32:mod(int v, int div):
  u32:urem v div
end

std:base:func int u32:neg(int x):
  ret u32:sub(0, x)
end

std:base:func char* bool2cstring(bool b):
  var char* result nullptr(char)

  if b:
    assign result "true"
  else:
    assign result "false"
  end

  ret copyString(result)
end

template op+ l r (u32:add #l #r)
template op- l r (u32:sub #l #r)
template op* l r (u32:mul #l #r)
template op/ l r (u32:sdiv #l #r)

template op== l r (u32:equal #l #r)
template op!= l r (u32:notEqual #l #r)

template op> l r (u32:sgreater #l #r)
template op< l r (u32:sless #l #r)
template op>= l r (u32:sgreaterEqual #l #r)
template op<= l r (u32:slessEqual #l #r)

template op==_ptr l r (cast int #l == cast int #r)
template op!=_ptr l r (cast int #l != cast int #r)

macro addMappedChilds parent mapf childs...:
  var (ptr ast) code ${}
  forEachAstChild child childs:
    var (ptr ast) map (ast:fromString (getField mapf id))
    ast:addChild map child
    ast:addChild code ${ast:addChild #parent #map}
  end
  ret code
end

template op= l r (assign #l #r)

/// Work-around for malloc, ptradd, etc. only accepting u32 for now.
template fixSizet num:
  cast u32 #num
end

///-----------------------------------------------------------------------------
/// Section: Deprecation
///-----------------------------------------------------------------------------

macro deprecatedNoVarArgs name replacementName warningCode args...:
  var astp code ${macro #name}
  forEachAstChild arg args:
    ast:addChild code arg
  end

  var astp impl ${}
  ast:addChild code impl

  ast:addChild impl warningCode

  var astp call (ast:fromString (getField replacementName id))
  forEachAstChild arg2 args:
    var astp antiquoteArg $${antiquote}
    ast:addChild antiquoteArg arg2
    ast:addChild call antiquoteArg
  end
  ast:addChild impl ${ret ${#call}}

  ret code
end

macro deprecatedVarArgs name replacementName warningCode:
  var astp code ${macro #name args...}

  var cstring replName (cstring:quote (getField replacementName id))

  var astp impl ${}
  ast:addChild code impl
  ast:addChild impl $:
    #warningCode

    var astp call (ast:fromString #replName)
    forEachAstChild child args:
      ast:addChild call child
    end

    ret call
  end

  ret code
end

macro deprecated name replacementName args...:
  var cstring warning (cstring:quote (cstring:concat (getField name id) " is deprecated. Use " (getField replacementName id) " instead."))
  var astp warningCode ${compiler:printWarning #warning}

  var bool isVarArg false

  const int argsChildCount (getField args childCount)

  when (argsChildCount > 0):
    when (cstring:equal macroRest (getField (ast:child args (argsChildCount - 1)) id)):
      isVarArg = true
    end
  end

  var astp code (nullptr ast)

  when isVarArg:
    code = ${deprecatedVarArgs #name #replacementName #warningCode}
  end
  unless isVarArg:
    code = ${deprecatedNoVarArgs #name #replacementName #warningCode}
    forEachAstChild arg args:
      ast:addChild code arg
    end
  end

  ret code
end

///-----------------------------------------------------------------------------
/// Section: Aliasing int to u32
///-----------------------------------------------------------------------------

macro alias name replacementName args...:
  var astp warningCode ${}
  var bool isVarArg false

  const int argsChildCount (getField args childCount)

  when (argsChildCount > 0):
    when (cstring:equal macroRest (getField (ast:child args (argsChildCount - 1)) id)):
      isVarArg = true
    end
  end

  var astp code (nullptr ast)

  when isVarArg:
    code = ${deprecatedVarArgs #name #replacementName #warningCode}
  end
  unless isVarArg:
    code = ${deprecatedNoVarArgs #name #replacementName #warningCode}
    forEachAstChild arg args:
      ast:addChild code arg
    end
  end

  ret code
end

alias int:equal u32:equal l r
alias int:notEqual u32:notEqual l r
alias int:less u32:less l r
alias int:lessEqual u32:lessEqual l r
alias int:greater u32:greater l r
alias int:greaterEqual u32:greaterEqual l r
alias int:shl u32:shl l r
alias int:lshr u32:lshr l r
alias int:ashr u32:ashr l r

alias int:add u32:add l r
alias int:sub u32:sub l r
alias int:mul u32:mul l r
alias int:sdiv u32:sdiv l r
alias int:udif u32:udif l r
alias int:urem u32:urem l r
alias int:srem u32:srem l r
alias int:and u32:and l r
alias int:or u32:or l r
alias int:xor u32:xor l r

alias int:clamp u32:clamp min max x
alias int:neg u32:neg x
alias int:mod u32:mod l r
alias int:toCString u32:toCString x
alias int:min u32:min l r
alias int:max u32:max l r

///-----------------------------------------------------------------------------
/// Section: misc
///-----------------------------------------------------------------------------

std:base:func bool zmp:prelude:setFromString(bool* target, cstring value):
  if (cstring:equal value "true"):
    store target true
    ret true
  elseif (cstring:equal value "false"):
    store target false
    ret true
  end
  ret false
end

///-----------------------------------------------------------------------------
/// Section: external libraries
///-----------------------------------------------------------------------------

macro linkclib fileNames...:
  var astp code ${}
  forEachAstChild fileName fileNames:
    var astp child ${zmp:compiler:linkclib #fileName}
    /// Work-around for bug where expr gets locations like ???.zomp in some cases.
    ast:setLocation child ast:file(fileName) ast:line(fileName) ast:column(fileName)
    ast:addChild code child
  end

  ret code
end

type LoadedLibList:
  cstring name
  LoadedLibList* next
end

var LoadedLibList* zmpx:lib:includedLibs null

std:base:func void printAllLoadedLibs():
  printlnString "Loaded libs:"

  var LoadedLibList* list zmpx:lib:includedLibs
  while (list !=_ptr nullptr LoadedLibList):
    printString "  "
    printlnString getField(list, name)

    list = getField list next
  end
end

var bool requireLibDebug false

macro static:setRequireLibDebug value:
  unless zmp:prelude:setFromString(ptr requireLibDebug, getField value id):
    ret ${std:base:error #value "Expecting 'true' or 'false'"}
  end

  ret ${}
end

/// Load the given lib. Expects a quoted relative path name. Libraries already
/// loaded will not be loaded again.
macro zmpx:lib:requireLib lib:
  var cstring libName getField(lib, id)

  var bool alreadyLoaded false

  var LoadedLibList* list zmpx:lib:includedLibs
  while (list !=_ptr nullptr LoadedLibList):
    when (cstring:equal (getField list name) libName):
      alreadyLoaded = true
    end

    list = getField list next
  end

  var ast* code ${}

  unless alreadyLoaded:
    var LoadedLibList* newlist std:base:malloc1(LoadedLibList)
    setField newlist name libName
    setField newlist next zmpx:lib:includedLibs
    assign zmpx:lib:includedLibs newlist
    assign code ${include #lib}
  end

  when requireLibDebug:
    printString "Loading library "
    printString libName
    if alreadyLoaded:
      printString " (already loaded, ignored)"
    end
    printNewline()
    flushStdout()
  end

  ret code
end

/// Will load the given libs. Expects quoted paths relative to the compilers
/// working directory. Libs already loaded will not be loaded, again
macro require libs...:
  var ast* code ${}

  forEachAstChild lib libs:
    ast:addChild code ${zmpx:lib:requireLib #lib}
  end

  ret code
end

/// Load file from library directory
/// Usage:
///   requireLibs libcee math
/// Each lib will be loaded once
macro requireLibs names...:
  var ast* code ${require}
  forEachAstChild child names:
    var cstring qualifiedName cstring:quote(cstring:concat("libs/", getField child id, ".zomp"))
    ast:addChild code ast:fromString(qualifiedName)
  end
  ret code
end

///-----------------------------------------------------------------------------
/// Section: Interactive zomp shell
///-----------------------------------------------------------------------------

macro ifInteractive code:
  if std:vm:isInteractive():
    ret code
  end

  ret ${}
end

ifInteractive:
  std:base:func int main()

  std:base:func void runMain():
    const int retval main()
    printNewline()
    printString "main() returned "
    printlnInt retval
  end

  testf runMain()
end

///-----------------------------------------------------------------------------
/// Section: language default bindings
///-----------------------------------------------------------------------------

/// Declare a function. Use this to avoid auto indentation on newline :)
template dfunc returnType nameAndOps:
  std:base:func #returnType #nameAndOps
end

var bool zmp:prelude:printCompiliationProgress false

macro static:logCompilationProgress value:
  unless zmp:prelude:setFromString(ptr zmp:prelude:printCompiliationProgress,
      getField value id):
    ret ${error #value "Expecting 'true' or 'false'"}
  end

  ret ${}
end

std:base:func void zmp:prelude:logFunctionCompilation(ast* args):
  if zmp:prelude:printCompiliationProgress:
    printString "Compiling method"
    printNewline()
    if u32:greater(getField args childCount, 2):
      ast:print (ast:child args 1) 2
    end
  end
end

macro func args...:
  zmp:prelude:logFunctionCompilation args

  var ast* code ${std:base:func}
  forEachAstChild child args:
    ast:addChild code child
  end
  ret code
end

alias error std:base:error args...

