/**
 * Testing string handling
!syntax indent
 */

requireLibs unittest

template op==_chr l r:
  char:equal #l #r
end

var char* multiline "line0\nline1\n"

struct String:
  char* content
  int length
end

func String makeString(char* str):
  return String(content = str, length = strlen str)
end

/// Tests for a regression where global string data for string literal was not
/// produced for functions returning a struct
func void regressionCheck():
  str := makeString "foobar"
end

unittest:testCase CharLiterals_Simple:
  unittest:assertAll:
    toInt 'a' == 97
    toInt 'A' == 65
    toInt '"' == 34 // "
  end
end

unittest:testCase StringEscapeSequences:
  template hasAsciiNumber charStr asciiNumber:
    toInt( #charStr[0] ) == #asciiNumber
  end

  unittest:assertAll:
    hasAsciiNumber "\'" 39
    hasAsciiNumber "\"" 34
    hasAsciiNumber "\\" 92
    hasAsciiNumber "\0" 0
    hasAsciiNumber "\n" 10
    hasAsciiNumber "\r" 13
    hasAsciiNumber "\t" 9
    hasAsciiNumber "\v" 11
    hasAsciiNumber "\a" 7
    hasAsciiNumber "\b" 8
    hasAsciiNumber "\f" 12
    hasAsciiNumber "\?" 63

    // \x0 - \x255
    // \o...
    // \u1234
    // \U12345678
  end
end

func int main():
  var char* simpleString "this be a simple string"
  var char* simpleString2 "another string"

  unittest:assert (cstring:equal simpleString simpleString)
  unittest:assert bool:not(cstring:equal simpleString simpleString2)

  printlnString "Here should be an empty line" //// print line empty
  printChar load(ptradd multiline 5)
  printlnString "And here another one" //// print another
  printChar '\n'
  printlnString "And here should be 'one', 'two', 'three' each in a line"
  printString "one\ntwo\nthree\n"
  //// print one
  //// print two
  //// print three

  unittest:assert (load(ptradd multiline 5) ==_chr '\n')

  ret 0
end

