/**
 * Testing overloaded operators
 */

func int op+_u32_u32(int l, int r)
  l + r
end

func int op-_u32_u32(int l, int r)
  l - r
end

func int op*_u32_u32(int l, int r)
  l * r
end

func int op/_u32_u32(int l, int r)
  l / r
end

func bool op>_u32_u32(int l, int r)
  l > r
end

func bool op>=_u32_u32(int l, int r)
  l >= r
end

func bool op<_u32_u32(int l, int r)
  l < r
end

func bool op<=_u32_u32(int l, int r)
  l <= r
end

func bool op==_u32_u32(int l, int r)
  l == r
end

func bool op!=_u32_u32(int l, int r)
  l != r
end

func float op+_float_float(float l, float r)
  l +_f r
end

func bool op==_float_float(float l, float r)
  l ==_f r
end

template op== l r
  zmp:cee:equal #l #r
end

func void testOps()
  // var bool fail1 (zmp:cee:add 10 2.0)
  var int iadd (zmp:cee:add 1 3)
  var int isub (zmp:cee:sub 4 2)
  var int imul (zmp:cee:mul 4 7)
  var int idiv (zmp:cee:div 44 11)
  var bool iequal (zmp:cee:equal 9 9)
  var bool inotEqual (zmp:cee:notEqual 20 21)
  var bool igreater (zmp:cee:greater 10 8)
  var bool igreaterEqual (zmp:cee:greaterEqual 20 20)
  var bool iless (zmp:cee:less 3 100)
  var bool ilessEqual (zmp:cee:lessEqual 7 7)
  var float fadd (zmp:cee:add 1.3 4.2)

  unittest:assertAll
    iadd == 4
    isub == 2
    imul == 28
    idiv == 4
    iequal
    inotEqual
    igreater
    igreaterEqual
    iless
    ilessEqual

    fadd == 5.5
  end
end

func void print_u32(int i)
  printInt i
end

func void print_float(float f)
  printFloat f
end

func void print_char(char c)
  printChar c
end

func void print_bool(bool b)
  printBool b
end

func void print_double(double d)
  printDouble d
end

func void "print_char*"(char* string)
  printString string
end

func void "print_ast*"(ast* code)
  ast:print code 0
end

macro print args...
  var astp code ${}

  forEachAstChild arg args
    ast:addChild code ${zmp:cee:print #arg}
  end

  ret code
end

func void testPrint()
  var cstring nl "\n  "
  print "Testing generic printing function:" nl
  print "float: " 1.0 nl
  print "double: " 2.0d nl
  print "char: " '!' nl
  print "int: " 999 nl
  print "bool: " true nl
  print "ast: " ${x := 10 * sin(x)}
end

alias toFloat zmp:cee:toFloat x
alias toInt zmp:cee:toInt x
alias toChar zmp:cee:toChar x
alias toCString zmp:cee:toCString x

func float toFloat_u32(u32 i)
  int:toFloat i
end

func int toInt_float(float f)
  float:toInt f
end

func int toInt_double(double d)
  double:toInt d
end

func void testConversion()
  var float f toFloat(100)
  var int i1 toInt(10.0)
  var int i2 toInt(33.0d)

  unittest:assertAll
    f == 100.0
    i1 == 10
    i2 == 33
  end
end

func int main()
  testOps()
  testPrint()
  testConversion()

  ret 0
end


