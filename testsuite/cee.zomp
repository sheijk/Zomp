/**
 * Testing libcee.zomp
!syntax indent
 */

require "libs/libcee.zomp"

var int counter 0

func bool increaseAndRet(bool result)
  counter = counter + 1
  ret result
end

func void testDefineVar()
  x := 10
  y := 1.0
  unittest:assertAll
    x == 10
    y ==_f 1.0
  end
end

struct Point
  int x
  int y
end

struct TestStruct
  int x
  float y
  int* tenints
  TestStruct* next
  Point pt
end

func void testDotOp()
  p := malloc TestStruct
  p.x = 23
  p.y = 7.3

  p.tenints = malloc int 10
  for i 0 10
    p.tenints[i] = i + 1
  end

  // p.next = malloc TestStruct
  // p.next.x = 99

  p.pt.x = 3
  p.pt.y = 7

  unittest:assertAll
    p.x == 23
    p.y ==_f 7.3
    p.tenints[0] == 1
    p.tenints[1] == 2
    p.tenints[2] == 3
    p.tenints[3] == 4
    p.tenints[4] == 5
    p.tenints[5] == 6
    p.tenints[6] == 7
    p.tenints[7] == 8
    p.tenints[8] == 9
    p.tenints[9] == 10
    // p.next.x == 99
    p.pt.x == 3
    p.pt.y == 7
  end
end

struct IntArrays
  int size
  int* a
  Point* points
end

func void IntArrays:init(IntArrays* this, int size)
  this.size = size
  this.a = malloc int size
  this.points = malloc Point size
end

func void IntArrays:delete(IntArrays* this)
  dealloc this.a
  dealloc this.points
  dealloc this
end

func void testDotArray()
  size := 4
  arr := new IntArrays size

  for i 0 size
    arr.a[i] = i + 1
    arr.points[i].x = i * 2
    arr.points[i].y = 1 - i
  end

  unittest:assertAll
    arr.a[0] == 1
    arr.a[1] == 2
    arr.a[2] == 3
    arr.a[3] == 4
    arr.points[0].x == 0
    arr.points[0].y == 1
    arr.points[1].x == 2
    arr.points[1].y == 0
    arr.points[2].x == 4
    arr.points[2].y == -1
    arr.points[3].x == 6
    arr.points[3].y == -2
  end

  IntArrays:delete arr
end

func void testArrayDot()
  size := 3
  points := malloc Point 3

  for i 0 size
    points[i].x = i
    points[i].y = size - i
  end

  unittest:assertAll
    points[0].x == 0
    points[0].y == 3
    points[1].x == 1
    points[1].y == 2
    points[2].x == 2
    points[2].y == 1
  end

  dealloc points
end

template postop* ptr
  load #ptr
end

func void testArrayPtrDot()
  size := 3
  points := malloc Point* 3
  for i 0 size
    points[i] = malloc Point

    points[i]*.x = i * i
    points[i]*.y = 10 * i
  end

  unittest:assertAll
    points[0]*.x == 0
    points[0]*.y == 0
    points[1]*.x == 1
    points[1]*.y == 10
    points[2]*.x == 4
    points[2]*.y == 20
  end

  for i2 0 size
    dealloc points[i2]
  end
  dealloc points
end

func void testFor()
  sum := 0

  for x 0 10
    sum = sum + x
  end

  unittest:assert (sum == 45)
end

func void testNestedFor()
  sum := 0

  for i 0 10
    for j 4 7
      sum = sum + 1
    end
  end

  unittest:assertAll
    sum == 30
  end
end

func int getValFromSwitch(int x)
  switch (10+x)
    void
  case 10
    ret 1
  case 12
    ret 2
  end

  ret 123
end

func void testSwitch()
  unittest:assertAll
    getValFromSwitch 0 == 1
    getValFromSwitch 2 == 2
    getValFromSwitch 99 == 123
  end
end

func void testLazyOps()
  template expectCount num code
    unittest:assert
      counter = 0
      #code
      counter == #num
    end
  end

  expectCount 1 (increaseAndRet false && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet false)
  expectCount 1 (increaseAndRet true || increaseAndRet false)
  expectCount 2 (increaseAndRet false || increaseAndRet true)
end

func void testAssign()
  floatp := malloc float 2

  floatp* = 1.0
  (ptradd floatp 1)* = 10.0

  unittest:assertAll
    floatp* ==_f 1.0
    load (ptradd floatp 1) ==_f 10.0
  end

  free (cast void* floatp)
end

func int main()
  testDefineVar()
  testDotOp()
  testArrayDot()
  testDotArray()
  testLazyOps()
  testSwitch()
  testFor()
  testNestedFor()
  testAssign()

  ret 0
end


