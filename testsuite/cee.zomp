/**
 * Testing libcee.zomp
!syntax indent
 */

include "libs/libcee.zomp"

var int counter 0

func bool increaseAndRet(bool result)
  counter = counter + 1
  ret result
end

func void testDefineVar()
  x := 10
  y := 1.0
  unittest:assertAll
    x == 10
    y ==_f 1.0
  end
end

struct Point
  int x
  int y
end

struct TestStruct
  int x
  float y
  int* tenints
  TestStruct* next
  Point pt
end

func void testDotOp()
  p := malloc TestStruct
  p.x = 23
  p.y = 7.3

  p.tenints = malloc int 10
  for i 0 10
    p.tenints[i] = i + 1
  end

  // p.next = malloc TestStruct
  // p.next.x = 99

  p.pt.x = 3
  p.pt.y = 7

  unittest:assertAll
    p.x == 23
    p.y ==_f 7.3
    p.tenints[0] == 1
    p.tenints[1] == 2
    p.tenints[2] == 3
    p.tenints[3] == 4
    p.tenints[4] == 5
    p.tenints[5] == 6
    p.tenints[6] == 7
    p.tenints[7] == 8
    p.tenints[8] == 9
    p.tenints[9] == 10
    // p.next.x == 99
    p.pt.x == 3
    p.pt.y == 7
  end
end

func void testLazyOps()
  template expectCount num code
    unittest:assert
      counter = 0
      #code
      counter == #num
    end
  end

  expectCount 1 (increaseAndRet false && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet false)
  expectCount 1 (increaseAndRet true || increaseAndRet false)
  expectCount 2 (increaseAndRet false || increaseAndRet true)
end

func int main()
  testDefineVar()
  testDotOp()
  testLazyOps()

  ret 0
end


