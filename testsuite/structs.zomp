/**
 * Usage of structs
 *
!syntax indent
 */

require "libs/unittest.zomp"

type Point:
  int x
  int y
end

func void initPoint(Point* p, int x, int y):
  setField p x x
  setField p y y
end

unittest:testCase MallocStruct:
  var (ptr Point) p malloc(Point)

  setField p x 1
  setField p y 2

  var int x getField(p,x)
  var int y getField(p,y)

  unittest:assertAll:
    x == 1
    y == 2
  end
end

unittest:testCase OnstackAddrOf:
  var Point p
  var (ptr Point) pp ptr(p)

  setField pp x 4
  setField ptr(p) y 5

  var int x getField(pp,x)
  var int y getField(ptr(p),y)

  unittest:assertAll:
    x == 4
    y == 5
  end
end

unittest:testCase Onstack:
  var Point p

  setField p x 4
  setField p y 5

  var int x getField(p,x)
  var int y getField(p,y)

  unittest:assertAll:
    x == 4
    y == 5
  end
end

unittest:testCase Assignment:
  var Point a
  initPoint ptr(a) 10 20

  var Point b
  initPoint ptr(b) 1 2
  assign b a

  unittest:assertAll:
    getField(b,x) == 10
    getField(b,y) == 20
  end
end

/// nested functions

type Nested:
  Point pos
  float weight
end

unittest:testCase Nested:
  var Nested n

  var Point p
  setField p x 10
  setField p y 30

  setField n pos p

  unittest:assertAll:
    getField getField(n, pos) x == 10
    getField getField(n, pos) y == 30
  end
end

/// not supported, yet
func bool expect(Point p, int x, int y):
  (getField(p,x) == x) && (getField(ptr(p),y) == y)
end

unittest:testCase Argument:
  var Point p
  setField p x 8
  setField p y 9

  unittest:assert(expect p 8 9)
end

// /// not supported, yet
func Point makePoint():
  var Point p
  setField p x 1
  setField p y 2
  ret p
end

func Point point(int x, int y):
  var Point p
  setField p x x
  setField p y y
  ret p
  /// check whether the previous ret really returns
  setField p x 9999
  setField p y 12345
  ret p
end

unittest:testCase Return:
  var Point p1 makePoint()
  unittest:assert(expect p1 1 2)

  var Point p2 point(11, 33)
  unittest:assert(expect p2 11 33)
end

var Point globalStructVar 0

unittest:testCase SupportGlobalStructVar:
  unittest:assertAll:
    getField globalStructVar x == 0
    getField globalStructVar y == 0
  end
end

unittest:main

