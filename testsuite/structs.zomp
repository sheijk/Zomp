/**
 * Usage of structs
 *
 */

type Point
  int x
  int y
end

func void initPoint(Point* p, int x, int y)
  setField p x x
  setField p y y
end

func void testMallocStruct()
  var (ptr Point) p malloc(Point)

  setField p x 1
  setField p y 2

  var int x getField(p,x)
  var int y getField(p,y)

  assert (x == 1)
  assert (y == 2)
end

func void testOnstackAddrOf()
  var Point p
  var (ptr Point) pp ptr(p)

  setField pp x 4
  setField ptr(p) y 5

  var int x getField(pp,x)
  var int y getField(ptr(p),y)

  assert (x == 4)
  assert (y == 5)
end

func void testOnstack()
  var Point p

  setField p x 4
  setField p y 5

  var int x getField(p,x)
  var int y getField(p,y)

  assert (x == 4)
  assert (y == 5)
end

func void testAssignment()
  var Point a
  initPoint ptr(a) 10 20

  var Point b
  initPoint ptr(b) 1 2
  assign b a

  assert (getField(b,x) == 10)
  assert (getField(b,y) == 20)
end

/// nested functions

/// doesn't work, yet
// type Nested
//   Point pos
//   float weight
// end
//
// func void testNested()
//   var Nested n
//   var Point p
//   getField(n, pos)
//   void
// end

/// not supported, yet
// func void expect89(Point p)
//   assert (getField(ptr(p),x) == 8)
//   assert (getField(ptr(p),y) == 9)
// end
//
// func void argument()
//   var Point p
//   setField p x 8
//   setField p y 9
//   expect89 p
// end

/// not supported, yet
// func Point makePoint()
//   var Point p
//   setField p x 1
//   setField p y 2
//   ret p
// end

func int main()
  testMallocStruct()
  testOnstackAddrOf()
  testOnstack()
  testAssignment()

  ret 0
end

