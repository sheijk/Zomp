///
/// Generic functions
///

requireLibs libcee unittest

func void printGenericPtr!T(T* ptr):
  printPtr (cast void* ptr)
end

unittest:testCase GenericFunctionSimple:
  i0 := nullptr int
  f0 := nullptr float

  //// print i0 0x0
  print "i0 = "
  printGenericPtr i0
  println()

  //// print f0 0x0
  print "f0 = "
  printGenericPtr f0
  println()
end

//------------------------------------------------------------------------------

type Printable!T:
  (fptr void T*) print
end

func void print:int(int* i):
  printInt *i
end

func void genericPrint!T(T* value, Printable!T* vtable):
  // vtable.print value
end

func int main():
  vtableInt := Printable!int(print = print:int)
  x := 10
  // vtableInt.print &x
  genericPrint &x &vtableInt
  ret 0
end

// testf:
//   x := main()
//   println "\nmain returned " x
// end

//------------------------------------------------------------------------------

// type RefCounted!T:
//   T value
//   int refCount
// end
// 
// func void retain!T(RefCounted!T* rc):
//   println "lalal"
//   ++rc.refCount
// end

// unittest:testCase GenericFunctionNotUsingTypeParams:
//   // rc := RefCounted!float(value = 3.0, refCount = 0)
//   // retain(&rc)
// 
//   unittest:assertAll:
//     // rc.refCount == 1
//     // rc.value == 3.0
//   end
//   return
// end

//------------------------------------------------------------------------------

// unittest:main

