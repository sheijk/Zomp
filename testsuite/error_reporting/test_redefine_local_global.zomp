///
/// Testing defining a local var/func/macro/type with the name of an existing
/// global does not produce an error.
///

requireLibs libcee

var int existingGlobalVar 0

std:base:func void existingGlobalFunc():
end

macro existingGlobalMacro:
  ret ${}
end

type existingGlobalType int

std:base:func void localVarsCanHideGlobals():
  var float existingGlobalVar 0.0
  var float existingGlobalFunc 0.0
  var float existingGlobalMacro 0.0
  var float existingGlobalType 0.0
end

std:base:func void localMacrosCanHideGlobals():
  // TODO: functions created from macros need a distinct name to avoid collisions

  // macro existingGlobalVar:
  //   ret ${}
  // end

  // macro existingGlobalFunc:
  //   ret ${}
  // end

  macro existingGlobalMacro:
    ret ${}
  end

  macro existingGlobalType:
    ret ${}
  end
end

std:base:func int main():
  localVarsCanHideGlobals()
  localMacrosCanHideGlobals()

  printf "everything-works\n" //// print everything-works
  std:base:ret 0
end

