///
/// Testing pointer functionality
///

requireLibs unittest

///-----------------------------------------------------------------------------
/// Section: Basic pointer usage
///-----------------------------------------------------------------------------

unittest:testCase PointersReadWrite:
  varInt := 20
  pVarInt := &varInt
  beforeStore := pVarInt*
  *pVarInt = 10
  afterStore := pVarInt*

  unittest:assertAll:
    beforeStore == 20
    afterStore == 10
  end
end

unittest:testCase SimpleArithmetic:
  var int[4] array
  pArray := zmp:array:addr &array
  (pArray + 0)* = 1
  (pArray + 1)* = 2
  (pArray + 2)* = 3
  (pArray + 3)* = 4
  
  unittest:assertAll:
    (pArray+0)* == 1
    *(pArray+1) == 2
    *(pArray+2) == 3
    (pArray+3)* == 4
    pArray+3 > pArray+0
  end
end

unittest:testCase PointerToPointer:
  iVal := 10
  pVal := &iVal
  ppVal := &pVal

  unittest:assertAll:
    iVal == 10
    // eek, can't use print with pointers, yet
    true == (pVal == &iVal)
  end
end

///-----------------------------------------------------------------------------
/// Section: taking addresses
///-----------------------------------------------------------------------------

var int globalInt20 20

unittest:testCase TakingAddress:
  ptr globalInt20
  ret
end

func bool takeAddressOfParameter(int param):
  ret (ptr param ==_ptr nullptr int)
end

func int* takeAddressOfLocal():
  std:base:var int localVar 0
  ret (ptr localVar)
end

///-----------------------------------------------------------------------------
/// Section: function pointers
///-----------------------------------------------------------------------------

func int add1(int i):
  ret (i+1)
end

func int sub1(int i):
  ret (i-1)
end

func int add(int l, int r):
  ret (l+r)
end

unittest:testCase SimpleFunctionPointer:
  var (fptr int int) pNext &add1
  var (fptr int int) pPrev &sub1
  var (fptr int int int) pAdd &add

  unittest:assertAll:
    pNext 3 == 4
    pPrev 3 == 2
    pNext(5) == pPrev(7)
    pAdd 10 20 == 30
  end
end

func int get3():
  ret 3
end

func int get5():
  ret 5
end

unittest:testCase RegressionFunctionPointerNoArgs:
  var (fptr int) pGet3 &get3
  var (fptr int) pGet5 &get5

  unittest:assertAll:
    get3() == 3
    get5() == 5

    pGet3() == 3
    pGet5() == 5
  end
end


type IntFunc (fptr int)

// unittest:testCase functionPointerArray:
//   // var IntFunc[2] funcs
//   // funcs[0] = &get3
//   // funcs[1] = &get5
// 
//   unittest:assertAll:
//     // (funcs[0])() == 3
//     // (funcs[1])() == 5
//   end
// end

struct MyVTable:
  (fptr void int) setId
  (fptr int) getId
end

var int vtableId 0

func void vtable_setId(int i):
  println "vtable_setId(" i "), was " vtableId
  vtableId = i
end

func int vtable_getId():
  ret vtableId
end

func void changeId(MyVTable* vt, int i):
  println "changeId(_, " i ")"
  f := vt.setId
  f(i)
end

func void printId():
  println "vtableId = " vtableId
end

unittest:testCase VTable:
  vtable := malloc MyVTable
  vtable.setId = &vtable_setId
  vtable.getId = &vtable_getId

  set := vtable.setId
  get := vtable.getId

  set( 10 )
  uassert( get() == 10 )

  // vtable.setId 11
  // uassert( get() == 11 )
  // uassert( vtable.getId() == 11 )
  
  // vtable.setId( 12 )
  // uassert( vtable.getId() == 12 )
  
  dealloc vtable
end

unittest:main

