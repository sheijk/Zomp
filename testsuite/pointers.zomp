///
/// Testing pointer functionality
///

requireLibs unittest

///-----------------------------------------------------------------------------
/// Section: Basic pointer usage
///-----------------------------------------------------------------------------

unittest:testCase PointersReadWrite:
  varInt := 20
  pVarInt := &varInt
  beforeStore := pVarInt*
  *pVarInt = 10
  afterStore := pVarInt*

  unittest:assertAll:
    beforeStore == 20
    afterStore == 10
  end
end

unittest:testCase SimpleArithmetic:
  var int[4] array
  pArray := zmp:array:addr &array
  (pArray + 0)* = 1
  (pArray + 1)* = 2
  (pArray + 2)* = 3
  (pArray + 3)* = 4
  
  unittest:assertAll:
    (pArray+0)* == 1
    *(pArray+1) == 2
    *(pArray+2) == 3
    (pArray+3)* == 4
    pArray+3 > pArray+0
  end
end

unittest:testCase PointerToPointer:
  iVal := 10
  pVal := &iVal
  ppVal := &pVal

  unittest:assertAll:
    iVal == 10
    // eek, can't use print with pointers, yet
    true == (pVal == &iVal)
  end
end

//------------------------------------------------------------------------------

func int add1(int i):
  ret (i+1)
end

func int sub1(int i):
  ret (i-1)
end

func int add(int l, int r):
  ret (l+r)
end

unittest:testCase SimpleFunctionPointer:
  var (fptr int int) pNext &add1
  var (fptr int int) pPrev &sub1
  
  unittest:assertAll:
    pNext 3 == 4
    pPrev 3 == 2
    pNext(5) == pPrev(7)
  end
end

func int get3():
  ret 3
end

func int get5():
  ret 5
end

macro hasType vr typ:
  uniqueId tmp "hasType"
  ret ${seq:
    #tmp := nullptr #typ
    #tmp = &#vr
  end}
end

// func void foo(int i):
// end

// unittest:testCase FunctionPointer2:
//   var (fptr int) pGet3 &get3
//   var (fptr int) pGet5 &get5
// 
//   // hasType pGet3 (fptr int)
//   // hasType &get3 (fptr int)
// 
//   // foo get3
//   // println get3()
//   getThree := &get3
//   foo (getThree*)()
//   // foo getThree
//   // println getThree()
// 
//   unittest:assertAll:
//     get3 == 3
//     // getThree == 3
//     // pGet3() == 3
//     // pGet5() == 5
//   end
// end

// type IntFunc (fptr int)

// unittest:testCase functionPointerArray:
//   var IntFunc[2] funcs
//   funcs[0] = &get3
//   funcs[1] = &get5
// 
//   unittest:assertAll:
//     (funcs[0])() == 3
//     (funcs[1])() == 5
//   end
// end

// struct MyVTable:
//   (fptr void int) setId
//   (fptr int) getId
// end
// 
// var int vtableId 0
// 
// func void vtable_setId(int i):
//   vtableId = i
// end
// 
// func int vtable_getId():
//   ret vtableId
// end
// 
// unittest:testCase VTable:
//   vtable := malloc MyVTable
//   vtable.setId = &vtable_setId
//   vtable.getId = &vtable_getId
// 
//   vtable.setId 10
//   f := vtable.getId
//   f2 := f()
//   printString vtable_getId
//   // unittest:assert( f2() == 10 )
//   // unittest:assert( vtable.getId() == 10 )
//   
//   // vtable.setId(20)
//   // unittest:assert( vtable.getId() == 20 )
// 
//   dealloc vtable
// end

unittest:main

