///
/// Testing libcee.zomp
///

requireLibs libcee
requireLibs unittest

var int counter 0

func bool increaseAndRet(bool result):
  counter = counter + 1
  ret result
end

unittest:testCase DefineVar:
  x := 10
  y := 1.0
  unittest:assertAll:
    x == 10
    y ==_f 1.0
  end
end

struct Point:
  int x
  int y
end

ofunc void print(Point pt):
  print "Point(x = " pt.x ", y = " pt.y ")"
end

// TODO: check what should happen to this.
// unittest:testCase SimpleArray:
//   var int[4] numbers
// 
//   numbers[0] = 400
//   numbers[1] = 401
//   numbers[2] = 402
//   numbers[3] = 403
// 
//   unittest:assertAll:
//     numbers[0] = 400
//     numbers[1] = 401
//     numbers[2] = 402
//     numbers[3] = 403
//   end
// end

struct TestStruct:
  int x
  float y
  int* tenints
  TestStruct* next
  Point pt
end

unittest:testCase DotOp:
  p := malloc TestStruct
  p.x = 23
  p.y = 7.3

  p.tenints = malloc int 10

  // TODO: this is not really handled by op.
  for i 0 10:
    p.tenints[i] = i + 1
  end
  
  // p.next = malloc TestStruct
  // p.next.x = 99
  
  p.pt.x = 3
  p.pt.y = 7
  
  unittest:assertAll:
    p.x == 23
    p.y ==_f 7.3
    p.tenints[0] == 1
    p.tenints[1] == 2
    p.tenints[2] == 3
    p.tenints[3] == 4
    p.tenints[4] == 5
    p.tenints[5] == 6
    p.tenints[6] == 7
    p.tenints[7] == 8
    p.tenints[8] == 9
    p.tenints[9] == 10
    // p.next.x == 99
    p.pt.x == 3
    p.pt.y == 7
  end
end

struct IntList:
  int value
  IntList* next
end

unittest:testCase tmp:
  last := IntList(value = 2, next = nullptr IntList)
  first := IntList(value = 1, next = &last)

  unittest:assertAll:
    first.value == 1
    first*.value == 1
    // TODO
    // first*.next*.value == 2
  end
end

unittest:testCase DotOpDeref:
  var TestStruct t
  t.next = &t
  var int* ints malloc(int, 10)
  t.tenints = ints

  unittest:assertAll:
    t.tenints == ints
    t.tenints* == ints*
    // TODO the next two lines don't parse
    // t.*t.*tenints = *ints
    // t.*t.tenints* == ints*
    *t.tenints == *ints
  end
end

struct IntArrays:
  int size
  int* a
  Point* points
end

func void IntArrays:init(IntArrays* this, int size):
  this.size = size
  this.a = malloc int size
  this.points = malloc Point size
end

func void IntArrays:delete(IntArrays* this):
  dealloc this.a
  dealloc this.points
  dealloc this
end

unittest:testCase DotArray:
  size := 4
  arr := new IntArrays size

  for i 0 size:
    arr.a[i] = i + 1
    arr.points[i].x = i * 2
    arr.points[i].y = 1 - i
  end

  unittest:assertAll:
    arr.a[0] == 1
    arr.a[1] == 2
    arr.a[2] == 3
    arr.a[3] == 4
    arr.points[0].x == 0
    arr.points[0].y == 1
    arr.points[1].x == 2
    arr.points[1].y == 0
    arr.points[2].x == 4
    arr.points[2].y == -1
    arr.points[3].x == 6
    arr.points[3].y == -2

    arr.points[1+2].x == 6
  end

  IntArrays:delete arr
end

unittest:testCase ArrayDot:
  size := 3
  points := malloc Point 3

  for i 0 size:
    points[i].x = i
    points[i].y = size - i
  end

  unittest:assertAll:
    points[0].x == 0
    points[0].y == 3
    points[1].x == 1
    points[1].y == 2
    points[2].x == 2
    points[2].y == 1
  end

  dealloc points
end

template postop* ptr:
  load #ptr
end

struct NestedStruct:
  Point valuePoint
  Point* pointerPoint
end

ofunc void print(NestedStruct s):
  print "NestedStruct(valuePoint = " s.valuePoint ", "
  print "pointerPoint = "
  if isNull(s.pointerPoint):
    "nullptr"
  else:
    print "&" (s.pointerPoint)*
  end
  print ")"
end

unittest:testCase NestedStruct:
  var NestedStruct nested
  nested.valuePoint.x = 10
  nested.valuePoint.y = 20
  nested.pointerPoint = malloc Point
  (nested.pointerPoint)*.x = 11
  nested.pointerPoint*.y = 22

  unittest:assertAll:
    nested.valuePoint.x == 10
    nested.valuePoint.y == 20
    (nested.pointerPoint)*.x == 11
    nested.pointerPoint*.y == 22
  end
end

// - pointers
//   - simple arithmetic
//   - take address of global var, local var, parameter, struct member
//   - casting (maybe)
//   - dereferencing simple ptr, ptr in struct, ptr in array
// - test stack allocation, check inside loops
// - heap allocation
// - arrays
//   - allocate on stack, heap
//   - [] notation to access
//   - assignment
//   - array of pointers, pointer to array, array of struct

unittest:testCase ArrayPtrDot:
  size := 3
  points := malloc Point* size
  for i 0 size:
    store (points + i) malloc(Point)

    // TODO
    // (points + i)**.x = i * i
    // (*(points + i))*.y = 10 * i
    setField load(ptradd points i) x (i * i)
    setField load(ptradd points i) y (10*i)
  end

  unittest:assertAll:
    size == 3 // catch resizing without updating test code
    getField(load load(points), x) == 0
    (*(points + 0))*.x == 0
    (points+0)**.x == 0
    (*(points + 0))*.y == 0
    (*(points + 1))*.x == 1
    (*(points + 1))*.y == 10
    (*(points + 2))*.x == 4
    (*(points + 2))*.y == 20
  end

  for i2 0 size:
    dealloc *(points + i2)
  end
  dealloc points
end

unittest:testCase SimplePointer:
  local := 10

  unittest:assertAll:
    &local ==_ptr local&
    local&* == 10
    *&local == 10
  end
end

unittest:testCase PointerArithmetic_int:
  size := 7
  nums := malloc int size
  onReturn dealloc(nums)
  numsEnd := nums + size

  unittest:assertAll:
    numsEnd - size == nums
    numsEnd - nums == size
    numsEnd > nums
  end
end

unittest:testCase PointerArithmetic_char:
  size := 10
  chars := malloc char size
  onReturn dealloc(chars)
  charsEnd := chars + size

  unittest:assertAll:
    charsEnd - size == chars
    charsEnd - chars == size
    charsEnd > chars
  end
end

template toSize_t value:
  cast size_t #value
end

unittest:testCase sizeof:
  unittest:assertAll:
    sizeof u8 == toSize_t 1
    sizeof u16 == toSize_t 2
    sizeof u32 == toSize_t 4
    sizeof u64 == toSize_t 8

    sizeof float == toSize_t 4
    sizeof double == toSize_t 8
    sizeof bool == toSize_t 1
    sizeof char == toSize_t 1

    sizeof u8[2] == toSize_t 2
    sizeof u32[4] == toSize_t(4 * 4)
  end
end

unittest:testCase Semicolon:
  sum := 0
  sum = sum + 999; sum = 0; sum = sum + 1; sum = sum + 2
  unittest:assert (sum == 3)
end

unittest:testCase For:
  sum := 0

  for x 0 10:
    sum = sum + x
  end

  unittest:assert (sum == 45)
end

unittest:testCase NestedFor:
  sum := 0

  for i 0 10:
    for j 4 7:
      sum = sum + 1
    end
  end

  unittest:assertAll:
    sum == 30
  end
end

func int getValFromSwitch(int x):
  switch (10+x):
    void
  case 10:
    ret 1
  case 12:
    ret 2
  end

  ret 123
end

unittest:testCase Switch:
  unittest:assertAll:
    getValFromSwitch 0 == 1
    getValFromSwitch 2 == 2
    getValFromSwitch 99 == 123
  end
end

unittest:testCase LazyOps:
  template expectCount num code:
    unittest:assert:
      counter = 0
      #code
      counter == #num
    end
  end

  expectCount 1 (increaseAndRet false && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet true)
  expectCount 2 (increaseAndRet true && increaseAndRet false)
  expectCount 1 (increaseAndRet true || increaseAndRet false)
  expectCount 2 (increaseAndRet false || increaseAndRet true)
end

unittest:testCase Assign:
  floatp := malloc float 2
  onReturn dealloc(floatp)

  floatp* = 1.0
  (ptradd floatp 1)* = 10.0
  unittest:assertAll:
    floatp* ==_f 1.0
    load (ptradd floatp 1) ==_f 10.0
  end
end

unittest:testCase AssignArray:
  values := malloc int 2
  onReturn dealloc(values)

  values[0] = 10
  values[2-1] = 100

  unittest:assertAll:
    values* == 10
    (values+1)* == 100
  end
end

unittest:testCase IncrementDecrement:
  one := 1
  two := 2
  three := 3
  four := 4
  
  unittest:assertAll:
    one++ == 1
    ++two == 3
    three-- == 3
    ++four == 5
  end
end

unittest:testCase OverloadedFuncs:
  onefString := toCString(1.0)
  unless (strncmp(onefString, "1.0", cast size_t 3) == 0):
    println "Assertion failed"
    printHLine '-' 40
    println "left = " onefString
    println "right = " "1.0*"
    printHLine '-' 40
  end

  fivedString := toCString(5.0d)
  unless (strncmp(fivedString, "5.0", cast size_t 3) == 0):
    println "Assertion failed"
    printHLine '-' 40
    println "left = " fivedString
    println "right = " "5.0*"
    printHLine '-' 40
  end

  unittest:assertAll:
    toCString 10 ==_str "10"
    toCString 'x' ==_str "x"
    toCString true ==_str "true"
    toCString false ==_str "false"
    toCString "foo" ==_str "foo"
  end

  unittest:assertAll:
    toInt 10 == 10
    toInt 4.0 == 4
    toInt 8.0d == 8
    toInt true == 1
    toInt false == 0
    toInt 'a' == 97
  end

  unittest:assertAll:
    toFloat 16 == 16.0
    toFloat 1.0 == 1.0
    toFloat 2.0d == 2.0
    toFloat true == 1.0
    toFloat false == 0.0
    // not supported:
    // toFloat 'a' == 40.0
  end

  unittest:assertAll:
    toDouble 64 == 64.0d
    toDouble 10.0 == 10.0d
    toDouble 7.0d == 7.0d
    toDouble true == 1.0d
    toDouble false == 0.0d
  end

  unittest:assertAll:
    toChar 66 == 'B'
    // not supported: bool, float, double
  end
end

unittest:testCase OverloadedOps:
  min10 := -10

  unittest:assertAll:
    true == true
    true != false
    false != true
    false == false
    10 == 10
    11 != 20
    -10 == -10
    -min10 == 10
  end
end

unittest:testCase MakeStructVar:
  p := structlit Point x 10 y 30

  unittest:assertAll:
    p.x == 10
    p.y == 30
  end
end

ofunc Point op+(Point l, Point r):
  ret (structlit Point x (l.x+r.x) y (l.y+r.y))
end

ofunc bool op==(Point l, Point r):
  ret ((l.x == r.x) && (l.y == r.y))
end

func Point pt(int x, int y):
  ret (structlit Point x x y y)
end

/// not supported, yet
// ofunc void foo(Point* p)
//   print *p
// end

// unittest:testCase DefineOverloadedFunc
//   unittest:assertAll
//     pt 3 4 + pt 12 24 == pt 15 28
//   end
// end

func int onReturn_simple():
  result := 4
  onReturn ++result
  return result
end

func int onReturn_simple2():
  x := 4
  onReturn ++x
  return x
end

func int onReturn_multiReturn(bool first):
  result := 4
  onReturn ++result
  if first:
    return result
  end

  ++result
  return result
end

/// this should fail because onReturn is used in a non-cee function
// std:base:func int onReturn_fail_onReturn_in_non_cee_func()
//   onReturn (println "xxx")
//   return 10
// end

/// this should faile because function contains onReturn statements but it is
/// left using ret instead of return
// func int onReturn_fail_used_ret_and_onReturn()
//   onReturn (println "xxx")
//   ret 10
// end

unittest:testCase test_onReturn:
  unittest:assertAll:
    onReturn_simple() == 5
    onReturn_simple2() == 5
    onReturn_multiReturn true == 5
    onReturn_multiReturn false == 6
  end
end

func void return_void():
  // should default to 'return void'
  return
end

// TODO: reactivate once keyword syntax is back
// unittest:testCase test_keyword_if:
//   test_if := 0
//   test_unless := 0
// 
//   test_if = 10 if: true == true
//   test_unless = 20 unless: true == false
// 
//   unittest:assertAll:
//     test_if == 10
//     test_unless == 20
//   end
// end

/// TODO
// func void testBitOps():
//   unittest:assertAll:
//     true & false == false
//     true & true == true
//     true | false == true
//     false | false == false
//     true ^ false == true
//     true ^ true == false
// 
//     15 & 7 == 7
//     7 | 16 == 23
//   end
// end

unittest:main

