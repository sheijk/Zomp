/**
 * Check whether a macro can call a function defined right before in in the
 * same module
!syntax indent
 */

// func char* char:toCString(char c)
//   str := "X"
//   store (cast char* str) c
//   ret str
// end
// 
// macro hello name
//   var cstring quoteStr char:toCString('"') // " <- emacs font-lock sucks.
//   var msg (cstring:concat quoteStr "Hello, " getField(name,id) quoteStr)
//   ret ${printlnString msg}
// end

func int foo()
  ret 123
end

// func char bar()
//   ret 'x'
// end
// 
// func char* baz()
//   ret "bazzup?"
// end
// 
// func char* char:toCString(char c)
//   ret "fu"
// end

macro hello name
  printInt foo()
  println()
  // printChar bar()
  // println()
  // printlnString baz()
  // printlnString char:toCString('x')
  var int num foo()
  ret ${printlnInt #num}
end

func int main()
  hello foo
  ret 0
end

