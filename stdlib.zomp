
/// external (C) functions ----------------------------------------

(func void printInt ((int i)))
(func void printString (((ptr char) s)))
(func void printFloat ((float f)))
(func void printChar ((char c)))
(func void printNewline ())

(func (ptr char) int2cstring ((int i)))

// (func void zompLoadLib ((string libname)))
// (func bool zompCheckNativeSymbol ((string libname)))

(func void stdlibHello ())
(func void zompHello ())

/// utility functions ----------------------------------------

(func void printBool ((bool b)) (
  (branch b true false)
  
  (label true)
  (printChar 't')
//   (printString trueString)
  (printNewline)
  (branch end)
  
  (label false)
  (printChar 'f')
//   (printString falseString)
  (printNewline)

  (label end)
  ))

(macro funcln name type code
  (func void name ((type v)) (
    code
    (printNewline)
    ))
  )

(func void println () ((printNewline)))

(funcln printlnInt int (printInt v))
(funcln printlnString (ptr char) (printString v))


(macro getField record componentName (
  (load (fieldptr record componentName))
  ))

(macro setField record componentName value (
  (store (fieldptr record componentName) value)
  ))
  
/// string functions ----------------------------------------

(type cstring (ptr char))

(type string
  (int length)
  ((ptr char) chars)
  )
(type pstring (ptr string))

(func int length ((cstring s)) (
  (var (ptr char) ptr s)
  (var int count -1)

  (label start)
  (var char c (load ptr))

  (assign ptr (ptradd ptr 1))
  (assign count (int.add count 1))
  (var bool b (char.equal c '\0'))
  (branch b end start)
  
  (label end)
  
  (ret count)
  ))

(func (ptr string) makestring ((cstring cstr)) (
  (var (ptr string) pstr (malloc string))
  (store (fieldptr pstr length) (length cstr))
  (store (fieldptr pstr chars) cstr)
  (ret pstr)
  ))

(func (ptr string) newString ((int length) (char init)) (
  (var (ptr char) chars (malloc char (int.add 1 length)))
  (store (ptradd chars length) '\0')
  (var int index 0)
  (label start)
  (store (ptradd chars index) init)
  (assign index (int.add index 1))
  (var bool reachedEnd (int.ugreaterEqual index length))
  (branch reachedEnd end start)
  (label end)
  
  (var (ptr string) result (malloc string))
  (store (fieldptr result length) length)
  (store (fieldptr result chars) chars)
  (ret result)
  ))

(func (ptr string) append (((ptr string) l) ((ptr string) r)) (
  (var int length (int.add (getField l length) (getField r length)))
  (var (ptr string) result (newString length 'x'))
  (var (ptr char) chars (getField result chars))
  (var (ptr char) leftChars (getField l chars))
  (var int leftLength (getField l length))
  (var (ptr char) rightChars (getField r chars))
  (var int rightLength (getField r length))

  (var int index 0)
  
  (label lbegin)
  (store (ptradd chars index) (load (ptradd leftChars index)))
  (assign index (int.add index 1))
  (var bool test (int.uless index leftLength))
  (branch test lbegin lend)
  (label lend)

  (assign index 0)
  (label rbegin)
  (store (ptradd chars (int.add leftLength index)) (load (ptradd rightChars index)))
  (assign index (int.add index 1))
  (var bool test2 (int.uless index rightLength))
  (branch test2 rbegin rend)
  (label rend)
  
  (ret result)
  ))


/// print 2*count spaces
(func void printIndent ((int count)) (
  (var int counter count)
  (label start)
  (var bool t (int.ugreater counter 0))
  (branch t goon end)
  (label goon)
  (printChar ' ') (printChar ' ')
  (assign counter (int.sub counter 1))
  (branch start)
  (label end)
  ))
  
/// ast ----------------------------------------

(type ast
  (cstring id)
  (int childCount)
  ((ptr (ptr ast)) childs) )

(func (ptr ast) simpleAst ((cstring name)) (
  (var (ptr ast) a (malloc ast))

  (store (fieldptr a id) name)
  (store (fieldptr a childCount) 0)
  (store (fieldptr a childs) (nullptr (ptr ast)))
  
  (ret a)

  ))

(func (ptr ast) astFromString ((cstring name)) (
  (simpleAst name) ))

(func (ptr ast) seqAst () (
  (astFromString "seq") ))

(func (ptr ast) astFromInt ((int i)) (
  (var cstring asString (int2cstring i))
  (simpleAst asString) ))

(func void printAst (((ptr ast) a) (int indent)) (
  (printIndent indent)
  (printString (load (fieldptr a id)))
  (printString " [")
  (printInt (getField a childCount))
  (printString " childs]")
  (println)

  (var int index 0)
  (label start)
  (var bool t (int.uless index (getField a childCount)))
  (branch t goon end)
  (label goon)
  (var (ptr ast) child (load (ptradd (getField a childs) index)))
  (printAst child (int.add indent 1))
  (assign index (int.add index 1))
  (branch start)
  (label end)
  ))


(func void addChild ( ((ptr ast) tree) ((ptr ast) child) ) (
  (var int oldChildCount (getField tree childCount))
  (var int newChildCount (int.add 1 oldChildCount))
  (var (ptr (ptr ast)) newChilds (malloc (ptr ast) newChildCount))

  (var int index 0)
  (label start)
  (var bool t (int.uless index oldChildCount))
  (branch t goon end)
  (label goon)
  (store (ptradd newChilds index) (load (ptradd (getField tree childs) index)))
  (assign index (int.add index 1))
  (branch start)
  (label end)

  (store (ptradd newChilds oldChildCount) child)

  (setField tree childs newChilds)
  (setField tree childCount newChildCount)
  ))

/// macro support ----------------------------------------

(func cstring macroAstId ((int macroCurrentAst)) (
  (getField (cast (ptr ast) macroCurrentAst) id) ))

(func int macroAstChildCount ((int macroCurrentAst)) (
  (getField (cast (ptr ast) macroCurrentAst) childCount) ))

(func int macroAstChild ((int treeaddr) (int num)) (
  (var (ptr ast) tree (cast (ptr ast) treeaddr))
  (var (ptr ast) child (load (ptradd (getField tree childs) num)))
  (var int i (cast int child))
  (ret i)
  ))

(type astp (ptr ast))

(func astp testMacro2 ((astp lastArg)) (
  (ret `(native (nested tree) (with (args a b c #lastArg))))
  ))

(func int macroExec () (
  (var astp tree (testMacro2 `(foo bar)))
  (var int i (cast int tree))
  (ret i)
  ))

(func astp macroTest () (
  (ret `(macro test))
  ))

(var int lastid 0)

(func int newUniqueId () (
  (assign lastid (int.add lastid 1))
  (ret lastid) ))

(func cstring appendCStrings ((cstring l) (cstring r)) (
  (var (ptr string) lstr (makestring l))
  (var (ptr string) rstr (makestring r))
  (var (ptr string) appended (append lstr rstr))
  (ret (getField appended chars))
  ))
  
(func cstring newUniqueName () (
  (var int id (newUniqueId))
  (var cstring numstr (int2cstring id))
  (ret (appendCStrings "_tmp_" numstr)) ))

(func cstring newUniqueNameFor ((cstring purpose)) (
  (var cstring name (newUniqueName))
  (ret (appendCStrings (appendCStrings name "_") purpose)) ))

(xmacro xmacrotst (
  (ret `(3))
//   (printlnString "Applying macro xmacrotst")
//   (ret `(printlnString "Running code"))
  ))
(xmacro ymacrotst (
  (ret `(printInt 999))
  ))
  
(xmacro uniqueId name purpose (
  (ret `(var cstring #name (newUniqueNameFor #purpose)))
  ))

(xmacro foo (
  (var cstring xxx (newUniqueNameFor "ss"))
  (uniqueId foo "foo")
  (uniqueId bar "bar")
  (ret `(xxx))
  ))

(xmacro if test onTrue onFalse (
  (uniqueId trueLabel "iftrue")
  (uniqueId falseLabel "iffalse")
  (uniqueId endLabel "ifend")
  (uniqueId testResult "iftestresult")
  
  (var (ptr ast) result `(
    (var bool #testResult #test)
    (branch #testResult #trueLabel #falseLabel)
    (label #trueLabel)
    #onTrue
    (branch #endLabel)
    (label #falseLabel)
    #onFalse
    (label #endLabel)
    ))
  (ret result)
  ))

(xmacro for index min max code (
  (uniqueId startLabel "for_start")
  (uniqueId endLabel "for_exit")
  (uniqueId testResult "for_testvar")
  (uniqueId execLabel "for_body")

  (ret `(
    (var int #index #min)
    (label #startLabel)
    (var bool #testResult (int.sless #index #max))
    (branch #testResult #execLabel #endLabel)
    (label #execLabel)
    #code
    (assign #index (int.add #index 1))
    (branch #startLabel)
    (label #endLabel)
    ))
  ))

(xmacro while test body (
  (uniqueId begin "while_begin")
  (uniqueId exit "while_exit")
  (uniqueId goon "while_body")
  (uniqueId testVar "while_testvar")
  
  (ret `(
    (label #begin)
    (var bool #testVar (#test))
    (branch #testVar #goon #exit)
    (label #goon)
    #body
    (branch #begin)
    (label #exit)
    ))
  ))

/// workaround until "const" is properly supported
(xmacro const type name default (
  (ret `(var #type #name #default)) ))

/// quickly define a test function to be run with C-c,t in emacs
(macro testf impl
  (func void test () (impl)) )

(func int main ())

/// default test function
(testf (
  (const int retval (main))
  (println)
  (printString "main() returned ") (printlnInt retval)
  ))
  
/*

!load libglfw.dylib dlltest.dylib

(func void test () (
  (println)
  (if (int.uless 2 4)
    (printlnString "yippieh!")
    (printlnString "wtf?")
    )
  ))

(xmacro inline3 code (
  (var (ptr ast) tree (simpleAst "seq"))
  (printlnString "Warning: you suck!")
  (addChild tree code)
  (addChild tree code)
  (addChild tree code)
  (ret `(
    (printlnString "doing it three times!")
    #tree ))
  ))

(var cstring yippieh "yippieh!")
  
(xmacro txmacro2 arg
  (insert xmacro #arg) )

(xmacro txmacro3 arg0 arg1
  (foo bar #arg0 #arg1) )
*/

/*
(func int testast2 () (
  (var (ptr ast) tree `(this is a (simple ast) (for testing purposes)))
  (ret (cast int tree))
  ))

(func void test () (
  (var int t (testast2))
  
  (println)
  (printString (macroAstId t)) (printInt (macroAstChildCount t)) (println)
  (printlnString (macroAstId (macroAstChild t 2)))
))
*/

