///
/// Example demonstrating the use of the assimp library to load 3d scenes
///

requireLibs opengl20
requireLibs glfw glutils libcee
requireLibs math
requireLibs mathvis
requireLibs mesh
requireLibs assimp

/// no hard aborts on assertion errors, please :) + print better messages
macro assert testCode:
  isCompare := false
  printF := ast:fromString "internalErrorIn unittest:assert"
  compareF := ast:fromString "internalErrorIn unittest:assert"

  if ast:matchesShape(testCode, ${__ ==_f __}):
    isCompare = true
    printF = ast:fromString "print"
    compareF = ast:fromString "op==_f"
  elseif ast:matchesShape(testCode, ${__ == __}):
    isCompare = true
    printF = ast:fromString "print"
    compareF = ast:fromString "op=="
  end

  if isCompare:
    uniqueId lvar "lvar"
    uniqueId rvar "rvar"
    l := ast:child(testCode, 0)
    r := ast:child(testCode, 1)
    ret $:
      #lvar := #l
      #rvar := #r
      unless (#compareF #lvar #rvar):
        printHLine '-' 40
        print "Assertion failed\n"
        print "left = "
        #printF #lvar
        println()
        print "right = "
        #printF #rvar
        println()
        ast:print ${#testCode} 0
      end
    end
  else:
    ret $:
      unless #testCode:
        printHLine '-' 40
        printlnString "Assertion failed"
        ast:print ${#testCode} 0
      end
    end
  end

  ret ${}
end

//------------------------------------------------------------------------------
// OpenGL utils

func void float3:glVertex(float3* this):
  glVertex3f this.x this.y this.z
end

func void float3:sendLine(float3* start, float3* end):
  float3:glVertex start
  float3:glVertex end
end

///-----------------------------------------------------------------------------
/// Section: Application
///-----------------------------------------------------------------------------

var int windowWidth 400
var int windowHeight 300
var bool initCalled false

var AppInfo* app nullptr(AppInfo)

var bool firstRun true

func int objShader():
  varyingSource := "
  varying vec3 normal;
  "
  vertexSource := "
  void main(void) {
    gl_Position = ftransform();
    // normal = gl_NormalMatrix * gl_Normal;
    normal = gl_Normal;
    }"
  fragmentSource := "
  void main(void) {
    // float brightness = normal.z * 0.5 + 0.5;
    // gl_FragColor = vec4(0.0,1.0,0.0,1.0) * brightness;
    gl_FragColor = vec4(normalize(normal)*0.5 + vec3(0.5), 1.0);
    }"
  shader := createShader varyingSource vertexSource fragmentSource
  assert (shader != 0)
  ret shader
end

macro measureAndReport actionDescr code:
  uniqueId startTime "measureAndReport"
  uniqueId stopTime "measureAndReport"

  ret $:
    #startTime := glfwGetTime()
    #code
    #stopTime := glfwGetTime()
    printString #actionDescr
    printString " took "
    printDouble (#stopTime -_d #startTime)
    printChar 's'
    println()
  end
end

func int main():
  init app:
    app*.windowWidth = 400
    app*.windowHeight = 300
    app*.fsaaSamples = 4
  end

  angle := 0.0

  // sceneFilename := "data/assimp/OBJ/rifle.obj"
  sceneFilename := "data/ModernStructure.3ds"
  // sceneFilename := "data/MonroeBar_SketchUpScene.obj"
  loadOptions := ((aiProcess_Triangulate | aiProcess_SortByPType) | aiProcess_GenNormals) | aiProcess_PreTransformVertices

  measureAndReport "Loading scene":
    scene := aiImportFile sceneFilename loadOptions
  end

  if (scene == nullptr(aiScene)):
    printString "Error while loading file: "
    printlnString aiGetErrorString()
    return 0
  end

  if (scene.mNumMeshes <= 2):
    printString "Loaded "
    aiScene:print scene
    flushStdout()
  end

  measureAndReport "Converting to mesh":
    mesh := aiScene:toMesh scene
  end
  aiReleaseImport scene
  if isNull(mesh):
    printlnString "Generated mesh is null"
    return 0
  end

  Mesh:swapComponents mesh 2 1

  var AABB meshBB
  Mesh:calcAABB &meshBB mesh

  var v3f bbdiag
  AABB:diagonal &bbdiag &meshBB
  meshSize := v3f:length bbdiag

  AABB:print &meshBB
  println()
  print "meshSize = " meshSize
  println()

  if (mesh*.streams*.size < 40):
    Mesh:printDetailed mesh
  else:
    Mesh:print mesh 0
  end

  maxRunTime := 2.0

  if firstRun:
    firstRun = false
    maxRunTime = 0.0
  end

  material := objShader()

  glEnable GL_DEPTH_TEST
  glDepthFunc GL_LEQUAL

  mainloop:
    angle = angle + 90.0 * frameDuration

    glClearColor 0. 0. 0. 0.
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    autoSetupViewport()
    glMatrixMode GL_PROJECTION
    glLoadIdentity()
    aspect := int:toDouble windowWidth /_d int:toDouble windowHeight
    gluPerspective 90.0d aspect 1.0d (1.5d *_d float:toDouble meshSize)

    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
    glTranslatef 0. (meshSize * -0.1) (-0.8 * meshSize)
    glRotatef angle 0. 1. 0.

    drawOrientationGrid()
    glColor4f 1. 0.5 0.0 1.0
    glUseProgram material
    Mesh:render mesh GL_TRIANGLES material
    glUseProgram 0
    AABB:render &meshBB
  end

  drawPausedOverlay()
  glfwSwapBuffers()

  glDeleteProgram material

  return 0
end



