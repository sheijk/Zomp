/**
 * Experimental test bed of the cee language profile
 *
!verify off
!syntax indent
 */

//------------------------------------------------------------------------------
/// base lib

include "libs/libcee.zomp"

// TODO
// macro dowhile block condition
//   ret ${
//     label #start
//     var bool #testVar #condition
//     branch #testVar #start
//     label #exit
//   end}
// end

func bool isBound(char* name)

type symbolKind int
const symbolKind ZOMP_SYMBOL_UNDEFINED 0
const symbolKind ZOMP_SYMBOL_VAR 1
const symbolKind ZOMP_SYMBOL_FUNC 2
const symbolKind ZOMP_SYMBOL_MACRO 3
const symbolKind ZOMP_SYMBOL_TYPEDEF 4
const symbolKind ZOMP_SYMBOL_LABEL 5

func char* symbolKind:toString(symbolKind kind)
  if2 (kind == ZOMP_SYMBOL_UNDEFINED) then
    ret "Undefined"
  elseif (kind == ZOMP_SYMBOL_VAR)
    ret "Variable"
  elseif (kind == ZOMP_SYMBOL_FUNC)
    ret "Function"
  elseif (kind == ZOMP_SYMBOL_MACRO)
    ret "Macro"
  elseif (kind == ZOMP_SYMBOL_TYPEDEF)
    ret "Type"
  elseif (kind == ZOMP_SYMBOL_LABEL)
    ret "Label"
  end

  ret "internal error"
end

func symbolKind zompLookup(char* name)

// template op== l r
//   cstring:equal #l #r
// end

func bool dummy(bool x)
  printString "Returning "
  printBool x
  println()

  ret x
end

// func void test()
//   printlnString "(&&) Expect: f"
//   dummy(false) && dummy(true)
// 
//   printlnString "(&&) Expect: t,f"
//   dummy(true) && dummy(false)
// 
//   printlnString "(||) Expect f,t"
//   dummy(false) || dummy(true)
// 
//   printlnString "(||) Expect t"
//   dummy(true) || dummy(false)
// 
//   ret void
// end

// template op; expr1 expr2
//   #expr1
//   #expr2
// end

//------------------------------------------------------------------------------
/// Standard library

type Complex
  float real
  float img
end

func void Complex:print(Complex* c)
  printString "("
  printFloat c.real
  printString ", "
  printFloat c.img
  printString "i)"
end

func void Complex:init(Complex* c, float real, float img)
  c.real = real
  c.img = img
end

// macro v2 args...
//   printlnString "Given AST:"
//   ast:print args 2
// 
//   ret ${}
// end

include "libs/stdio.zomp"

// macro defineArrayType type
//   arrayTypeName := "Array_" ++ type.id
// 
//   code := ${
//     type #arrayTypeName
//       int length
//       #type* elements
//     end
//   end}
// 
//   ast:print code 0
// 
//   ret ${}
// end
// 
// defineArrayType int

// func char* readFile(char* fileName)
//   file := fopen(fileName, "r")
// 
//   if2 file ==_ptr nullptr(int) then
//     return nullptr(char)
//   end
// 
//   buffer := ""
//   
// end


// macro alias newName toName
//   if2 isBound(getField(newName, id)) then
//     printString "Redefining "
//     printString newName.id
//     printString " => "
//     printString toName.id
//     println()
//
//     ret ${}
//   else
//     ret ${error #toName is not defined}
//   end
// end

func void test2()
  var int x 10

  template printDefinitionInfo name
    printString #name
    printString " defined: "
    printBool isBound(#name)
    println()
  end

  printDefinitionInfo "gipsdochganich"
  printDefinitionInfo "x"

  printlnString symbolKind:toString(zompLookup("x"))
end


// func void test()
//   std:base:localVar x 20
//   printInt x
// end
//
// func void test()
//   foo := nullptr(int)
// end

//------------------------------------------------------------------------------
/// program

/// operator ; will need to get a different priority
// macro cee:for loopExpr code
//   ast:print loopExpr 0
//   ${printlnString "no loops for you, bitch"}
// end

// /**
//  * foo bar
//  */
// func void test()
//   // cee:for(int i = 0; i < 10; ++i)
//   //   printString "i = "
//   //   printlnInt i
//   // end
// 
//   c := new(Complex, 1.0, 10.0)
//   Complex:print c
//   println()
//
//
// end

func int main()

  ret 0
end



