/**
 * Experimental test bed of the cee language profile
 *
!verify off
 */
!syntax indent

//------------------------------------------------------------------------------
/// base lib

template macro:failUnless cond
  unless #{cond}
    ret ${error expression is false #{cond}}
  end
end

macro uniqueIds purpose ids...
  var ast* code ${seq}

  forEachAstChild child ids
    addChild code ${uniqueIds #child #purpose}
  end

  ret code
end

/// if statement
///
/// Usage example:
/// 
/// if a > 10 then
///   print "It's bigger!"
/// else if a < 5 then
///   print "It's smaller!"
/// else
///   print "Neither to big nor to small. Purrfect"
/// end
macro if2 cond then onTrue remArgs...
  println()

  macro:failUnless cstring:equal(getField(then, id), "then")

  uniqueId endLabel "if_end"

  var astp code ${seq}

  addChild code ${when #cond
    #onTrue
    branch #endLabel
  end}

  var int currentArg 0
  const int argCount getField(remArgs, childCount)

  while currentArg+3 <= argCount
    var astp econd ast:child(remArgs, currentArg+1)
    var astp eexpr ast:child(remArgs, currentArg+2)

    addChild code ${seq
      when #econd
        #eexpr
        branch #endLabel
      end
    end}

    currentArg = currentArg + 3
  end

  when currentArg+1 < argCount
    var astp elseCode ast:child(remArgs, currentArg+1)

    addChild code elseCode
  end

  addChild code ${label #endLabel}

  ret code
end

template op. record component
  getField(#record, #component)
end

macro op= l r
  if2 ast:matchesShape(l, ${_._}) then
    var ast* component ast:child(l, 0)
    var ast* field ast:child(l, 1)
    ret ${setField #component #field #r}
  else
    ret ${assign #l #r}
  end

  ret ${internal error}
end

template op:= name value
  var2 #name #value
end

/// Allocate storage and initialize variable
/// `new Foo a b c' does the same as `var Foo* this (malloc Foo); Foo:init(this,a,b,c); this'
macro new type args...
  uniqueId name "new"

  var ast* initCall astFromString(cstring:concat(getField(type, id), ":init"))
  addChild initCall astFromString(name)
  forEachAstChild arg args
    addChild initCall arg
  end

  var ast* code ${seq}
  addChild code ${var (ptr #type) #name (malloc #type)}
  addChild code initCall
  addChild code astFromString(name)

  ret code
end

template return v
  ret #v
end

template op; expr1 expr2
  #expr1
  #expr2
end

//------------------------------------------------------------------------------
/// Standard library

template op++ lstring rstring 
  cstrings:append #lstring #rstring
end


type Complex
  float real
  float img
end

func void Complex:print(Complex* c)
  printString "("
  printFloat c.real
  printString ", "
  printFloat c.img
  printString "i)"
end

func void Complex:init(Complex* c, float real, float img)
  c.real = real
  c.img = img
end

//------------------------------------------------------------------------------
/// program

// macro for2 loopExpr code
//   if2 ast:matchesShape(loopExpr, ${op; 
// end
  // for2(int i = 0; i < 10; ++i)
  //   printString "i = "
  //   printlnInt i
  // end

func void test()
  c := new(Complex, 1.0, 0.0)
  Complex:print c; println()
end

func int main()
  
  ret 0
end


