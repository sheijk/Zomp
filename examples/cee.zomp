/**
 * Experimental test bed of the cee language profile
 *
!verify off
 */
!syntax indent

//------------------------------------------------------------------------------
/// base lib

template macro:failUnless cond
  unless #{cond}
    ret ${error expression is false #{cond}}
  end
end

macro uniqueIds purpose ids...
  var ast* code ${seq}

  forEachAstChild child ids
    addChild code ${uniqueIds #child #purpose}
  end

  ret code
end

/// if statement
///
/// Usage example:
/// 
/// if a > 10 then
///   print "It's bigger!"
/// else if a < 5 then
///   print "It's smaller!"
/// else
///   print "Neither to big nor to small. Purrfect"
/// end
macro if2 cond then onTrue remArgs...
  println()

  macro:failUnless cstring:equal(getField(then, id), "then")

  uniqueId endLabel "if_end"

  var astp code ${seq}

  addChild code ${when #cond
    #onTrue
    branch #endLabel
  end}

  var int currentArg 0
  const int argCount getField(remArgs, childCount)

  while currentArg+3 <= argCount
    var astp econd ast:child(remArgs, currentArg+1)
    var astp eexpr ast:child(remArgs, currentArg+2)

    addChild code ${seq
      when #econd
        #eexpr
        branch #endLabel
      end
    end}

    currentArg = currentArg + 3
  end

  when currentArg+1 < argCount
    var astp elseCode ast:child(remArgs, currentArg+1)

    addChild code elseCode
  end

  addChild code ${label #endLabel}

  ret code
end

template op. record component
  getField(#record, #component)
end

template return v
  ret #v
end

//------------------------------------------------------------------------------
/// Standard library

type Complex
  float real
  float img
end

func void Complex:print(Complex* c)
  printString "("
  printFloat c.real
  printString ", "
  printFloat c.img
  printString "i)"
end

macro op= l r
  if2 ast:matchesShape(l, ${_._}) then
    mret ${assigning foo}
  else
    mret ${assign #l #r}
  end

  mret ${internal error}
end

func void test()
  var int i 10
  i = 20
  i.blah = 30
  printlnInt i
end

func Complex* Complex:new(float real, float img)
  var Complex* c malloc(Complex)

  return c
end

func int main()
  
  ret 0
end


