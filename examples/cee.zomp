/**
 * Experimental test bed of the cee language profile
 *
!verify off
!syntax indent
 */

//------------------------------------------------------------------------------
/// base lib

requireLibs libcee stdio

type SymbolKind int
const SymbolKind ZOMP_SYMBOL_UNDEFINED 0
const SymbolKind ZOMP_SYMBOL_VAR 1
const SymbolKind ZOMP_SYMBOL_FUNC 2
const SymbolKind ZOMP_SYMBOL_MACRO 3
const SymbolKind ZOMP_SYMBOL_TYPEDEF 4
const SymbolKind ZOMP_SYMBOL_LABEL 5

func char* SymbolKind:toString(SymbolKind kind):
  if (kind == ZOMP_SYMBOL_UNDEFINED):
    ret "Undefined"
  elseif (kind == ZOMP_SYMBOL_VAR):
    ret "Variable"
  elseif (kind == ZOMP_SYMBOL_FUNC):
    ret "Function"
  elseif (kind == ZOMP_SYMBOL_MACRO):
    ret "Macro"
  elseif (kind == ZOMP_SYMBOL_TYPEDEF):
    ret "Type"
  elseif (kind == ZOMP_SYMBOL_LABEL):
    ret "Label"
  end

  ret "internal error"
end

func SymbolKind zompLookup(char* name)
func bool isBound(char* name)

// template op== l r
//   cstring:equal #l #r
// end

func bool dummy(bool x):
  printString "Returning "
  printBool x
  println()

  ret x
end

// func void test()
//   printlnString "(&&) Expect: f"
//   dummy(false) && dummy(true)
// 
//   printlnString "(&&) Expect: t,f"
//   dummy(true) && dummy(false)
// 
//   printlnString "(||) Expect f,t"
//   dummy(false) || dummy(true)
// 
//   printlnString "(||) Expect t"
//   dummy(true) || dummy(false)
// 
//   ret void
// end

// template op; expr1 expr2
//   #expr1
//   #expr2
// end

//------------------------------------------------------------------------------
/// Standard library

type Complex:
  float real
  float img
end

func void Complex:print(Complex* c):
  printString "("
  printFloat c.real
  printString ", "
  printFloat c.img
  printString "i)"
end

func void Complex:init(Complex* c, float real, float img):
  c.real = real
  c.img = img
end

// macro v2 args...
//   printlnString "Given AST:"
//   ast:print args 2
// 
//   ret ${}
// end

// macro defineArrayType type
//   arrayTypeName := "Array_" ++ type.id
// 
//   code := ${
//     type #arrayTypeName
//       int length
//       #type* elements
//     end
//   end}
// 
//   ast:print code 0
// 
//   ret ${}
// end
// 
// defineArrayType int

// func char* readFile(char* fileName)
//   file := fopen(fileName, "r")
// 
//   if file ==_ptr nullptr(int)
//     return nullptr(char)
//   end
// 
//   buffer := ""
//   
// end


// macro alias newName toName
//   if isBound(getField(newName, id))
//     printString "Redefining "
//     printString newName.id
//     printString " => "
//     printString toName.id
//     println()
//
//     ret ${}
//   else
//     ret ${error #toName is not defined}
//   end
// end

func void ast:addChildsOf(ast* target, ast* parent):
  forEachAstChild child parent:
    ast:addChild target child
  end
end

/// Support literal values of user defined types like
/// 'Complex 1.0 0.3'
macro opjux id args...:
  code := nullptr ast

  if (zompLookup id.id == ZOMP_SYMBOL_TYPEDEF):
    code = ${local}
    ast:addChild code id
    ast:addChildsOf(code, args)
    ret ${*#code}
  end

  code = ${#id}
  ast:addChildsOf(code, args)
  ret code
end

func void test2():
  existing_local_var := 10
  println "var = " existing_local_var

  c := Complex 1.0 2.0
  Complex:print(&c)
  println()

  template printDefinitionInfo name:
    printString #name
    printString " defined: "
    printBool isBound(#name)
    println()
  end

  printDefinitionInfo "non_existant_identifier"
  /// doesn't work for local variables, yet
  printDefinitionInfo "existing_local_var"
  printDefinitionInfo "Complex"
  
  printlnString SymbolKind:toString(zompLookup("x"))
end


// func void test()
//   std:base:localVar x 20
//   printInt x
// end
//
// func void test()
//   foo := nullptr(int)
// end

//------------------------------------------------------------------------------
/// program

/// operator ; will need to get a different priority
// macro cee:for loopExpr code
//   ast:print loopExpr 0
//   ${printlnString "no loops for you, bitch"}
// end

// /**
//  * foo bar
//  */
// func void test()
//   // cee:for(int i = 0; i < 10; ++i)
//   //   printString "i = "
//   //   printlnInt i
//   // end
// 
//   c := new(Complex, 1.0, 10.0)
//   Complex:print c
//   println()
//
//
// end

func int main():
  test2()

  ret 0
end



