/**
 * A simple OpenGL example
 */

require "libs/libcee.zomp"
require "opengl20.zomp"
require "glfw.zomp"
require "libs/glutils.zomp"

var int windowWidth 400
var int windowHeight 300
var bool initCalled false

func void init()
  if bool:not(initCalled)
    glfwInit()
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glewInit()
    times 2 glfwPollEvents()

    printString "Initialized"
    println()

    initCalled = true
  else
    printString "Already initialized"
    println()
  end
end

var float angle 0.0

// avoid writing it over and over, part of utils lib
macro mainloop body...
  ret ${
    var float time 0.0
    var bool running true
    zompSetRequestPause false
    while running
      time = double:toFloat(glfwGetTime())
      angle = time * 128.0

      #body

      glfwSwapBuffers()
      glfwPollEvents()

      if zompRequestedPause()
        running = false
      end

      running = running && bool:not( isPressed(GLFW_KEY_ESC) )
    end
  end}
end

func int main()
  init()

  glMatrixMode( GL_PROJECTION )
  glLoadIdentity()
  const double aspect (int:toDouble windowWidth /_d int:toDouble windowHeight)
  gluPerspective( 90.0d, aspect, 1.0d, 100.0d )

  mainloop
    autoSetupViewport()
    glClearColor(0.0, 0.0, 0.0, 1.0)
    glClear int:or(GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT)

    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
    glTranslatef( 0., 1., float:neg(4.) )
    glRotatef( angle, 0., 1., 0. )

    drawCoordSys( 8.0 )
  end

  drawPausedOverlay()
  glfwSwapBuffers()
  glfwPollEvents()

  printlnString "cu"

  ret 0
end


