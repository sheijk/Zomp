/**
 * Some experiments with lighting algorithms
 */

requireLibs libcee array

func bool isQuoted(cstring text):
  len := strlen text
  if (len < 2):
    ret false
  end

  ret ((load text == '"') && (load (text+len-1) == '"'))
end

func cstring unquote(cstring quoted):
  if isQuoted(quoted):
    len := strlen quoted
    unquotedLen := len - 2 + 1
    unquoted := malloc char unquotedLen
    for pos 0 (unquotedLen-1):
      store (unquoted+pos) load(quoted+pos+1)
    end
    store (unquoted + unquotedLen - 1) '\0'

    ret unquoted
  end

  ret quoted
end

func cstring qualifyLibName(cstring name):
  ret cstring:quote("libs/" ++ unquote name ++ ".zomp")
end

macro require firstLibOrType libs...:
  var ast* code ${}

  if isQuoted(firstLibOrType.id):
    ast:addChild code ${zmpx:lib:requireLib #firstLibOrType}

    forEachAstChild lib libs:
      ast:addChild code ${zmpx:lib:requireLib #lib}
    end
  else:
    if (firstLibOrType.id ==_str "lib"):
      forEachAstChild libName libs:
        qualifiedName := qualifyLibName libName.id
        ast:addChild code ${zmpx:lib:requireLib #qualifiedName}
      end
    else:
      ret ${error firstLibOrType "Expected either quoted file name or 'lib'"}
    end
  end

  ret code
end

requireLibs opengl20 glfw glutils glut
require lib "assimp" "math" "mathvis" "spaceballcam" "anttweakbar"

var int windowWidth 400
var int windowHeight 300
var bool initCalled false

func void init():
  if bool:not(initCalled):
    if (glfwInit() != GL_TRUE):
      println "glfw initialization failed, exiting"
      exit 1
    end
    glfwOpenWindowHint GLFW_FSAA_SAMPLES 4
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glfwSetWindowTitle "super duper lighting"

    glewInit()
    times 2 glfwPollEvents()

    if (TwInit(TW_OPENGL, nullptr void) == 0):
      println "AntTweakBar initialization failed, exiting"
      glfwTerminate()
      exit 2
    end

    println "Initialized"

    initCalled = true
  else:
    println "Already initialized"
  end
end

var int lightCount 20
var bool showOrientationGrid true
var bool showNormals true
var bool showSceneBB true
var bool showPoints true
var bool showScene true
var bool showShadowTextures true
var bool showCam2 true

var float sphereSize 10.0

var float farPlaneDistance 50.0
var float nearPlaneDistance 1.0

// avoid writing it over and over, should be part of utils lib
macro mainloop body...:
  ret ${seq:
    time := 0.0
    lastTime := 0.0
    frameDuration := 0.0
    frameNum := 0
    startTime := toFloat glfwGetTime()
    running := true

    while running:
      lastTime = time
      time = toFloat glfwGetTime()
      frameDuration = time - lastTime

      #body

      glfwSwapBuffers()
      glfwPollEvents()
      running = running && bool:not isPressed(GLFW_KEY_ESC)
      if isPressed(GLFW_KEY_I):
        glfwIconifyWindow()
        running = false
      end
      ++frameNum
    end

    endTime := toFloat glfwGetTime()
  end}
end

///-----------------------------------------------------------------------------
/// Section: input handling
///-----------------------------------------------------------------------------

var int lastMouseX 0
var int lastMouseY 0
var int mouseXDelta 0
var int mouseYDelta 0

func void onMouseMove(int x, int y):
  TwEventMousePosGLFW x y

  mouseXDelta = lastMouseX - x
  mouseYDelta = lastMouseY - y

  lastMouseX = x
  lastMouseY = y
end

var int lastMouseWheel 0
var int mouseWheelDelta 0

func void onMouseWheel(int pos):
  TwEventMouseWheelGLFW pos

  mouseWheelDelta = lastMouseWheel - pos
  lastMouseWheel = pos
end

func void glfwSetEnabled(int what, bool on):
  if on:
    glfwEnable what
  else:
    glfwDisable what
  end
end

var bool windowOnUpperScreen true

func void window::toggleScreen():
  if windowOnUpperScreen:
    glfwSetWindowPos 400 1250
  else:
    glfwSetWindowPos 400 100
  end

  windowOnUpperScreen = bool:not windowOnUpperScreen
end

func int onKey(int key, int action):
  if (action == GLFW_PRESS):
    if (key == GLFW_KEY_S):
      window::toggleScreen()
    elseif (key == GLFW_KEY_T):
      showShadowTextures = bool:not showShadowTextures
    end
  end

  TwEventKeyGLFW key action

  ret 0
end

///-----------------------------------------------------------------------------
/// Section: random numbers
///-----------------------------------------------------------------------------

// from libstdc
func int rand()

func int random (int max):
  ret int:srem(rand(), max)
end

func float float:random():
  randomInt := random(4097)
  return (toFloat(randomInt) / 4096.0)
end

func float float:srandom():
  return (float:random() * 2.0 - 1.0)
end


func GLenum Material:showNormals():
  varyingSource := "
  varying vec3 normal;
  "
  vertexSource := "
  void main(void) {
    gl_Position = ftransform();
    // normal = gl_NormalMatrix * gl_Normal;
    normal = gl_Normal;
    }"
  fragmentSource := "
  void main(void) {
    // float brightness = normal.z * 0.5 + 0.5;
    // gl_FragColor = vec4(0.0,1.0,0.0,1.0) * brightness;
    gl_FragColor = vec4(normalize(normal)*0.5 + vec3(0.5), 1.0);
    }"
  shader := createShader varyingSource vertexSource fragmentSource
  assert (shader != 0)
  ret shader
end

defineArrayType v3f

var SpaceballCamera* cam null
var SpaceballCamera* lightCam null

func void renderPoints(v3f_Array* array):
  saveAttribs:
    glPointSize 4.0
    rendergl GL_POINTS:
      for i 0 array.length:
        v := aget array i
        glVertex3f v.x v.y v.z
      end
    end
  end
end

template array:init array indexVar code:
  for #indexVar 0 #array.length:
    aset #array #indexVar #code
  end
end

macro array:setAll array valueExpr:
  uniqueId value "array:setAll"
  uniqueId index "array:setAll"

  ret ${seq:
    #value := #valueExpr
    array:init #array #index #value
  end}
end

func void placeOnCircle(v3f_Array* points, float radius):
  angleDelta := math:pi * 2.0 / toFloat points.length
  array:init points index:
    angle := toFloat index * angleDelta
    structlit v3f x (radius * sinf(angle)) y 0. z (radius * cosf(angle))
  end
end

func bool keyDown(GLint key):
  ret(glfwGetKey key == GLFW_PRESS)
end

func bool mouseButtonDown(int button):
  glfwGetMouseButton button == GLFW_PRESS
end

func void glClearDepth(GLdouble depth)

macro showTextures textureList:
  count := textureList.childCount
  code := ${}

  width := 1.0 / toFloat count
  height := width

  x := 0.
  y := 0.

  forEachAstChild tex textureList:
    ast:addChild code ${showTextureAt #tex #x #y #width #height}
    x = x + width
  end

  ret code
end

func void onWindowResize(int newWidth, int newHeight):
  autoSetupViewport()
  glfwGetWindowSize &windowWidth &windowHeight

  TwWindowSize(newWidth, newHeight)
  ret void
end

func void onTweakbarError(char* msg):
  println "AntTweakBar error: " msg
end

func void drawPointGridXZ(int size):
  max := toFloat size
  min := float:neg max

  glVertex3f 1. 1. 1.
  rendergl GL_POINTS:
    ffor x min max 1.0:
      ffor z min max 1.0:
        glVertex3f x 0.0 z
      end
    end
  end
end

func float surfaceArea(Mesh* m):
  assert (m.geometry_kind == GL_TRIANGLES)
  // println "calculating area"
  area := 0.0

  firstVertexNum := 0
  while (firstVertexNum <= (m.positions)*.size - 3):
    v0 := VertexStream:get3f m.positions firstVertexNum
    v1 := VertexStream:get3f m.positions (firstVertexNum+1)
    v2 := VertexStream:get3f m.positions (firstVertexNum+2)

    triarea := triangleArea v0 v1 v2
    area = area + triarea

    // println "triarea = " triarea ", area = " area
    // println "  v0 = " v0
    // println "  v1 = " v1
    // println "  v2 = " v2

    firstVertexNum = firstVertexNum + 3
  end

  // println "total area = " area

  ret area
end


func void placeRandomPointsOnSurface2(Mesh* surface, VertexStream* points):
  surfaceArea := surfaceArea surface
  delta := surfaceArea / toFloat points.size

  println points.size " points"

  // println "area = " surfaceArea ", delta = " delta
  // println()

  toNextTri := 0.0
  currentPos := 0.0

  firstVertexNum := 0
  pointsVertexNum := 0
  while (firstVertexNum <= (surface.positions)*.size - 3):
    v0 := VertexStream:get3f surface.positions firstVertexNum
    v1 := VertexStream:get3f surface.positions (firstVertexNum+1)
    v2 := VertexStream:get3f surface.positions (firstVertexNum+2)

    triarea := triangleArea v0 v1 v2
    toNextTri = toNextTri + triarea
    // println "toNextTri = " toNextTri
    // println "triarea = " triarea

    while (currentPos < toNextTri):
      a1 := float:random()
      a2 := float:random()
      if (a1 + a2 > 1.0):
        a1 = 1.0 - a1
        a2 = 1.0 - a2
      end
      center := (v0 + (v1 - v0) * a1 + (v2 - v0) * a2)

      // see http://www.devmaster.net/forums/showthread.php?t=10469
      // w0 := float:random()
      // w1 := (1.0 - w0) * float:random()
      // w2 := (1.0 - w1 - w0)
      // center := w0 * v0 + w1 * v1 + w2 * v2

      // just plain bullshit :)
      // w0 := float:random() * 0.5
      // w1 := float:random() * 0.5
      // w2 := 1.0 - w0 - w1
      // center := w0 * v0 + w1 * v1 + w2 * v2

      // center := (v0+v1+v2) * (1.0 / 3.0)

      VertexStream:set3f points pointsVertexNum center

      ++pointsVertexNum
      // TODO: umsteigen auf bresenham aehnlichen algorithmus
      if (pointsVertexNum >= points.size):
        println "Placed enough points"
        currentPos = toNextTri + 1.0
      end
      currentPos = currentPos + delta
    end

    // println()

    firstVertexNum = firstVertexNum + 3
  end

  if (points.size != pointsVertexNum):
    println "warning: Points not set: " (points.size - pointsVertexNum)
  end
end

func float deg2rad(float degree):
  degree * math:pi * 2.0 / 360.0
end

func VertexStream* makeFan(int count):
  vb := new VertexStream "gl_Position" 3 (count+2) GL_FLOAT
  VertexStream:clear vb
  insertPos := 0

  VertexStream:set3f vb insertPos mv3f(0.,0.,1.)
  insertPos = insertPos + 1

  angle := 0.0
  delta := 360.0 / toFloat count
  times (count+1):
    angleRad := deg2rad angle
    v := mv3f(sinf angleRad, cosf angleRad, 1.0)
    println "angle = " angle ", v = " v
    VertexStream:set3f vb insertPos v
    angle = angle + delta
    insertPos = insertPos + 1
  end

  ret vb
end

func VertexStream* makeTriangle(float size):
  vb := new VertexStream "positions" 3 3 GL_FLOAT

  VertexStream:set3f vb 0 mv3f(-3.0,0.,0.)
  VertexStream:set3f vb 1 mv3f(-1.0,0.,0.)
  VertexStream:set3f vb 2 mv3f(-2.,1.,0.)

  ret vb
end

func VertexStream* makeStripe(int count):
  vb := new VertexStream "gl_Position" 3 (3 * 2 * count) GL_FLOAT

  insertPos := 0

  left := 0.0

  times count:
    right := left + 1.0
    VertexStream:set3f vb insertPos++ mv3f(left, 0., 0.)
    VertexStream:set3f vb insertPos++ mv3f(left, 1., 0.)
    VertexStream:set3f vb insertPos++ mv3f(right, 0., 0.)

    VertexStream:set3f vb insertPos++ mv3f(left, 1., 0.)
    VertexStream:set3f vb insertPos++ mv3f(right, 1., 0.)
    VertexStream:set3f vb insertPos++ mv3f(right, 0., 0.)

    left = right
  end

  ret vb
end

func GLint pointsMaterial():
  varyingSource := "
  #version 120
  #extension GL_EXT_gpu_shader4 : enable
  "
  vertexSource := "
  void main(void) {seq:
    // gl_Position = ftransform();
    gl_Position = gl_ModelViewMatrix * gl_Vertex;
    gl_Position.xyz = gl_Position.xyz / gl_Position.w;

    float length = length(gl_Position.xyz);
    gl_Position /= length;

    gl_Position.z -= 1.0;
    gl_Position.xy /= gl_Position.z;

    gl_Position.z = (length - 0.1) / (500. - 0.1);
    gl_Position.xy *= -1.0;
    gl_Position.w = 1.0;
    }"
  fragmentSource := "
  void main(void) {
    gl_FragColor = vec4(1.0,0.8,0.0,1.0);
    }"
  shader := createShader varyingSource vertexSource fragmentSource
  assert (shader != 0)
  ret shader
end

func GLint shadowMaterial():
  varyingSource := "
  #version 120
  #extension GL_EXT_gpu_shader4 : enable
  // spaces: ws - world, os - object, ls - light, ps - projected light
  // gl_TextureMatrix[0] = os -> ps
  varying vec4 psTexcoord;
  varying vec3 normal;
  uniform sampler2D shadow;
  "
  vertexSource := "
  void main(void) {
    gl_Position = ftransform();
    vec4 osPos = gl_Vertex;
    psTexcoord = gl_TextureMatrix[0] * osPos;
    normal = gl_NormalMatrix * gl_Normal;
    }"
  fragmentSource := "
  void main(void) {
    vec3 psV = psTexcoord.xyz / psTexcoord.w;
    float vis = 0.0;
    if( psV.x >= 0.0 && psV.x <= 1.0 && psV.y >= 0.0 && psV.y <= 1.0 ) {
        vec2 front;
        vec3 R = psV;
        front.x = (R.x / (2. * (1. - R.z))) + 0.5;
        front.y = 1. - (R.y / (2 * (1. - R.z)) + 0.5);
        // vis = shadow2DProj(shadow, psTexcoord).x;
        vis = texture2D(shadow, front).x;
    }
    else {
      vis = 1.0;
    }
    vec3 color = normalize(normal)*0.5 + vec3(0.5);
    gl_FragColor = vec4(color*vis, 1.) + vec4(vec3(0.1),0.);
    }"
  shader := createShader varyingSource vertexSource fragmentSource
  assert (shader != 0)
  ret shader
end

// func GLint shadowMaterial()
//   varyingSource := "
//   #version 120
//   #extension GL_EXT_gpu_shader4 : enable
//   varying vec4 texcoord;
//   varying vec3 normal;
//   uniform sampler2DShadow shadow;
//   "
//   vertexSource := "
//   void main(void) {
//     gl_Position = ftransform();
//     vec4 v = gl_TextureMatrix[0] * gl_Vertex;
//     texcoord = v;
//     normal = gl_NormalMatrix * gl_Normal;
//     }"
//   fragmentSource := "
//   void main(void) {
//     vec3 v = texcoord.xyz / texcoord.w;
//     float vis = 0.0;
//     if( v.x >= 0.0 && v.x <= 1.0 && v.y >= 0.0 && v.y <= 1.0 ) {
//       vis = shadow2DProj(shadow, texcoord).x;
//     }
//     else {
//       vis = 0.0;
//     }
//     vec3 color = normalize(normal)*0.5 + vec3(0.5);
//     gl_FragColor = vec4(color*vis, 1.) + vec4(vec3(0.1),0.);
//     }"
//   shader := createShader varyingSource vertexSource fragmentSource
//   assert (shader != 0)
//   ret shader
// end

func int main():
  init()

  // glfwRestoreWindow()
  // array:setAll lightPositions (structlit v3f x 0. y 12. z 0.)
  glfwSetWindowSizeCallback (cast void* &onWindowResize)
  glfwSetMouseButtonCallback (cast void* &TwEventMouseButtonGLFW)
  glfwSetMousePosCallback (cast void* &onMouseMove)
  glfwSetMouseWheelCallback (cast void* &onMouseWheel)
  glfwSetKeyCallback (cast void* &onKey)
  glfwSetCharCallback (cast void* &TwEventCharGLFW)

  TwHandleErrors &onTweakbarError

  glEnable GL_DEPTH_TEST
  glDepthFunc GL_LEQUAL

  glEnable GL_BLEND
  glBlendFunc GL_ONE GL_ONE_MINUS_SRC_ALPHA

  template abortIf cond message onFail...:
    if #cond:
      print #message
      #onFail
      ret 0
    end
  end

  lightPositions := newArray v3f lightCount
  placeOnCircle lightPositions 20.0

  // sceneFilename := "data/ModernStructure.3ds"
  // sceneFilename := "data/MonroeBar_SketchUpScene.obj"
  // sceneFilename := "data/living1_max/modern_living_furn.3DS"
  sceneFilename := "data/house.obj"
  // sceneFilename := "data/sphere.nff"
  loadOptions := aiProcess_Triangulate | aiProcess_SortByPType | aiProcess_GenNormals | aiProcess_PreTransformVertices

  scene := aiImportFile sceneFilename loadOptions
  abortIf (scene == nullptr aiScene) "Error while loading file: ":
    println aiGetErrorString()
  end

  mesh := aiScene:toMesh scene
  abortIf (isNull mesh) "Failed to convert scene to mesh"

  aiReleaseImport scene
  scene = nullptr aiScene

  // mesh := new Mesh 1
  // mesh.positions = makeStripe 10
  // mesh.geometry_kind = GL_TRIANGLES
  // mesh.streams = mesh.positions
  // Mesh:printDetailed mesh

  unless isNull(mesh.normals):
    VertexStream:foreach (mesh.normals)* float normal:
      store (normal+0) (float:neg *(normal+0))
      store (normal+1) (float:neg *(normal+1))
      store (normal+2) (float:neg *(normal+2))
    end
  end

  Mesh:print mesh
  println "  surface area = " surfaceArea(mesh)
  Mesh:define points ((mesh.positions)*.size * 100):
    gl_Position GL_FLOAT 3
  end
  points.geometry_kind = GL_POINTS
  placeRandomPointsOnSurface2 mesh points.positions
  // VertexStream:printDetailed points.positions

  // var AABB meshBB
  meshBB := undef AABB
  Mesh:calcAABB &meshBB mesh
  meshSize := AABB:diagonalLength &meshBB
  viewDistance := float:max 2.0 (0.25 * meshSize)

  if isNull(cam):
    cam = new SpaceballCamera
    cam.distance = viewDistance
  end

  if isNull(lightCam):
    lightCam = new SpaceballCamera
    lightCam.distance = cam.distance
    lightCam.latitude = cam.latitude
    lightCam.longitude = cam.longitude + 30.
  end

  macro twgroup optionString settings:
    code := ${}
    forEachAstChild s settings:
      if ast:matchesShape(s, ${rw _ _ __}):
        typeId := ast:child s 1
        name := ast:child s 2
        var := ast:child s 3
        ast:addChild code ${TwAddVarRW bar #name #typeId (cast void* &#var) #optionString}
      else:
        ret ${error "Expected rw TYPE NAME VAR" #s}
      end
    end

    ret code
  end

  bar := TwNewBar "Settings"
  TwDefine "Settings refresh=0.01 position='0 20' size='200 800'"

  TwAddSeparator bar (nullptr char) " "

  twgroup "group=camera precision=2":
    rw TW_TYPE_FLOAT "distance" cam.distance
    rw TW_TYPE_FLOAT "latitude" cam.latitude
    rw TW_TYPE_FLOAT "longitude" cam.longitude
    rw TW_TYPE_FLOAT "near plane" nearPlaneDistance
    rw TW_TYPE_FLOAT "far plane" farPlaneDistance
  end

  twgroup "group=lights":
    rw TW_TYPE_INT32 "count" lightCount
  end

  // // TODO implement it :)
  // operator mesh
  //   makeSphere r: 1.0 detail: 20
  //   applyNoise 0.3
  //   twist 0.3
  // end

  twgroup "group=display":
    rw TW_TYPE_BOOL8 "Grid" showOrientationGrid
    rw TW_TYPE_BOOL8 "Normals" showNormals
    rw TW_TYPE_BOOL8 "Bounding box" showSceneBB
    rw TW_TYPE_BOOL8 "Scene" showScene
    rw TW_TYPE_BOOL8 "Points" showPoints
    rw TW_TYPE_BOOL8 "Shadow tex" showShadowTextures
    rw TW_TYPE_BOOL8 "Light cam" showCam2
  end

  twgroup "group=geometry":
    rw TW_TYPE_FLOAT "Sphere size" sphereSize
  end

  // material := Material:showNormals()
  material := shadowMaterial()
  pointsMaterial := pointsMaterial()

  shadowFBO := new Framebuffer 1024 1024
  Framebuffer:attachColorTexture shadowFBO
  Framebuffer:attachDepthTexture shadowFBO
  Framebuffer:create shadowFBO
  println "Shadow FBO status: " Framebuffer:statusMessage(shadowFBO)

  // printTexture2DInfo shadowFBO.colorTexture "shadowFBO.color"
  // printTexture2DInfo shadowFBO.depthTexture "shadowFBO.depth"

  // print shadowFBO

  angle := 0.0

  movingCam := cam

  mainloop:
    /// updating
    autoSetupViewport()
    glfwGetWindowSize &windowWidth &windowHeight
    angle = angle + 128.0 * frameDuration

    if (abs mouseXDelta > abs mouseYDelta):
      mouseYDelta = 0
    else:
      mouseXDelta = 0
    end

    if keyDown(GLFW_KEY_1):
      movingCam = cam
    elseif keyDown(GLFW_KEY_2):
      movingCam = lightCam
    end

    if keyDown(GLFW_KEY_LSHIFT):
      movingCam.longitude = movingCam.longitude + toFloat mouseXDelta
      movingCam.latitude = movingCam.latitude + toFloat mouseYDelta
    end
    movingCam.distance = movingCam.distance + toFloat mouseWheelDelta
    SpaceballCamera:restrictParams movingCam
    mouseXDelta = 0
    mouseYDelta = 0
    mouseWheelDelta = 0

    /// creation of shadow map

    renderToTarget shadowFBO:
      glClearColor 0. 0.1 0. 0.
      glClearDepth 1.0d
      glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

      glMatrixMode GL_PROJECTION
      glLoadIdentity()
      // farPlaneDist := cam.distance + float:max(1.0, 0.5 * meshSize)
      // nearPlaneDist := float:max(1.0, cam.distance - meshSize)
      // gluPerspective 90.0d 1.0d toDouble(nearPlaneDistance) toDouble(farPlaneDistance)
      glOrtho -1.0d 1.0d -1.0d 1.0d toDouble(nearPlaneDistance) toDouble(farPlaneDistance)

      glMatrixMode GL_MODELVIEW
      glLoadIdentity()
      SpaceballCamera:applyToGL lightCam

      drawOrientationGridXZ 100.0
      saveAttribs:
        glEnable GL_VERTEX_PROGRAM_POINT_SIZE
        glPointSize 4.0
        withShader pointsMaterial:
          Mesh:render points points.geometry_kind 0
          glColor4f 1. 0.2 0. 1.0
          saveTransforms:
            glTranslatef 10. 0. 5.
            glColor4f 0. 1. 0.5 1.
            glutSolidSphere 5.0d 10 10
          end
        end
        // withShader material
        //   Mesh:render mesh mesh.geometry_kind material
        // end
      end
    end renderToTarget

    Framebuffer:makeDepthTexture shadowFBO
    Framebuffer:makeColorTexture shadowFBO

    /// rendering

    glClearColor 0. 0. 0. 0.
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode GL_PROJECTION
    glLoadIdentity()
    aspect := toDouble(windowWidth) / toDouble(windowHeight)
    gluPerspective( 90.0d, aspect, 1.0d, toDouble(farPlaneDistance) )

    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
    SpaceballCamera:applyToGL cam

    if showOrientationGrid:
      drawOrientationGrid()
    end
    // drawPointGridXZ 100

    if showScene:
      // glBindTexture2D shadowFBO.colorTexture
      glBindTexture2D shadowFBO.depthTexture
      // glEnable GL_TEXTURE_2D
      glTexParameteri GL_TEXTURE_2D GL_TEXTURE_COMPARE_MODE GL_COMPARE_R_TO_TEXTURE
      glTexParameteri GL_TEXTURE_2D GL_TEXTURE_COMPARE_FUNC GL_LEQUAL
      glTexParameteri GL_TEXTURE_2D GL_DEPTH_TEXTURE_MODE GL_INTENSITY

      glMatrixMode GL_TEXTURE
      glLoadIdentity()
      glTranslatef 0.5 0.5 0.
      glScalef .5 .5 1.
      gluPerspective 90.0d 1.0d toDouble(nearPlaneDistance) toDouble(farPlaneDistance)
      SpaceballCamera:applyToGL lightCam

      withShader material:
        Mesh:render mesh mesh.geometry_kind 0
        glColor4f 1. 1. 1. 1.
        glutSolidSphere toDouble(sphereSize) 100 100
      end

      glTexParameteri GL_TEXTURE_2D GL_TEXTURE_COMPARE_MODE GL_NONE
      // glTexParameteri GL_TEXTURE_2D GL_TEXTURE_COMPARE_FUNC GL_LEQUAL
      // glTexParameteri GL_TEXTURE_2D GL_DEPTH_TEXTURE_MODE GL_INTENSITY
      glBindTexture2D 0
      // saveAttribs
      //   // glPolygonMode GL_FRONT_AND_BACK GL_LINE
      //   glColor3f 1. 1. 1.
      //   Mesh:render mesh mesh.geometry_kind 0
      // end
      saveTransforms:
        glTranslatef 10. 0. 5.
        glColor4f 0. 1. 0.5 1.
        glutSolidSphere 5.0d 10 10
      end
    end

    if showPoints:
      glColor3f 0.5 0. 0.
      Mesh:render points points.geometry_kind 0
    end

    if showSceneBB:
      glColor3f 1. 1. 1.
      AABB:render &meshBB
    end

    if showNormals:
      Mesh:showNormals mesh
    end

    if showCam2:
      saveTransforms:
        glMatrixMode GL_MODELVIEW
        SpaceballCamera:rotateInv lightCam
        drawCoordSys 1.0
      end
    end

    glColor3f 1. 0. 0.
    renderPoints lightPositions

    if showShadowTextures:
      makeGLIdentityTransforms()
      glScalef (1. / toFloat aspect) 1. 1.
      glTranslatef 1.0 -0.5 0.
      glTranslatef -0.5 -0.5 0.
      saveAttribs:
        glDisable GL_DEPTH_TEST
        glDisable GL_BLEND
        showTextures:
          shadowFBO.colorTexture
          shadowFBO.depthTexture
        end
      end
    end

    printGLError()

    TwDraw()
  end

  glClear GL_DEPTH_BUFFER_BIT
  drawPausedOverlay()
  glfwPollEvents()

  println (toDouble frameNum / (glfwGetTime() - toDouble startTime)) " fps"

  printTexture2DInfo shadowFBO.colorTexture "fbo color"
  printTexture2DInfo shadowFBO.depthTexture "fbo z"

  Mesh:delete mesh
  glDeleteProgram material
  glDeleteProgram pointsMaterial

  v3f_Array:release lightPositions

  Framebuffer:delete shadowFBO

  TwDeleteAllBars()

  // glfwIconifyWindow()

  ret 0
end

