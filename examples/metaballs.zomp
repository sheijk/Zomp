/**
 * Nearly metaballs
 */

linkclib "libglfw.dylib" "libGLEW.dylib" "glut.dylib" "libquicktext.dylib"

include "libs/libcee.zomp"

include "opengl20.zomp"
include "glfw.zomp"
include "glut.zomp"
include "quicktext.zomp"
include "libs/glutils.zomp"

//------------------------------------------------------------------------------
// Improved unit tests

///
/// An assertion macro which detects certain kinds of expressions and inserts
/// code printing the arguments for better error messages
///
/// Example:
/// x := 20.0
/// unittest:assert (sin 10.0 ==_f 20.0)
///
/// Will result in:
///
/// Assertion failed
/// left = -0.544021
/// right = 20.000000
/// op==_f [2 childs]
///   opjux [2 childs]
///     sinf [0 childs]
///     10.0 [0 childs]
///   x [0 childs]
///
macro unittest:assert testCode
  isCompare := false
  printF := ast:fromString "internalErrorIn unittest:assert"
  compareF := ast:fromString "internalErrorIn unittest:assert"

  if2 ast:matchesShape(testCode, ${__ ==_f __}) then
    isCompare = true
    printF = ast:fromString "print"
    compareF = ast:fromString "op==_f"
  elseif ast:matchesShape(testCode, ${__ == __})
    isCompare = true
    printF = ast:fromString "print"
    compareF = ast:fromString "op=="
  end

  if2 isCompare then
    uniqueId lvar "lvar"
    uniqueId rvar "rvar"
    l := ast:child(testCode, 0)
    r := ast:child(testCode, 1)
    ret ${
      #lvar := #l
      #rvar := #r
      unless (#compareF #lvar #rvar)
        printHLine '-' 40
        printlnString "Assertion failed"
        printString "left = "
        #printF #lvar
        println()
        printString "right = "
        #printF #rvar
        println()
        ast:print ${#testCode} 0
      end
    end}
  else
    ret ${
      unless #testCode
        printHLine '-' 40
        printlnString "Assertion failed"
        ast:print ${#testCode} 0
      end
    end}
  end

  ret ${}
end

/// redefine to work with indent based syntax expressions
macro unittest:assertAll checks
  var ast* code ${}
  forEachAstChild check checks
    ast:addChild code ${unittest:assert #check}
  end
  ret code
end

//------------------------------------------------------------------------------
// misc

macro assert code
  ret ${if2 (bool:not #code) then
    printlnString "error: Assertion failed"
    ast:print ${#code} 0
  end}
end

//------------------------------------------------------------------------------
// pointer utils

template op** base exp
  int:pow(#base, #exp)
end

macro ptrvars type names...
  decls := seqAst()
  forEachAstChild name names
    ast:addChild decls ${var #type #name nullptr(#type)}
  end
  ret decls
end

//------------------------------------------------------------------------------
// random numbers

// from libstdc
func int rand()

func int random (int max)
  ret int:srem(rand(), max)
end

func float float:random()
  randomInt := random(4097)
  return (toFloat(randomInt) / 4096.0)
end

func float float:srandom()
  return (float:random() * 2.0 - 1.0)
end

//------------------------------------------------------------------------------
// math

var float math:e 2.71828182845904523536028747135266250
var float math:log2e 1.44269504088896340735992468100189214
var float math:log10e 0.434294481903251827651128918916605082
var float math:ln2 0.693147180559945309417232121458176568
var float math:ln10 2.30258509299404568401799145468436421
var float math:pi 3.14159265358979323846264338327950288
var float math:pi_2 1.57079632679489661923132169163975144
var float math:pi_4 0.785398163397448309615660845819875721
var float math:sqrt2 1.41421356237309504880168872420969808
var float math:sqrt1_2 0.707106781186547524400844362104849039

func float powf(float base, float exp)
func double pow(double base, double exp)

func int int:pow(int base, int exp)
  v := base

  remMults := exp

  while (remMults > 1)
    v = v * base
    remMults = remMults - 1
  end

  ret v
end

func float float:mix(float x, float a, float b)
  ret ( (1.0 - x) * a + x * b )
end

unittest:testCasesFor float:mix
  float:mix 0.0 1.0 10.0 == 1.0
  float:mix 1.0 0.0 4.0 == 4.0
  float:mix 0.5 0.0 4.0 == 2.0
  float:mix 0.25 0.0 8.0 == 2.0
end

func float posmod(float x, float divisor)
  mod := fmodf(x, divisor)

  if2 (mod < 0.0) then
    mod = divisor - float:neg(mod)
  end

  ret mod
end

unittest:testCasesFor posmod
  posmod(0.0,2.0) == 0.0
  posmod(1.0,2.0) == 1.0
  posmod(2.0,2.0) == 0.0

  posmod(-1.0,3.0) == 2.0
  posmod(-2.0,3.0) == 1.0

  posmod(23.0, 4.0) == 3.0
  posmod(-61.0, 3.0) == 2.0
end

//------------------------------------------------------------------------------
// memory

func void free(void* ptr)

template delete ptr
  free (cast void* #ptr)
end

//------------------------------------------------------------------------------
// some simple types

struct Color
  float r
  float g
  float b
  float a
end

func void Color:init(Color* this, float r, float g, float b, float a)
  this.r = r
  this.g = g
  this.b = b
  this.a = a
end

//------------------------------------------------------------------------------
// Quick and dirty arrays

macro defineArrayType type
  arrayTypeName := type.id ++  "_Array"
  initFuncName := arrayTypeName ++ ":init"

  // initDecl := ${func void NAME(#arrayTypeName* this, int size)}
  initDecl := ast:fromString("opcall")
  ast:addChild initDecl ast:fromString(initFuncName)
  ast:addChild initDecl ${#arrayTypeName* this}
  ast:addChild initDecl ${int size}

  code := ${
    struct #arrayTypeName
      int length
      #type* elements
    end

    // func void #initFuncName(#arrayTypeName* this, int length)
    func void #initDecl
      this.length = size
      this.elements = malloc(#type, size)
    end
  end}

  ret code
end

template aget array index
  load (ptradd getField(#array, elements) #index)
end

template aset array index value
  store (ptradd getField(#array, elements) #index) #value
end

macro array:setAll array value
  uniqueId size "lala"
  uniqueId i "lala"

  ret ${
    size := getField(#array, length)
    for #i 0 size
      aset #array #i #value
    end
  end}
end

macro Array:foreach array indexVar code
  uniqueId count "array_size"

  ret ${for #indexVar 0 #array.length
    #code
  end}
end

//------------------------------------------------------------------------------
// application

var float sideLengthf 20.0

var int windowWidth 1280
var int windowHeight 720
var bool initCalled false

func void init()
  if2 bool:not(initCalled) then
    glfwInit()
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glewInit()
    times 2 glfwPollEvents()

    printString "Initialized"
    println()

    initCalled = true
  else
    printString "Already initialized"
    println()
  end
end

var float angle 0.0

// avoid writing it over and over, part of utils lib
macro mainloop body...
  ret ${
    time := 0.0
    lastTime := 0.0
    frameDuration := 0.0
    frameNum := 0
    startTime := double:toFloat glfwGetTime()
    running := true

    while running
      lastTime = time
      time = double:toFloat glfwGetTime()
      frameDuration = time - lastTime
      angle = time * 128.0

      #body

      glfwSwapBuffers()
      glfwPollEvents()
      running = bool:not isPressed(GLFW_KEY_ESC)
      ++frameNum
    end

    endTime := double:toFloat glfwGetTime()
  end}
end

//------------------------------------------------------------------------------

type Field3D
  int sideLength
  float* array
end

template Field3D:checkRange component
  assert (#component >= 0)
  assert (#component < this.sideLength)
end

func int Field3D:index(Field3D* this, int x, int y, int z)
  Field3D:checkRange x
  Field3D:checkRange y
  Field3D:checkRange z

  return (x + z * this.sideLength + y * this.sideLength * this.sideLength)
end

func float Field3D:get(Field3D* this, int x, int y, int z)
  index := Field3D:index(this, x, y, z)

  array := this.array
  return load(ptradd(array, index))
end

func void Field3D:set(Field3D* this, int x, int y, int z, float value)
  index := Field3D:index(this, x, y, z)
  a := this.array
  store ptradd(a, index) value
end

template Field3D:foreach field x y z value code...
  for #x 0 #field.sideLength
    for #y 0 #field.sideLength
      for #z 0 #field.sideLength
        #value := Field3D:get(#field, #x, #y, #z)
        #code
      end
    end
  end
end

func void Field3D:clear(Field3D* this)
  array := this.array
  sideLength := this.sideLength

  for i 0 (sideLength ** 3)
    store ptradd(array, i) 0.0
  end
end

func void Field3D:init(Field3D* this, int sideLength)
  setField this sideLength sideLength
  setField this array malloc(float, sideLength * sideLength * sideLength)
  Field3D:clear this
end

func void Field3D:show(Field3D* this)
  o := -0.5 * toFloat this.sideLength

  saveTransforms
    glTranslatef o o o
    rendergl GL_POINTS
      Field3D:foreach this x y z v
        r := float:mix v 0.0 1.0
        g := float:mix v 0.0 0.25
        b := float:mix v 0.0 0.0

        glColor4f r g b 0.0
        glVertex3i x y z
      end
    end
  end
end

struct Metaballs
  int count
  float* xs
  float* ys
  float* zs
  float* xvels
  float* yvels
  float* zvels
  float* strengths
end

template Metaballs:foreach ballnum balls code...
  for #ballnum 0 #balls.count
    #code
  end
end

func void Metaballs:init(Metaballs* this, int count)
  template tempAndMemberArray name
    #name := malloc float count
    this.#name = #name
  end

  this.count = count

  tempAndMemberArray xs
  tempAndMemberArray ys
  tempAndMemberArray zs
  tempAndMemberArray xvels
  tempAndMemberArray yvels
  tempAndMemberArray zvels
  tempAndMemberArray strengths

  max := 20.0
  offet := -10.0

  Metaballs:foreach ballnum this
    xs[ballnum] = max * float:random() + offet
    ys[ballnum] = max * float:random() + offet
    zs[ballnum] = max * float:random() + offet
    xvels[ballnum] = float:neg xs[ballnum] / 4.0
    yvels[ballnum] = float:neg ys[ballnum] / 4.0
    zvels[ballnum] = float:neg zs[ballnum] / 4.0
    strengths[ballnum] = 1.0
  end
end

func void Metaballs:update(Metaballs* this, float time)
  xs := this.xs
  ys := this.ys
  zs := this.zs
  xvels := this.xvels
  yvels := this.yvels
  zvels := this.zvels

  t := time / 1.0

  minpos := -0.5 * sideLengthf
  maxpos := 0.5 * sideLengthf

  Metaballs:foreach ballnum this
    xs[ballnum] = xs[ballnum] + t * xvels[ballnum]
    ys[ballnum] = ys[ballnum] + t * yvels[ballnum]
    zs[ballnum] = zs[ballnum] + t * zvels[ballnum]

    acc := 1.0 / 10.0 * float:random()

    if2 (xs[ballnum] < minpos) then
      xvels[ballnum] = xvels[ballnum] + acc
    elseif (xs[ballnum] > maxpos)
      xvels[ballnum] = xvels[ballnum] - acc
    end
    if2 (ys[ballnum] < minpos) then
      yvels[ballnum] = yvels[ballnum] + acc
    elseif (ys[ballnum] > maxpos)
      yvels[ballnum] = yvels[ballnum] - acc
    end
    if2 (zs[ballnum] < minpos) then
      zvels[ballnum] = zvels[ballnum] + acc
    elseif (zs[ballnum] > maxpos)
      zvels[ballnum] = zvels[ballnum] - acc
    end

    maxVel := 10.0
    minVel := -10.0

    xvels[ballnum] = float:clamp(minVel, maxVel, xvels[ballnum])
    yvels[ballnum] = float:clamp(minVel, maxVel, yvels[ballnum])
    zvels[ballnum] = float:clamp(minVel, maxVel, zvels[ballnum])
  end
end

func void Metaballs:print(Metaballs* this)
  printInt this.count
  printlnString " metaballs"

  xs := this.xs
  ys := this.ys
  zs := this.zs
  strengths := this.strengths

  Metaballs:foreach ballnum this
    printString "  x = "
    printFloat xs[ballnum]
    printString ", y = "
    printFloat ys[ballnum]
    printString ", z = "
    printFloat zs[ballnum]
    printString ", strength = "
    printFloat strengths[ballnum]
    println()
  end
end

func void Metaballs:applyToField(Metaballs* this, Field3D* field)
  xs := this.xs
  ys := this.ys
  zs := this.zs

  Field3D:clear(field)

  mballSize := 4.0

  offset := -0.5 * sideLengthf

  Field3D:foreach field x y z value
    newValue := value
    Metaballs:foreach ballnum this
      xd := toFloat x - xs[ballnum] + offset
      yd := toFloat y - ys[ballnum] + offset
      zd := toFloat z - zs[ballnum] + offset
      d := sqrtf(xd * xd + yd * yd + zd * zd)

      newValue = newValue + float:max(0.0, 1.0 - d / mballSize)
    end
    Field3D:set(field, x, y, z, newValue)
  end
end

func void Metaballs:show(Metaballs* this)
  xs := this.xs
  ys := this.ys
  zs := this.zs
  strengths := this.strengths

  rendergl GL_POINTS
    glColor4f 1.0 1.0 1.0 1.0
    Metaballs:foreach ballnum this
      glVertex3f xs[ballnum] ys[ballnum] zs[ballnum]
    end
  end
end

// TODO: metaballs reintun
// http://en.wikipedia.org/wiki/Marching_cubes

defineArrayType int
defineArrayType float

struct Point
  float x
  float y
  float z
end

func void Point:init(Point* this, float x, float y, float z)
  this.x = x
  this.y = y
  this.z = z
end

func void printsi(cstring str, int i)
  printString str
  printChar ' '
  printInt i
end

func void printsf(cstring str, float f)
  printString str
  printChar ' '
  printFloat f
end

func void Point:print(Point* this)
  printString "(Point"
  printsf " x = " this.x
  printsf " y = " this.y
  printsf " z = " this.z
  printChar ')'
end

struct Metaball
  Point pos
  float strength
end

func void Metaball:print(Metaball* this)
  printString "(Metaball pos="
  Point:print fieldptr(this, pos)
  printsf " strength = " this.strength
  printChar ')'
end

// func Point Point:make(float x, float y, float z)
//   var Point p
//   p.x = x
//   p.y = y
//   p.z = z
//   ret p
// end

// defineArrayType Metaball
// 
// testf
//   balls := new Array_Metaball 10
// 
//   Array:foreach balls i
//     var Metaball b
//     b = aget balls i
//     Metaball:print &b
//     println()
//   end
// 
//   delete balls
// end

// testf
//   var Metaball mb
//   var Point p
//   p.x = 1.0
//   p.y = 1.0
//   p.z = 1.0
//   mb.pos = p
// 
//   printFloat mb.pos.x
// end

/**/

//------------------------------------------------------------------------------

func void resizeWindow(int width, int height)
  windowWidth = width
  windowHeight = height
  glfwSetWindowSize windowWidth windowHeight
end

type degree float

///
/// A camera defined by longitude, latitude and distance
///
struct SpaceballCamera
  /// angle between z-axis and rotation around y-axis
  degree longitude

  /// angle between z-axis and rotation around x-axis
  degree latitude

  degree distance
end

func void SpaceballCamera:init(SpaceballCamera* this)
  this.latitude = 0.0f
  this.longitude = 0.0f
  this.distance = 1.0f
end

func void SpaceballCamera:rotate(SpaceballCamera* this)
  glTranslatef 0. 0. float:neg(this.distance)
  glRotatef this.latitude 1. 0. 0.
  glRotatef this.longitude 0. 1. 0.
end

func void SpaceballCamera:applyToGL(SpaceballCamera* this)
  glMatrixMode GL_MODELVIEW
  glLoadIdentity()
  SpaceballCamera:rotate(this)
end

func void SpaceballCamera:restrictParams(SpaceballCamera* this)
  this.longitude = posmod this.longitude 360.0f
  this.latitude = float:clamp float:neg(90.0) 90.0 this.latitude
  this.distance = float:max 0.0 this.distance
end

var int lastMouseX 0
var int lastMouseY 0
var int mouseXDelta 0
var int mouseYDelta 0

func void onMouseMove(int x, int y)
  mouseXDelta = lastMouseX - x
  mouseYDelta = lastMouseY - y

  lastMouseX = x
  lastMouseY = y
end

var bool windowOnUpperScreen true

var int debugNum 0

func void onKey(int key, int action)
  if2 ((key == GLFW_KEY_TAB) && (action == GLFW_PRESS)) then
    if2 windowOnUpperScreen then
      glfwSetWindowPos 100 1250
    else
      glfwSetWindowPos 100 100
    end
    windowOnUpperScreen = bool:not windowOnUpperScreen
  elseif (action == GLFW_PRESS)
    if2 (key == GLFW_KEY_UP) then
      ++debugNum
    elseif (key == GLFW_KEY_DOWN)
      --debugNum
    end
  end
end

func char* char:toCString(char c)
  str := "X"
  store (cast char* str) c
  ret str
end

var bool resizeDirty false

func void onWindowResize(int newWidth, int newHeight)
  printString "Window was resized to "
  printInt newWidth
  printString "x"
  printInt newHeight
  println()

  windowWidth = newWidth
  windowHeight = newHeight
  glViewport 0 0 windowWidth windowHeight

  resizeDirty = true
end

func void Framebuffer:print(Framebuffer* this)
  macro printMember name printF
    quoteStr := char:toCString '"' // '"' dumb emacs parser \o/
    text := quoteStr ++ " " ++ name.id ++ "=" ++ quoteStr
    ret ${
      printString #text
      #printF this.#name
    end}
  end

  template printIntMember name
    printMember #name printInt
  end

  printString "(Framebuffer"
  printIntMember width
  printIntMember height
  printIntMember fbo
  printIntMember colorTexture
  printIntMember colorBuffer
  printIntMember depthTexture
  printIntMember depthBuffer
  printChar ')'
end

struct Shader
  cstring varyingSource
  cstring vertexSource
  cstring fragmentSource
end

//------------------------------------------------------------------------------
// lists

func cstring List:listTypeName(cstring memberType)
  ret (memberType ++ "_List")
end

macro defineListType memberT
  listT := ast:fromString List:listTypeName(memberT.id)
  code := ${
    struct #listT
      #memberT data
      #listT* next
    end
    func void INITFUNCNAME(#listT* this, #memberT data, #listT* next)
      this.data = data
      this.next = next
    end
  end}
  ast:replace code "INITFUNCNAME" ast:fromString(listT.id ++ ":init")
  ret code
end

defineListType int
defineListType float

macro makeList type nums...
  listT := ast:fromString(type.id ++ "_List")
  list := ${nullptr #listT}
  i := nums.childCount - 1
  while (i >= 0)
    num := ast:child(nums, i)
    list = ${new #listT #num #list}
    --i
  end

  ret list
end

macro List:foreach_ptr list indexVar dataVar code
  uniqueId current "Current_list_item"

  ret ${
    #current := #list
    #indexVar := 0
    while isNotNull(#current)
      #dataVar := fieldptr #current data
      #code
      ++(#indexVar)
      #current = #current.next
    end
  end}
end

macro List:foreach list indexVar dataVar code
  uniqueId current "Current_list_item"

  ret ${
    #current := #list
    #indexVar := 0
    while isNotNull(#current)
      #dataVar := #current.data
      #code
      ++(#indexVar)
      #current = #current.next
    end
  end}
end

//------------------------------------------------------------------------------
// filtering effects

struct FilterEffect
  GLint shader
  int size
  float* xoffsets
  float* yoffsets
  float* weights
  FilterEffect* next
end

func void FilterEffect:init(FilterEffect* this, int size, GLint shader, FilterEffect* next)
  this.shader = shader
  this.size = size
  this.xoffsets = malloc float size
  this.yoffsets = malloc float size
  this.weights = malloc float size
  this.next = next
end

func void FilterEffect:delete(FilterEffect* this)
  glDeleteShader this.shader
  this.shader = 0
  this.size = 0
  free (cast void* this.xoffsets)
  this.xoffsets = nullptr float
  free (cast void* this.yoffsets)
  this.yoffsets = nullptr float
  free (cast void* this.weights)
  this.weights = nullptr float
  unless (this.next ==_ptr nullptr(FilterEffect))
    FilterEffect:delete this.next
  end
  this.next = nullptr FilterEffect
end

func void FilterEffect:bind(FilterEffect* this)
  // glUseProgram this.shader
  gl:uniform1fv this.shader "xoffsets" this.size this.xoffsets
  gl:uniform1fv this.shader "yoffsets" this.size this.yoffsets
  gl:uniform1fv this.shader "weights" this.size this.weights
end

func void FilterEffect:unbind(FilterEffect* this)
  void
  // glUseProgram 0
end

// #define gauss_width 7
//  
// sumr=0;
// sumg=0;
// sumb=0;
//     
// int gauss_fact[gauss_width]={1,6,15,20,15,6,1};
// int gauss_sum=64;
//  
// for(i=1;i<temp->w-1;i++){
//   for(j=1;j<temp->h-1;j++){
//     sumr=0;
//     sumg=0;
//     sumb=0;
//     for(k=0;k<gauss_width;k++){
//       color=getpixel(temp,i-((gauss_width-1)>>1)+k,j);
//       r=getr32(color);
//       g=getg32(color);
//       b=getb32(color);
//       sumr+=r*gauss_fact[k];
//       sumg+=g*gauss_fact[k];
//       sumb+=b*gauss_fact[k];
// 
//     }
//     putpixel(temp1,i,j,makecol(sumr/gauss_sum,sumg/gauss_sum,
//       sumb/gauss_sum));
//   } 
// }
//  
// for(i=1;i<temp->w-1;i++){
//   for(j=1;j<temp->h-1;j++){
//     sumr=0;
//     sumg=0;
//     sumb=0;
//     for(k=0;k<gauss_width;k++){
//       color=getpixel(temp1,i,j-((gauss_width-1)>>1)+k);
//       r=getr32(color);
//       g=getg32(color);
//       b=getb32(color);
// 
//       sumr+=r*gauss_fact[k];
//       sumg+=g*gauss_fact[k];
//       sumb+=b*gauss_fact[k];
//     }
//     sumr/=gauss_sum;
//     sumg/=gauss_sum;
//     sumb/=gauss_sum;
// 
//     putpixel(temp2,i,j,makecol(sumr,sumg,sumb));
//   } 
// } 

func GLint makeFilterShader(int size)
  varyingSource := "
  #version 120
  varying vec2 texCoord;"
  vertexSource := "
  void main(void) {
    gl_Position = ftransform();
    texCoord = gl_MultiTexCoord0.xy;
    }"
  fragmentSource := "
  uniform sampler2D tex;
  uniform vec2 pixSize = vec2(0.0);
  uniform float factor = 1.0;
  const int offsetSpan = " ++ int2cstring size ++ ";
  uniform float xoffsets[2*offsetSpan+1];
  uniform float yoffsets[2*offsetSpan+1];
  uniform float weights[2*offsetSpan+1];

  void main(void) {
    vec2 ps = pixSize;
    vec4 color = vec4(0.0);
    for(int n = 0; n < offsetSpan*2+1; ++n) {
      float w = weights[n];
      color += w * texture2D(tex, texCoord + vec2(ps.x*xoffsets[n], ps.y*yoffsets[n]));
      }
    color *= factor;
    color.a = 0.0;
    gl_FragColor = color;
    }"

  glowShader := createShader varyingSource vertexSource fragmentSource
  assert (glowShader != 0)

  ret glowShader
end

/*
func FilterEffect* makeGlowFilter(int offsetSpan)
  offsetCount := 3
  // offsetCount := 1
  glowShader := makeFilterShader offsetCount

  horPass := new FilterEffect offsetCount glowShader nullptr(FilterEffect)
  vertPass := new FilterEffect offsetCount glowShader horPass

  pixw := 1.0 / toFloat(windowWidth)
  pixh := 1.0 / toFloat(windowHeight)

  // vertPass.xoffsets[0] = 0.0
  // vertPass.yoffsets[0] = 0.0
  // vertPass.weights[0] = 1.0
  // 
  // horPass.xoffsets[0] = 0.0
  // horPass.yoffsets[0] = 0.0
  // horPass.weights[0] = 1.0

  vertPass.xoffsets[0] = float:neg pixw
  vertPass.yoffsets[0] = 0.0
  vertPass.xoffsets[1] = 0.0
  vertPass.yoffsets[1] = 0.0
  vertPass.xoffsets[2] = pixw
  vertPass.yoffsets[2] = 0.0

  horPass.xoffsets[0] = 0.0
  horPass.yoffsets[0] = float:neg pixh
  horPass.xoffsets[1] = 0.0
  horPass.yoffsets[1] = 0.0
  horPass.xoffsets[2] = 0.0
  horPass.yoffsets[2] = pixh

  horPass.weights[0] = 0.25
  horPass.weights[1] = 0.5
  horPass.weights[2] = 0.25
  vertPass.weights[0] = 0.25
  vertPass.weights[1] = 0.5
  vertPass.weights[2] = 0.25

  ret vertPass
end
*/

func FilterEffect* makeGlowFilter(int offsetSpan)
  offsetCount := 2 * offsetSpan + 1

  glowShader := makeFilterShader offsetCount
  horPass := new FilterEffect offsetCount glowShader nullptr(FilterEffect)
  vertPass := new FilterEffect offsetCount glowShader horPass

  pixw := 1.0 / toFloat(windowWidth)
  pixh := 1.0 / toFloat(windowHeight)

  for i 1 (offsetSpan+1)
    s := toFloat i
    h := offsetSpan + i
    l := offsetSpan - i

    printFloat horPass.xoffsets[0]
    horPass.xoffsets[l] = float:neg(pixw * s)
    horPass.xoffsets[h] = pixw * s
    horPass.yoffsets[l] = 0.0
    horPass.yoffsets[h] = 0.0

    vertPass.xoffsets[l] = 0.0
    vertPass.xoffsets[h] = 0.0
    vertPass.yoffsets[l] = float:neg(pixh * s)
    vertPass.yoffsets[h] = pixh * s

    o := toFloat offsetSpan
    d := toFloat i
    w := 1.0 / (sqrtf(2.0 * math:pi) * o) * powf(math:e, float:neg (d * d / (2.0 * o * o)))
    horPass.weights[l] = w
    horPass.weights[h] = w
    vertPass.weights[l] = w
    vertPass.weights[h] = w
  end
  o2 := toFloat offsetSpan
  d2 := 0.0
  horPass.weights[offsetSpan] = 1.0 / (sqrtf(2.0 * math:pi) * o2) * powf(math:e, float:neg (d2 * d2 / (2.0 * o2 * o2)))
  vertPass.weights[offsetSpan] = horPass.weights[offsetSpan]
  horPass.xoffsets[offsetSpan] = 0.0
  horPass.yoffsets[offsetSpan] = 0.0
  vertPass.xoffsets[offsetSpan] = 0.0
  vertPass.yoffsets[offsetSpan] = 0.0

  weightSum := 0.0
  for wi 0 offsetCount
    weightSum = weightSum + horPass.weights[wi]
  end

  printsf "weightSum = " weightSum
  println()

  weightSumInv := 1.0 / weightSum
  weightSum = 0.0
  for wi2 0 offsetCount
    horPass.weights[wi2] = horPass.weights[wi2] * weightSumInv
    vertPass.weights[wi2] = vertPass.weights[wi2] * weightSumInv
    weightSum = weightSum + horPass.weights[wi2]
    printString " w["
    printInt wi2
    printString "] = "
    printFloat horPass.weights[wi2]
    println()
  end

  printsf "new weightSum = " weightSum
  println()

  for i2 0 offsetCount
    printsi "i = " i2
    printString ", (x1,y1) = "
    printFloat( horPass.xoffsets[i2] * pixw )
    printString ","
    printFloat( horPass.yoffsets[i2] * pixh )
    printString ", (x2,y2) = "
    printFloat( vertPass.xoffsets[i2] * pixw )
    printString ","
    printFloat( vertPass.yoffsets[i2] * pixh )
    println()
  end

  ret vertPass
end

//------------------------------------------------------------------------------

macro tracing:instrument code
  var ast* instrumentedCode ast:fromString("seq")

  forEachAstChild expr code
    ast:addChild instrumentedCode ${printlnString "=> entering"}
    ast:addChild instrumentedCode ${ast:print $${#expr} 0}
    ast:addChild instrumentedCode expr
    ast:addChild instrumentedCode ${printlnString "<= leaving"}
  end

  ret instrumentedCode
end

func bool keyDown(GLint key)
  ret(glfwGetKey key == GL_TRUE)
end

// macro insertForEach args...
//   if2 (args.childCount == 0) then
//     ret ${error "Expecting arguments: args... templateCode" ${insertForEach args}}
//   end
// 
//   template := ast:child(args, args.childCount - 1)
//   nodes := seqAst()
//   for i 0 (args.childCount - 1)
//     ast:addChild nodes ast:child(args, i)
//   end
// 
//   forEachAstChild node nodes
//     code := ast:clone template
//     ast:replaceId code "ID"
//   end
// end

type FramebufferPtr Framebuffer*
defineListType FramebufferPtr

func Framebuffer* makeColorRenderTarget2(int width, int height)
  target := new Framebuffer width height
  Framebuffer:attachColorTexture target
  Framebuffer:create target
  ret target
end

func Framebuffer** makeMipmapRenderTargets(int width, int height, int levels)
  targets := malloc Framebuffer* levels

  w := width
  h := height
  for i 0 levels
    targets[i] = makeColorRenderTarget2(w, h)
    w = w/2
    h = h/2
  end

  ret targets
end

func void deleteRenderTargetArray(Framebuffer** targets, int count)
  for i 0 count
    Framebuffer:delete targets[i]
    delete targets[i]
  end
end

// macro xstruct name fields
//   decl := ast:fromString name.id
//   printerImpl := seqAst()
// 
//   forEachAstChild field fields
//     type := ast:child field 0
//     name := ast:child field 1
//     ast:addChild decl ${#type #name}
//     ast:addChild printerImpl ${print
//   end
// 
//   printer := ${
//     func void #printerName(#name* this)
//       #printerImpl
//     end
//   end}
// 
//   ret ${
//     #decl
//     #printer
//   end}
// end

struct TextureInfo
  int width
  int height
  GLenum magFilter
  GLenum minFilter
  GLenum wrapS
  GLenum wrapT
end

func void TextureInfo:init(TextureInfo* this, GLenum texture)
  glBindTexture2D texture
  glGetTexParameteriv GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER &(this.magFilter)
  glGetTexParameteriv GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER &(this.minFilter)
  glGetTexParameteriv GL_TEXTURE_2D GL_TEXTURE_WRAP_S &(this.wrapS)
  glGetTexParameteriv GL_TEXTURE_2D GL_TEXTURE_WRAP_T &(this.wrapT)

  glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_WIDTH &(this.width)
  glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_HEIGHT &(this.height)

  glBindTexture2D 0
end

//------------------------------------------------------------------------------
// renderer information + caps

struct RendererInfo
  cstring name
  cstring version
  cstring vendor
end

func void RendererInfo:init(RendererInfo* this)
  this.name = glGetString GL_RENDERER
  this.version = glGetString GL_VERSION
  this.vendor = glGetString GL_VENDOR
end

func void RendererInfo:print(RendererInfo* this)
  printString "OpenGL renderer: "
  printString this.name
  println()
  printString "       version:  "
  printString this.version
  println()
  printString "       vendor:   "
  printString this.vendor
  println()
end

func int main()
  init()

  rendererInfo := new RendererInfo
  RendererInfo:print rendererInfo
  dealloc rendererInfo

  // tracing:instrument
  seq
    glfwSetMousePosCallback (cast void* &onMouseMove)
    glfwSetWindowSizeCallback (cast void* &onWindowResize)
    glfwSetKeyCallback (cast void* &onKey)

    cam := new SpaceballCamera
    cam.distance = 100.0f

    field := new Field3D (toInt sideLengthf)
    mballs := new Metaballs 50

    glowFilter := makeGlowFilter(5)
    glowSteps := 4
    renderTargetsA := nullptr Framebuffer*
    renderTargetsB := nullptr Framebuffer*

    template deleteRenderTargets
      deleteRenderTargetArray renderTargetsA glowSteps
      deleteRenderTargetArray renderTargetsB glowSteps
    end

    template createRenderTargets
      renderTargetsA = makeMipmapRenderTargets windowWidth windowHeight glowSteps
      renderTargetsB = makeMipmapRenderTargets windowWidth windowHeight glowSteps
    end

    createRenderTargets

    glMatrixMode GL_PROJECTION
    glLoadIdentity()
    aspect := int:toDouble(windowWidth) /_d int:toDouble windowHeight
    gluPerspective 90.0d aspect 1.0d 200.0d

    glEnable GL_BLEND
    glBlendFunc GL_ONE GL_ONE_MINUS_SRC_ALPHA

    glEnable GL_DEPTH_TEST
    glDepthFunc GL_LEQUAL

    glPointSize 1.0

    mainloop
      if2 resizeDirty then
        deleteRenderTargets
        createRenderTargets

        resizeDirty = false
      end

      if2 (abs mouseXDelta > abs mouseYDelta) then
        mouseYDelta = 0
      else
        mouseXDelta = 0
      end
      cam.longitude = cam.longitude + toFloat(mouseXDelta)
      cam.latitude = cam.latitude + toFloat(mouseYDelta)
      SpaceballCamera:restrictParams cam
      mouseXDelta = 0
      mouseYDelta = 0

      if2 (time - startTime > 1.0) then
        Metaballs:update mballs frameDuration
        Metaballs:applyToField mballs field
      end

      sideLength := 0
      scale := 0.0

      template renderScene
        glMatrixMode GL_MODELVIEW
        glLoadIdentity()
        SpaceballCamera:applyToGL cam

        drawCoordSys 8.0

        saveTransforms
          glTranslatef 0. 50. 0.
          glutSolidTeapot 10.0d
          // glutSolidSphere 10.0d 30 30
        end

        saveTransforms
          sideLength = field.sideLength
          scale = 100.0 / toFloat(sideLength)
          glScalef scale scale scale

          Field3D:show field
          Metaballs:show mballs
        end
      end

      glClearColor 0.0 0.0 0.0 1.0
      glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

      // if2 keyDown(GLFW_KEY_LSHIFT) then
      //   renderScene
      // end

      renderToTarget renderTargetsA[0]
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        // renderScene
      end
      // Framebuffer:makeColorTexture renderTargetsA[0]

      pixelScale := 1.0

      unfilteredTexture := renderTargetsB[0]

      renderToTarget unfilteredTexture
        glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        renderScene
      end

      glUseProgram glowFilter.shader
      for targetNum 1 glowSteps
        renderToTarget renderTargetsA[targetNum]
          glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
          // glBindTexture2D renderTargetsB[targetNum - 1]*.colorTexture
          glBindTexture2D unfilteredTexture.colorTexture
          FilterEffect:bind glowFilter
          gl:uniform2f glowFilter.shader "pixSize" pixelScale pixelScale
          gl:uniform1f glowFilter.shader "factor" 0.5
          drawFullscreenQuad()
        end

        renderToTarget renderTargetsB[targetNum]
          glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
          glBindTexture2D renderTargetsA[targetNum]*.colorTexture
          FilterEffect:bind glowFilter.next
          gl:uniform2f glowFilter.shader "pixSize" pixelScale pixelScale
          gl:uniform1f glowFilter.shader "factor" 1.0
          drawFullscreenQuad()
        end

        pixelScale = pixelScale * 2.0
      end

      glUseProgram 0
      glViewport 0 0 windowWidth windowHeight
      glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
      saveAttribs
        glEnable GL_BLEND
        glBlendFunc GL_ONE GL_ONE
        glDisable GL_DEPTH_TEST
        glEnable GL_TEXTURE_2D

        if2 keyDown(GLFW_KEY_LSHIFT) then
          glBindTexture2D renderTargetsB[0]*.colorTexture
          drawFullscreenQuad()
        else
          for tn2 0 glowSteps
            glBindTexture2D renderTargetsB[tn2]*.colorTexture
            drawFullscreenQuad()
          end
        end
      end

      if2 keyDown(GLFW_KEY_LALT) then
        glClear (int:or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)
        showTarget := int:clamp 0 (2 * glowSteps - 1) debugNum
        debugNum = showTarget
        assert (showTarget >= 0)
        assert (showTarget < glowSteps * 2)
        saveTransforms
          makeGLIdentityTransforms
          draw2dOrientationGrid()
          if2 (int:mod showTarget 2 == 1) then
            showTextureAt renderTargetsB[debugNum / 2]*.colorTexture -1.0 -1.0 2.0 2.0
          else
            showTextureAt renderTargetsA[debugNum / 2]*.colorTexture -1.0 -1.0 2.0 2.0
          end

          glColor3f 1. 1. 1.
          saveAttribs
            glqtPrintfAt -0.8 0.8 0.0 0.01 int:toCString(showTarget / 2)
            targetName := "A"
            if2 (int:mod showTarget 2 == 1) then
              targetName = "B"
            end
            glqtPrintfAt -1.0 0.8 0.0 0.01 targetName
          end
        end
      end

      // glClearColor 0.0 0.0 0.0 1.0
      // glClear (int:or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)
      // saveTransforms
      //   saveAttribs
      //     makeGLIdentityTransforms
      //     draw2dOrientationGrid()
      //     scale2 := 1.0 / toFloat(glowSteps)
      //     glScalef scale2 scale2 1.0
      //     glTranslatef (1.0 - toFloat glowSteps) 0. 0.
      //     glEnable GL_TEXTURE_2D
      //     glDisable GL_DEPTH_TEST
      //     glColor4f 1. 1. 1. 1.
      //     glTranslatef 0.0 -1.0 0.0
      //     for targetnumx 0 glowSteps
      //       glTranslatef 0.0 2.0 0.0
      //       glBindTexture2D renderTargetsA[targetnumx]*.colorTexture
      //       renderQuad 0.9
      //       glBindTexture2D 0
      //       renderQuadOutline 0.9
      // 
      //       glTranslatef 0.0 -2.0 0.0
      //       glBindTexture2D renderTargetsB[targetnumx]*.colorTexture
      //       renderQuad 0.9
      //       glBindTexture2D 0
      //       renderQuadOutline 0.9
      // 
      //       glTranslatef 2.0 0.0 0.0
      //     end
      //     glBindTexture2D 0
      //   end
      // end
    end

    drawPausedOverlay()
    glfwSwapBuffers()
    glfwPollEvents()

    println()
    printFloat (endTime - startTime)
    printString "s, "
    printInt frameNum
    printString " frames, "
    printFloat (toFloat frameNum / (endTime - startTime))
    printlnString " fps"

    glDeleteShader glowFilter.shader
    delete field
    delete mballs

    FilterEffect:delete glowFilter
    deleteRenderTargets
  end

  ret 0
end

// func void test()
//   runMain()
// end

