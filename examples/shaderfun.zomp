/**
 * Experimental translation of zomp expressions to GLSL
 */

require "libs/opengl20.zomp"
require "libs/glfw.zomp"
require "libs/glutils.zomp"
require "libs/glut.zomp"
require "libs/quicktext.zomp"

require "libs/libcee.zomp"

//------------------------------------------------------------------------------
/// shader compilation ///

// func cstring Shader:parseExpr()
//   template nthId n
//     getField(ast:child(code, #n), id)
//   end
//   template matches pattern
//     ast:matchesShape(code, ${#pattern})
//   end
// 
//   if matches(_ _(_...) __)
//     ret (nthId 0 ++ nthId 1 ++ "("
//   end
// 
//   ret "unknown nested expression\n"
// end

func cstring Shader:parseTLExpr(ast* code)
  template nthId n
    getField(ast:child(code, #n), id)
  end

  template matches pattern
    ast:matchesShape(code, ${#pattern})
  end

  if matches(varying _ _)
    ret ("varying " ++ nthId 1 ++ " " ++ nthId 2 ++ "\n")
  elseif matches(uniform _ _)
    ret ("uniform " ++ nthId 1 ++ " " ++ nthId 2 ++ "\n")
  elseif matches(void main() __)
    ret "main function"
  elseif matches(_ _(_...) __)
    funcName := ast:child ast:child(code, 1) 0
    ret ("function " ++ funcName.id ++ " : " ++ nthId 0 ++ "\n")
  end

  ret "unknow expression\n"
end

func cstring Shader:parse(ast* code)
  source := ""

  forEachAstChild child code
    newSource := Shader:parseTLExpr(child)
    source = source ++ newSource
  end

  ret source
end

macro shaderVar varName code
  printlnString "Creating shader from"
  ast:print code 0
  ret ${#varName := Shader:parse ${#code}}
end

// testf
//   shaderVar vertexSource
//     varying float x
//     uniform vec3 normal
// 
//     vec3 invert(vec3 v)
//       return minus(v)
//     end
// 
//     void main()
//       gl_Vertex = ftransform()
//     end
//   end
// 
//   printHLine '-' 40
//   printlnString vertexSource
//   printHLine '-' 40
// end


//------------------------------------------------------------------------------
/// utils ///

var int windowWidth 1280
var int windowHeight 720
var bool initCalled false

func void init()
  if bool:not(initCalled)
    glfwInit()
    glfwOpenWindowHint GLFW_FSAA_SAMPLES 4
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glewInit()
    times 2 glfwPollEvents()

    printString "Initialized"
    println()

    initCalled = true
  else
    printString "Already initialized"
    println()
  end
end

func void reopenWindow()
  glfwCloseWindow()
  glfwOpenWindowHint GLFW_FSAA_SAMPLES 4
  glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
  glfwSetWindowPos 100 1400
  ret void
end

// avoid writing it over and over, part of utils lib
macro mainloop body...
  ret ${
    time := 0.0
    lastTime := 0.0
    frameDuration := 0.0
    frameNum := 0
    startTime := double:toFloat glfwGetTime()
    running := true

    glfwSetWindowTitle "Zomp"

    while running
      lastTime = time
      time = double:toFloat glfwGetTime()
      frameDuration = time -_f lastTime

      #body

      glfwSwapBuffers()
      glfwPollEvents()
      running = bool:not isPressed(GLFW_KEY_ESC)
      ++frameNum
    end

    endTime := double:toFloat glfwGetTime()

    println()
    printFloat (endTime -_f startTime)
    printString "s, "
    printInt frameNum
    printString " frames, "
    printFloat (int:toFloat frameNum /_f (endTime -_f startTime))
    printlnString " fps"

    drawPausedOverlay()
    glfwSetWindowTitle "-paused-"
    glfwSwapBuffers()
    glfwSleep (1.0d /_d 10.0d)
    glfwPollEvents()
  end}
end

macro assert code
  ret ${if (bool:not #code)
    printlnString "error: Assertion failed"
    ast:print ${#code} 0
  end}
end

//------------------------------------------------------------------------------
// Section main

func int main()
  init()

  angle := 0.0

  glowShader := createShader /*varying*/"
  #version 120
  varying vec2 texCoord;
  varying vec3 color;
  " /*vertex*/"
  void main(void) {
    gl_Position = ftransform();
    texCoord = (gl_MultiTexCoord0.xy - vec2(0.5, 0.5)) * 2.0;
    color = gl_Color.rgb;
    }
  " /*fragment*/"
  const float innerRing = 0.7;
  const float alpha = 0.4;
  const float glowStrength = min(alpha, 0.5);

  void main(void) {
    float d = texCoord.x * texCoord.x + texCoord.y * texCoord.y;
    if( d < 0.25 * innerRing && d > 0.15 * innerRing && -texCoord.x > texCoord.y ) {
      gl_FragColor = vec4(color, 1.0);
    } else if( d < innerRing ) {
      gl_FragColor = vec4(color * alpha, alpha);
    } else if( d < 1.0 ) {
      float glow = (1.0 - smoothstep(innerRing, 1.0, d)) * glowStrength;
      gl_FragColor = vec4(color * glow, 0.0);
    } else {
      gl_FragColor = vec4(0.0);
      }
    }"
  assert (glowShader != 0)

  hemiShader := createShader /*varying*/"
  varying vec3 normal;
  varying vec4 color;
  "/*vertex*/"
  void main(void) {
    gl_Position = ftransform();
    normal = gl_NormalMatrix * gl_Normal;
    color = gl_Color;
    }
  "/*fragment*/"
  void main(void) {
    float d = dot(normal, vec3(0.,1.,0.));
    d = 0.5 * d + 0.5;
    gl_FragColor = vec4(d,d,d,1.0);
    gl_FragColor = mix(vec4(0.,0.5,0.5,1.0), vec4(0.0,0.0,0.0,1.0), d);
    }"
  assert (hemiShader != 0)

  glEnable GL_BLEND
  glBlendFunc GL_ONE GL_ONE_MINUS_SRC_ALPHA
  
  glEnable GL_DEPTH_TEST
  glDepthFunc GL_LEQUAL
  
  mainloop
    angle = angle +_f 32.0 *_f frameDuration
  
    glClearColor 0. 0.125 0.25 0.0
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
  
    glMatrixMode GL_PROJECTION
    glLoadIdentity()
    aspect := int:toDouble windowWidth /_d int:toDouble windowHeight
    gluPerspective( 90.0d, aspect, 1.0d, 100.0d )
  
    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
  
    saveTransforms
      glTranslatef 0. -4. -20.0
      glRotatef angle 0. 1. 0.
      drawCoordSys 8.0
      glColor3f 0.0 0.5 0.5
      renderXZQuad 8.0
      glTranslatef 0. (2.0 + 1.) 0.
      glColor3f 1.0 0.5 0.0
      glUseProgram hemiShader
      glutSolidTeapot 4.0d
    end
  
    glUseProgram glowShader
  
    saveAttribs
      glDepthMask GL_FALSE
  
      saveTransforms
        glTranslatef 2.0 -2.0 (-10.0 -_f 1.0)
        glColor4f 0.0 0.5 0.0 1.0
        renderQuad 2.0
      end
  
      saveTransforms
        glTranslatef 4. 0. -10.0
        glColor4f 1.0 0.25 0.0 1.0
        renderQuad 4.0
  
        glUseProgram 0
        glColor4f 1. 1. 1. 1.
        // glqtPrintfAt 0.0d 0.0d 0.0d (1.0d /_d 10.0d) "hello!"
      end
  
    end
  
    glUseProgram 0
  
  end
  
  glDeleteShader glowShader
  glDeleteShader hemiShader

  ret 0
end

