
* Desired syntax

This section lists use cases. Each one should demonstrate how the
language might be used. Should guide the syntax related decisions.

** for loop

   for i = 10 to 100
     print i

   for( list* current = begin(); current != nullptr; current = current->next )
     current->doStuff()

** if/then/else

   if i > 10 then
     handleI()
   else if i < 5 then
     small()
   else
     error()

** Classes

   class Point
     attrib x = 0
     attrib y = x

     void print(Stream s)
       s.print "(#{x}, #{y})"

   class ColoredPoint extends Point, implements Paintable
     attrib color = red

     void print(Stream s)
       s.setColor color
       super.print

** Keyword arguments

   select( from: list, where: pred, sortBy: desc )

   select from: list where: pred sortBy: desc

** sql/select

   select x, y from table where x > y
   
** Smalltalk style?

   tree
     onLeaf: print leaf
     onBranch: print branch

   newline, same indent => insert ;
   newline, more indent => insert (
   newline, less indent => insert ) (appropriately often)
   newline, end         => insert );

   if: a > b * c then: do some operation; call(a, b, c); else: more(stuff); happening(here)

   if: a > b then:
     do some operation
     call(a, b, c)
   else:
     more(stuff)
     happening here()
   end

   if: a > b then:
     if: x == 0 then:
       print "nooo"
       abort()
   end

   if: a > b then: (if: x == 0 then: print "nooo"; abort())

   type: Foo = int
   type: Keyframe = (float x, y, z; Time time)
   type: Keyframe
     float x, y, z
     Time time
   end

   class: Foo
     int bar
     int baz

     fn void blah()
       print "blaah"
     end
   end Foo

   switch: e (case: 1 (print "one") case: 2 (print "two") default: (print "many"))

   switch: expression
     case: 1
       print "one"
     case 2:
       print "two"
     default:
       print "many"
   end

* DONE Misc

** DONE (foobar) is not parsed different from foobar
   CLOSED: [2008-02-17 Sun 01:23]
   See 3rd paragraph

   Both will be parsed as { id = "foobar"; args = [] }
   This means calling a function with 0 args can't be distinguished from the function as a value

   foo bar <=> (op() foo bar)
   foo <=> (foo)

   Require all function calls to follow the form (call func args*)
   Then transform (op() f rest*) into (call f rest*) if f resolves to a function (pointer)
   and transform into (jux f rest*) otherwise. Sequences are transformed into (seq a b ...)

*** Conflicts

   This will conflict with sequences:

   func void foo ()
     f
     1
   end

   would be (func void foo () (jux f 1))

   Resolve using {}?

   func void foo {
     f
     1
   }

   <=> (func void foo () {seq f 1})

   Resolved:
   a b <=> (jux a b)

   while

   parent
     a
     b
   <=> (jux parent (seq a b))

* DONE Significant indentation

** Trivial case
   
func int foo a b c
  print a
  print b
  print c

// means the following s-expression:
(func int foo a b c (
  (print a)
  (print b)
  (print c) ))
  
** DONE expressions spanning multiple rows cause problems

*** DONE Problem: we want constructs which span multiple lines (if/then/else, ...)

func void foo(a, b, c)
  some
  impl

But:

if (a > b)
  print "yes"
else
  print "no"
end if

Parsing is ambigous in this case

*** DONE Use a special marker to begin multi-line expressions?
    CLOSED: [2008-01-28 Mon 02:38]

Solution: rejected. Use end markers instead, see below

if: foo
  print 1
  print 2
else
  print 0
end if

*** DONE require terminators for all multi-line expressions?
    CLOSED: [2008-01-28 Mon 02:38]

Solution: accepted.

if a > b
  print 1
else
  print 2
end if // 'if' cannot be emitted here

let foo =
  some complex(calculation)
end


func foo(int a, int b) -> int =
  let foo = 10
  let bar =
    some( long line, in here )
  end

  more code
end func

*** DONE Use extra indentation?

Solution: rejected. Is cumbersome and too far away from other languages

if(a > b)
  print 1
 else
  print 2

or

if( a > b )
  then
    print 1
  else
    print 2

*** DONE Change AST?
    CLOSED: [2008-01-16 Wed 01:31]

Solution: No. Requires to much changes in core language, unclear implications on the toplevel etc.

(foo a)
(bar b)
...
<=> (foo a (bar b ...))

(oneOfThree a)
(twoOfThree b)
(threeOfThree c)
<=> (oneOfThree a (twoOfThree b (threeOfThree c ()))) 

(let x 10)
(use x)
...
<=> (let x 10 (use x ...))

*** DONE have some notation to get rid of end-of-block marker?
Resolved: yes, like this:

    let: foo =
      some complex(calculation)

**** Where is this needed? What would the advantage be?

     Getting the syntax more lightweight, especially on expression
     which are only a few lines long
     

*** DONE How to split a line into multiple lines?
    Resolved: allow backslash at end of line or at beginning of next line.
    When at beginning of next line, ignore any whitespace in front of \


this is some freaking\
long line

Needs to be indented to same level.

this is some freaking
\long line

May be indented, everything in front of \ is ignored (useful for strings)

let longString =
  "this be some kewl multi-line text
  \which has a second line
  \and is indented nicely while not
  \having any whitespace at the beginning
  \of it's lines"

** DONE How to handle operators at the end of a line?
Solution: just add braces "as usual"

let foo =
    some complex calculation

(let foo = (
     (some complex calculation)
     ))

* TODO operators

(a + b) <=> (op+ a b)

** TODO which operators to support?


*** DONE all common math symbols
    Solution: accepted. Reasons are obvious ;)

+,-,*,/
a ** b <=> power
*** TODO !/? postfix operators

    Motivation:

    - Regular expressions/grammars: T ::= "let" "rec"? "=" expr

    - Ruby and scheme allow ! and ? in identifiers to get names like
    color.red? or string.replace!

    Support both as postfix operators whose default definition will be
    macros turning their argument into isRed / doReplace. Then ruby
    like variable names can be faked in a clean way while it is still
    possible to use the operators for pattern matching, grammar
    specification etc.
    
*** TODO (anti)quoting operator

    ` and # don't work well with indent based syntax

**** Use ${} and #{}?

    ${foo bar} <=> (quote (opjux foo bar))
    ${class Blah
        member x
        member y
      end}
    <=> 
    (quote (opjux class Blah (opseq 
      (opjux member x)
      (opjux member y) )))

   Extra indentation for better alignment?
   ${foo
     child
   end}

   vs.

   ${foo
       child
     end}

   #foo works symmetrically

   Also allow string antiquoting like "The successor of x is #{x + 1}"
**** TODO fix this to get rid of {}

     $x, $(10 + #foo), ... should be possible

     use $: for indentation

     ret $:
       foo #bar
       baz aldrin
     end // or "end $"

*** TODO is ascii enough or should zomp use unicode (more operators etc.)?
    special unicode operators, greek alphabet etc.
    nice to have, can be added later
    until then mandate utf-8 encoding

*** DONE Parentheses?

    () for grouping / flexible
    {} for s-expressions
    <> for m-expressions
*** TODO add special syntax for s-expressions
    (foo bar) is turned into (opjux foo bar)

    This is bad for matching against syntax patterns:
    ast:matchesShape(foo, $(opjux foo bar)) not possible

    Possibilities:
    (|foo bar)
    (|foo (bar baz)) // only require special symbol once
    (.foo bar) // might conflict if we allow .xx for arbitrary infix operators
    (>foo bar<)
    (>foo (bar baz)<)
    (>foo bar)
    (>foo (bar baz))
    <(foo baz) // conflict with prefix op, etc.?
    (sexp (foo bar))
    sexpr(foo bar)

*** TODO Regular expressions?

    Support /foo/ as a regular expression?

    Could an ambiguity with division arise?
    a/b/c -> division
    /a/ -> regexp

    Use string literal postfixes?
    "/foo/"re
    "/foo/bar/"re

    Support / postfix and prefix operator, use (preop/ (postop/ regexp)) as regexp?

*** DONE Boolean operators

    !, &, |
    &&, ||

    xor? ^?

*** TODO ' as operator for implicit conversions like?
    append string1 'char => append string1 (toString char)?

    i + 'f -> i + toInt f ?
    i +' f -> i + toInt f ?

*** DONE custom operators?
    CLOSED: [2008-01-28 Mon 02:58]

Solution: rejected. Makes parsing and reading source harder because the whole context must be known

Allow definition of new operators by the programmer?

*** DONE _id for alternatives (subscript like)
    CLOSED: [2008-01-28 Mon 02:58]

Solution: accepted. Extending the set of operators can be useful in many cases (e.g. *_dot, *_cross for vector dot and cross product etc.)

 +_f, *_dot

*** DONE any combination?
    CLOSED: [2008-01-28 Mon 03:04]

Problem: Will cause conflicts with builtin operators. Consider >> and >* etc. Allowing any operator combination also means no new bultin operators with different precendence can be introduced. Also operator postfixes have similar features without the drawbacks.

++, +-, +*, +'
// has precedence like the first component (above all have same precedence as +)
  // conflicts with expectations of c programmers
  // odd/inconvenient precedences: -> has precedence like '-'
// or: all non-standard ops have a default precedence?
  // user needs to know standard operators
  // adding operators to the language later on causes problems

*** DONE latex style operators?

Solution: maybe later

\sum, \concat

*** DONE CAPS operators?

Solution: rejected. Constants are often spelled in CAPS (OpenGL enums etc.) and interpreting all CAPS identifiers as operators would cause conflicts here

SUM CONCAT
Render them using unicode characters when available?

Might conflict with names of user identifiers like vars and functions. Would require handling all CAPS identifiers as operators. Conflicts with common practice of naming constants in CAPS (like OpenGL does).

** DONE require white space between operators and symbols?
   CLOSED: [2008-01-28 Mon 03:09] 

Solution: rejected. There is no need for it and it interferes with coding styles unnecessarily.
However some operators require the lack of whitespace on one side:
float* vs. *ptr vs. a * b aka. a*b

** DONE Consider whitespace when parsing?
   Solution: is important to distinguish prefix/postfix/infix operators
   
   // pointers
   foo* blah <=> (jux (postfixop* foo) blah)

   // multiplication
   foo * blah
   foo*blah
   <=> (op* foo blah)

   // deref
   foo *blah 
   <=> 
   (jux foo (prefixop* blah))

   Rule of thumb: allow to resolve disambiguities by whitespace
   if parens would be nesseccary otherwise

** DONE Special support for first id of expression?
   Rejected, adds irregularity and surprises to syntax
   Was Rejected, not needed due to jux with lowest priority

   let foo = bar <=> (op= (let foo) bar)

   Allow some syntax for..?
   let foo = bar <=> (let (op= foo bar))

*** DONE mandatory parentheses on method calls?
    Is it okay to require parentheses on method calls when used as arguments of operators?
    Resolved: it is ok. C-style notation is used for function calls
    and m-exprs for structure defining macros (class, for, ...)

if a > 10 && b < 20 then
<=>
(jux if (op&& (op> a 10) (op< b 20)) then)

3 * sin x <=> (jux (op* 3 sin) x)
3 * sin(x) <=> (op* 3 (op() sin x))

let x + y = add x y
<=>
(jux let (op= (op+ x y) add) x y)

let x + y = add(x, y)
(jux (op= (op+ x y) (op() call x y)))

let x + y =
  add x y
<=>
(jux (op= (op+ x y) (seq (op() add x y))))

*** DONE juxtaposition has highest or lowest priority?
    Resolved: hightes priority
    want to support "sin x + 3" instead of requiring "(sin x) + 3" or "sin(x) + 3"

**** Was Resolved: lowest priority

     foo a + bar b
     (op+ (foo a) (bar b))

     print 1 + 2
     (op+ (print 1) 2)
*** DONE Where is this needed?
    Nowhere due to jux having lowest priority

let foo = bar
let a + b = baz

func x + y : int = ...

*** DONE Solve by lisp-style set/=?
    Rejected: see above

macroOverload (op= l r) ...
macroOverload (op= (let $foo) $bar) ...

*** DONE Use a postfix for different parsing?
    Rejected: see above
    
let! x + y = plus( x, y ) <=> (let (op= (op+ x y) (plus x y)))

or

let: x + y = plus( x, y )

Can also be used in nested expressions.

(foreach i in foo (print: i + 1))

*** DONE What about nested expressions?
See above

(foreach (print 10 + 20) ...) <=>
(foreach (print (op+ 10 20)) ...) vs. (foreach (op+ (print 10) 20))

*** TODO Generalize this?

Support Smalltalk style keyword arguments? (in sexprs?)

if: a > 10 then: print yay else: print nay

*** DONE Always give first id extra priority?
Rejected: see list of problems below

    a b + c => (a (op+ b c))
    var x = 10 -> (var (op= x 10)

**** Will this cause problems?

     Requires using parentheses when it is not needed.

     sqrt(5) + sqrt 20

**** Might result in unexpected ASTs

     sqr 3 + 4 <=> (sqr (op+ 3 4))

**** [#A] Results in different behaviour of left and right expr on operators

     sqrt 10 * 2 <=> (sqrt (op* 10 2))

     but

     10 * sqrt 2 <=> (op* 10 (sqrt 2))

*** DONE Reuse foo: notation from significant indent?
     CLOSED: [2008-01-28 Mon 02:47]

Solution: rejected. foo: notation will not be used for multi line iexprs so this question does not arise anymore

let: will not start a multi-line block if next line is not indented?

let: foo = 10
next line
<=>
(let (op= foo 10))
(next line)

problem: ambigous

first: fo bar
second
third
end first

Require

** DONE Operators at the beginning/end of expressions?
   CLOSED: [2008-01-28 Mon 03:11]

   Solution: maybe later. The feature can be added later without causing any conflicts

   (10 +)
   (+ 10)

   Syntax error?
   (op+ 10)?
   (+ 10)?
   how to differentiate?

** DONE dot notation
   Support it using op. operator

// equivalent
2.pow 3
pow 2 3

1.upto 10 codeBlock

*** what may be written left and right of dot?

(getPrinter(console)).print(10)

foo.(*funcPtr)(a, b c)

foo.bar.baz(x, y, z)

*** what precedence?

print foo.size 10 <=> (print foo.size 10) | (print (foo.size 10))

Possible solution:
print foo.size() 10 <=> (print (foo.size) 10)
print foo.size 10 <=> (print foo.size 10)

* DONE s-expressions versus m-expressions

m(expr, es, sion)
(s expr es sion)

** DONE how to allow both?
Solution: points below

print( 1+2, pow(2, 3) )
print( 1+2, 2.pow 3 )

if (a > 10) then print("biggy")

** DONE where do they conflict?
foo bar ( 3 + 4 )
(foo (bar (+ 3 4)))
(foo bar (+ 3 4))

(foo bar (x) y)

in general:
(expr+ id (id) expr*)

** DONE significant white space?
Solution: Use this to emit warnings

foreach i in subdirs(pwd)
(foreach i in (subdirs pwd)

foreach i in subdirs (pwd)
(foreach i in subdirs (pwd))

add( "10".parseIntBase 20, pow(1, 3+2) )
"10".parseIntBase(20).add(pow(1, 3+2))
(add ("10".parseIntBase 20) (pow 1 (3+2)) )


** DONE different parenthesis?

**** DONE <Angle brackets>
Solution: don't use

Bad, conflicts with a < b, might also be used for templates

<foo arg> <=> foo(arg)

<foo a b c> <=> <foo a b c /foo> <=> foo(a, b, c)

if <a > b> then
  ...


**** DONE {curly braces}
Solution: use. It's nice for C programmers, doesn't hurt etc.
foo {a b} <=> (foo (a b))

**** TODO Use mexp<angle, braces>?

Support angle brackets which are always parsed as m-expressions to complement the always-sexpr-curly-braces.

Can be used for generics (syntax similar to C++ templates)

class Foo<T1, T2>
  method
end

***** TODO How to resolve conflict with </> (less/greater) operators?

> is interpreted as closing brace after an opening one, else as less
< is interpreted as opening brace if a > follows, else as greater

** DONE Special handling for (singleId)
   Solution: below

   Non-ambigous cases:

   foo a b <=> (foo a b)
   foo(a, b) <=> (foo a b)

   Ambiguous cases:

   foo(arg) <=> (foo arg) <=> foo arg

   foo bar(arg) <=> (foo (bar arg))

   foo (a) b <=> error
   foo(a, b) c <=> error

** DONE A grammar
Needs work: specify completely, build experimental version in menhir

list<element> ::=
list<element> ::= element list<element>

non-empty-list<element> ::= element
non-empty-list<element> ::= element non-empty-list<element>

comma-list<element> ::=
comma-list<element> ::= comma-list-nonempty<element>
comma-list-nonempty<element> ::= element
comma-list-nonempty<element> ::= element ',' comma-list-nonempty<element>

expr ::= primexpr
expr ::= mexpr
expr ::= sexpr
expr ::= opexpr
expr ::= '(' mexpr ')'
expr ::= '(' sexpr ')'
expr ::= '(' opexpr ')'

primexpr ::= id

mexpr ::= id '(' comma-list<expr> ')'

sexpr ::= id list<sexpr-arg>
sexpr-arg ::= primexpr
sexpr-arg ::= mexpr
sexpr-arg ::= '(' id non-empty-list<expr> ')'

opexpr ::= ...
factor ::= ...
sum ::= ...

**** DONE Operators
Solution: see below

foo bar (3 + 4) <=> (foo bar (+ 3 4)) | (foo (bar (+ 3 4))) ?

Resolution: no special handling:
  foo bar (3 + 4) <=> (foo (bar (+ 3 4)))
  foo bar (+ 3 4) <=> (foo bar (+ 3 4))

Prefer m-expr because sexpr can be used by (op+ a b)

  foo bar (3 + 4) <=> (foo (bar (op+ 3 4)))
  foo bar (op+ 3 4) <=> (foo bar (op+ 3 4))
  foo bar {3 + 3} <=> (foo bar (op+ 3 4))

Still possible to use infix form for sexpr using (macro id x x):
  foo bar id(3 + 4)

**** DONE what happens to parentheses explicitly controlling precedence?
Solution: is part of operator expr

print( 4 * (1+3) )



** Abandoned
*** no mixing?

Solution: see below

ok:
foo bar (baz a b c)
foo( bar, baz a b c )

not ok:
foo bar baz(a,b,c)
  (foo bar baz (op, a b c)) ?
  (foo bar (baz a b c)) ?

print a b (c)
  (print a b (c)) ?
  (print a (b c)) ?

*** might work:
sexpr ::= '('id sexpr*')'
mexpr ::= id'(' comma-delimited-list(mexprArg) ')'
mexprArg ::= mexpr | sexpr

However this will not be possible:
foreach i in subdirs(currentDir)
  block

*** <foo bar> for sexprs conflicts with </> (less/greater)
  // </foo bar/>
  // </foo bar /foo>
  // if <. a > b .>
  // if <. foo bar .foo>




* more extensions
** TODO possible template syntax
   :PROPERTIES:
   :ID:       786D599C-88BF-45D2-AF26-938FD063757F
   :END:
    func void genericprogr()

      list<!int,string>

      more alternatives:
      list(<int>) ints
      list<(int)> ints
      map<(int,string)> ints
      list[int] ints
      map[int,string] foo
      list[[int,string] ] ints
      list</int,string/>
      list<.int,string.>
      list.<int,string>.
      list<:int,string:>
      list[:int,string:]
      list(/int,string/)
      list[/int,string/]
      list!(int,string)
      list!<int,string>
      list<!int,string!>
      list<<int,string>>
      list<_int,string_>
      list(_int,string_)
      list`(int,string)
      list§int,string§
      list!int,string!
      list@(int,string)
      list$(int,string)
      list^(int,string)
    end

    more:
   func void print<Printable P>(P p) vs. print(Printable[P] p)

   func P add<Number P>(P l, P r) vs. Number[P] add(P l, P r)

   add :: Number P => (P, P)->P
   add(l, r) = ..

   func N add(N l, N r) where Number N

   func<Number N> N add(N l, N r) // schick
** TODO [#A] doch benutzerdefinierbare syntax?
   :PROPERTIES:
   :ID:       C6C18821-4C95-486D-966C-ECEE1FB59DA6
   :END:

   anfang + ende definiert durch ein token
   ende definiert durch indent level?
   tokens koennen in namespaces leben

   matches = zomp.db.sql
     SELECT foo, bar FROM WHERE foo > bar

   zomp.db.sql <<  SELECT foo, bar FROM WHERE foo > bar >>

** TODO [#A] reconsider the syntax
   :PROPERTIES:
   :ID:       EF1B4852-51F9-4619-AB4D-C5EC63F20A1A
   :END:
   explicitly state goals! :)

   idee:
   - jux has highest prio
   - comma operator
   - jux a b
     - function call if a is a function name or function ptr name
     - expand macro if a is a macro name
     - else expand macro + see if expanded a resolves to a function

   sin x + 3 cos y * 2
   =>
   (inf+
     (jux sin x)
     (inf*
       (jux 3 cos y)
       2))

   if: condition() then: ...
   if condition() then ...
   if (condition()) then ...

   for i in min() to max() do ...
   for i in (min()) to (max()) do ...
   for: i in: min() to: max() do: ...

   while x + foo() > 10 do ...
   while (x + foo() > 10) do ...
   while: x + foo() > 10 do: ...

   make even layout optional?

** TODO [#A] casting syntax
   :PROPERTIES:
   :ID:       67A5E1ED-F5BB-4BB8-926F-D248B751E1A1
   :END:

   obj.to(Printer).println("10".to int)

** TODO [#A] regexp syntax #/foo/bar/
   :PROPERTIES:
   :ID:       4FEB9911-68A8-442E-9B6A-E30CDBFA5EE1
   :END:
   #c, means use c as seperator
   for c != char, num, paren

   allow prefix for strings like
   L"foobar"
   utf8"some string with umlauts"
   re"[a-z]+"
   textVar.replace re"func ([:type:]) ([a-z]+)" "\1 \2"

** TODO [#A] type expression syntax
   :PROPERTIES:
   :ID:       6201FE0B-A81E-4FD6-82DA-95513AE47948
   :END:

   int[]*                   - pointer to int array
   int*[]                   - array to int pointers
   int, float               - pair of int and float
   float -> int             - int f(float)
   int, float -> char       - char f(int, float)
   (int,int), float -> char - char f(pair(int,int), float)

   Optional:
   [int] - list of ints
   {int} - set of ints

** TODO [#A] syntax for type definitions
   :PROPERTIES:
   :ID:       99D4EE2B-740A-47EA-AD27-EA20E42BA701
   :END:
   print(struct{ int a, b, c } pt)
   print(struct( int a, b, c) pt)
   print(struct.{ int a, b c; } pt)
   print({int a, b, c} pt)

   type foo := { int a, b, c }
   type foo is int
   type foo is { int a, b, c }
** TODO [#A] parenthesis syntax
   :PROPERTIES:
   :ID:       D1F9699B-62DB-4667-A99B-D38E8B8F0B22
   :END:
   allow any combination of \[([{\]\[.|/-=+*!?\] and inverse as parens?
   <, > only for operators, never brackets

   max := (T l -> T r) where Comparable<T>
     ...

   max :: Comparable T => T -> T -> T
   max l r
     ...

   max :: Comparable T => T, T => T
   max l r
     ...

   func T fold<Container Seq, BinOp Op>(Seq s, Op o, T init) where (T = Container:T = Op:T)

   func mult(mat4f m, vec4f v)->vec4f
   func<Comparable T> max(T l, T r)->T
   func<Comparable T> max(T l, T r)->T where Comparable<T>
   func max<Comparable T>(T l, T r)->T
   func<T> max(T l, T r)->T where Comparable<T>
   func<Seq, BinOp> fold(Seq sequence, BinOp op, T initial)->T where (T = Container:T = BinOp:T)

   func<Seq, BinOp, T> fold(Seq seqünce, BinOp op, T initial) where
     T = Seq:T, T = BinOp:T
   do
     ...

   func mult(mat4f m, vec4f v)->vec4f do
     ...
   
   func max(l, r) : Comparable T => T->T->T

   func<Comparable T> max(T l, T r) => T

   func plus<Addable T1 T2>
   plus(T1 l, T2 r) where Addable<T1,T2> => Addable<T1,T2>:ResultT

   plus<T1,T2> T1 T2 => Addable<T1,T2>:ResultT where (Addable T1 T2)
   func plus(l, r)

   some possibly syntaxes
   [| foo |]
   [/ foo, bar /]
   <( foo, bar )>
   (< foo, bar >)
   (. foo, bar .)
   (/ foo, bar /)
   </ foo, bar />
   {/ foo, bar /}
   <foo> </bar>
   <- ->
   <* *>
   <+ foo, bar +>

   :(: foo bar :):

** TODO approaches to lambdas
   :PROPERTIES:
   :ID:       CA23B71A-D9D8-495F-B844-71C5864F41E4
   :END:
*** juxtaposition to pass block as parameter-less function argument

    fn times_do(int count, void() action)

    10.times_do { print xxx }

*** syntax for lambdas

    (int x, y) => { print x; print y }

    10.times_do (int i)=>{ ... }
    10.times_do (int i){ ... }
    10.times_do {(int i); ... }
    10.times_do ^(int i){ ... }
    10.times_do ^{(int i); ... }
    10.times_do { int i => ... }

    10.times_do:
      ...
    end

    10.times_do:
      (int i)
      ...
    end

    10.times_do:
      ^(int i)
      ...
    end

    10.times_do ^(int i):
      ...
    end

    10.times_do: { |int i| ... }
    10.times_do:
      |int i|
      ...
    end

    (int x, int y) =>:
      print stuff
    end

*** more syntax

(:= negVals (map vals (fn (int (int a)) (print 1) (- a))))
(:= negVals (map vals (fn (int (int a)):
  print 1
  -a
end)))

negVals := map vals (fn int(int a) (print 1; -a))
negVals := map vals (fn int(int a):
  print 1
  -a
end)

negVals := map vals { int(int a) => print 1; -a }
negVals := map vals { int(int a) =>:
  print 1
  -a
end}

int(int a).(print 1; -a)

negVals := vals.map int(int x) { -x }
negVals := vals.map ^(int x) { -x }
negVals := vals.map ^{ x => -x }
negVals := vals.map (fn int(int a) { -x })
negVals := vals.map { int(int a); -x }
negVals := vals.map { int a |: -a }
negVals := vals.map -_1

int(int a, int b):
  print x
end

    
