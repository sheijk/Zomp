
* Overview

- C + lisp macros as anti-thesis to C++
- Goals
  - Graphics + systems programming
  - Powerful libraries
  - Macro system
  - Interactive development

[[../readme.txt]]

* Quick demo

shaderfun

* Language

** Syntax
*** Goals
**** Keywords vs growable languages
**** Close to "regular" keyword based languages
**** Also mention design alternatives?
*** Primitives
*** Operators
*** opjux, opcall
*** Significant indentation
** Base language
** Macro system
*** AST, difference to lisp
    - id because most expressions don't have list as start, simpler handling, no
      cases/match needed
    - 
*** low level, higher level as libraries
** standard libraries
*** libcee, stdio
*** std
*** std:compiler
*** std:zompsh (?)
*** unittest
    unittest:assert (10 > 20) will print both sides
*** math, ansicolors,
*** opengl, glfw, glut, anttweakbar, glutil, spaceballcam
*** mesh, assimp,
*** utils, persistence, string
*** native

* Tools

  metaballs

** Zomp shell
** eldoc
** Navigation
** Html status viewer
** C bindings
*** bindgen
*** gen_c_bindings

* Examples
  
** NOPE pipeline experiment
** build small demo scene
** extend metaballs with anttweakbar?

* Testing

** Zomp unit tests
** check_test
** OCaml unit tests

* Lessons / Next time (tm)

** Do source location and error handling right in the beginning
** Base is too close to compiler IR
** Avoid seperate representation for base language forms
** Primitive/simple base language makes boots-trapping hard
** OCaml + native code tricky
   (duplication, performance, mismatch between C and variant data types)
** Reference type better than pointers everywhere
** More light-weight syntax?
** Hygienic macro system might be useful

* Roadmap

** 0.6 - Error handling, locations
   - never loose source location info, again
   - expose proper error handling to toplevel interfaces (Compileutils)

** 0.7 - Proper language
   - modules
   - seperate compilation
   - generics + implicits
   - new macro system
   - user defined intrinsics(?)
   - base language tweaks
     - references
     - common lisp style labels
     - loop with break

** 0.8 - Development experience
   - Debugger
   - Optimization in VM
   - Redefine global types
     proper update/recreation of globals

