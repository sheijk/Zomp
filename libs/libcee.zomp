/**
 * Libraries providing a C like feel

!verify off
!syntax indent
 */

requireLibs basic_ops

///-----------------------------------------------------------------------------
/// Section: C functions (memory)
///-----------------------------------------------------------------------------

// attention, might not work on 64-bit.. :\
type size_t int
type int_t int

dfunc void* memset(void* ptr, int_t value, size_t bytes)
dfunc void* memcpy(void* destination, void* source, size_t bytes)
dfunc void* memmove(void* destination, void* source, size_t bytes)
dfunc int_t memcmp(void* ptr1, void* ptr2, size_t bytes)

func void free(void* ptr)
template dealloc ptr free(cast void* #ptr)

///-----------------------------------------------------------------------------
/// Section: Untested
///-----------------------------------------------------------------------------

/// initialize multiple fields
macro setFieldsTo record value fields...:
  var (ptr ast) code ${}
  forEachAstChild field fields:
    ast:addChild code ${setField #record #field #value}
  end

  ret code
end

///
/// Declares a function. Use this to prevent emacs indentation in next line :)
///
template funcd rettype nameAndArgs:
  std:base:func #rettype #nameAndArgs
end

template macro:failUnless cond:
  unless #{cond}:
    ret ${error expression is false #{cond}}
  end
end

macro uniqueIds purpose ids...:
  var ast* code ${seq}

  forEachAstChild child ids:
    ast:addChild code ${uniqueIds #child #purpose}
  end

  ret code
end

macro op|| l r:
  uniqueId result "||"

  ret ${seq:
    #result := false
    if #l:
      #result = true
    elseif #r:
      #result = true
    end
    #result
  end}
end

macro op&& l r:
  uniqueId result "&&"

  ret ${seq:
    #result := false
    if #l:
      #result = #r
    end
    #result
  end}
end

template op==_str left right:
  strcmp(#left, #right) == 0
end

template op!=_str left right:
  strcmp(#left, #right) != 0
end

macro op:= name value:
  if (getField(name, childCount) == 0):
    ret ${var2 #name #value}
  end
  ret ${error "Expected a single identifier on left hand side" ${#name := #value}}
end

/// Allow unitialized variables to be created like
///   num := undef int
macro undef type:
  uniqueId name "undef_value"
  ret ${seq:
    var #type #name
    #name
  end}
end

//------------------------------------------------------------------------------

type astList:
  ast* ast
  astList* next
end

var astList* cee:internal:onReturnCleanupCode null
var bool cee:internal:insideCeeFunc false

/// The executed code will be executed right before all return statements inside
/// the current function. Functions using onReturn must always be left with
/// return and never using ret. This can only be used inside cee functions
macro onReturn cleanupCode:
  if (bool:not cee:internal:insideCeeFunc):
    ret ${error "onReturn may only be used inside cee functions" #cleanupCode}
  end
  newList := malloc astList
  setField newList ast cleanupCode
  setField newList next cee:internal:onReturnCleanupCode
  cee:internal:onReturnCleanupCode = newList
  std:base:ret ${}
end

macro return expr:
  code := ${}
  current := cee:internal:onReturnCleanupCode
  while (cast void* current !=_ptr nullptr void):
    ast:addChild code getField(current,ast)
    current = getField current next
  end
  ast:addChild code ${std:base:ret #expr}
  std:base:ret code
end

macro ret expr:
  if (cast void* cee:internal:onReturnCleanupCode !=_ptr nullptr void):
    std:base:ret ${error "You can only return from functions using onReturn with return, ret is illegal" #expr}
  end
  std:base:ret ${std:base:ret #expr}
end

macro cee:internal:cleanupBeforeFunc:
  if (cee:internal:onReturnCleanupCode !=_ptr nullptr void):
    printString "warning: found cleanup code before compiling function - ignoring it. Probably evaluating the last function failed"
    printNewline()
    printString "--- Left over cleanup code:"
    printNewline()
    current := cee:internal:onReturnCleanupCode
    while (cast void* current !=_ptr nullptr void):
      ast:print getField(current,ast) 4
      current = getField current next
    end
    printString "---"
    printNewline()
    cee:internal:onReturnCleanupCode = nullptr astList
    cee:internal:insideCeeFunc = false
  end
  std:base:ret ${}
end

macro cee:internal:cleanupOnReturn:
  current := cee:internal:onReturnCleanupCode
  while (cast void* current !=_ptr nullptr void):
    free (cast void* getField(current, ast))
    current = getField(current, next)
  end
  cee:internal:onReturnCleanupCode = nullptr astList
  cee:internal:insideCeeFunc = false
  std:base:ret ${}
end

macro func args...:
  var ast* funcCode ${std:base:func}
  forEachAstChild child args:
    ast:addChild funcCode child
  end
  cee:internal:insideCeeFunc = true
  std:base:ret ${seq:
    cee:internal:cleanupBeforeFunc
    #funcCode
    cee:internal:cleanupOnReturn
  end}
end

/// Given an ast and an ast containing placeholders _/__ the
/// shapes of both ast's are matched against each other. They match if they have
/// the same name, same number of children and all their children are matching.
///
/// The _ placeholder matches expressions without children (like 'a') while
/// the __ placeholder matches any ast
/// _... as last argument means >= 0 parameters following
///
/// Examples:
///   ast:matchesShape ${foo bar} ${foo bar} => true
///   ast:matchesShape ${a b c} ${__} => true
///   ast:matchesShape ${foo (some child) bar} ${foo __ bar} => true
///   ast:matchesShape ${a b} ${a} => false
///   ast:matchesShape ${a b c} ${a b} => false
///   ast:matchesShape ${a b} ${a b _} => false
///   ast:matchesShape ${a _...} ${a 1 2 3 4} => true
///
func bool ast:matchesShape(ast* codeArg, ast* templateArg):
  var ast* code codeArg
  var ast* template templateArg

  assert (template !=_ptr nullptr ast)
  assert (code !=_ptr nullptr ast)

  var cstring templateId getField(template, id)
  var int templateChildCount getField(template, childCount)
  var cstring codeId getField(code, id)
  var int codeChildCount getField(code, childCount)

  when (bool:and (templateId ==_str "_") (codeChildCount == 0)):
    ret true
  end

  when (templateId ==_str "__"):
    ret true
  end

  varargs := false
  lastChild := nullptr ast
  if (templateChildCount > 0):
    lastChild = ast:child template (templateChildCount - 1)
    assert (lastChild !=_ptr nullptr ast)
    if ((getField(lastChild, childCount) == 1) && (getField(lastChild, id) ==_str "postop...")):
      var ast* lastChildChild ast:child(lastChild, 0)
      var cstring lastId getField(lastChildChild, id)
      varargs = ((lastId ==_str "_") || (lastId ==_str "__"))
    end
  end

  if varargs:
    if ((codeChildCount >= templateChildCount - 1) && (codeId ==_str templateId)):
      for childNum2 0 (templateChildCount - 1):
        unless (ast:matchesShape (ast:child code childNum2) (ast:child template childNum2)):
          ret false
        end
      end
      ret true
    end
  else:
    if ((codeChildCount == templateChildCount) && (codeId ==_str templateId)):
      for childNum 0 codeChildCount:
        unless (ast:matchesShape (ast:child code childNum) (ast:child template childNum)):
          ret false
        end
      end
      ret true
    end
  end

  ret false
end

///
/// Will return code to get the address of the denoted element
/// Accepts code of the form id(.id)*
/// Also accepts array expressions like foo[10]
/// Will probably evolve into a general way to get the address of a
/// left hand side expression
///
/// Example:
///   getMemberAddress(${a.b.c}) => (fieldptr (fieldptr a b) c)
///
func ast* getMemberAddress(ast* code):
  if (getField code childCount == 0):
    ret ${ptr #code}
  elseif ast:matchesShape(code, ${_._}):
    recordExpr := ast:child(code, 0)
    fieldName := getField ast:child(code, 1) id
    ret ${fieldptr #recordExpr #fieldName}
  elseif ast:matchesShape(code, ${__._}):
    nestedPtr := getMemberAddress ast:child(code, 0)
    fieldName2 := getField ast:child(code, 1) id
    ret ${fieldptr #nestedPtr #fieldName2}
  elseif ast:matchesShape(code, ${__._[__]}):
    structExpr := ast:child code 0
    memberName := getField ast:child(ast:child(code, 1), 0) id
    indexExpr := ast:child(ast:child(code, 1), 1)
    memberPtr := getMemberAddress(${#structExpr.#memberName})
    ret ${ptradd (load #memberPtr) #indexExpr}
  elseif ast:matchesShape(code, ${_[__]}):
    arrayExpr := ast:child code 0
    indexExpr2 := ast:child code 1
    arrayPtr := getMemberAddress(arrayExpr)
    ret ${ptradd (load #arrayPtr) #indexExpr2}
  elseif ast:matchesShape(code, ${__*}):
    ptrExpr := ast:child code 0
    ret ${load #ptrExpr}
  end
  ret ${error "Do not know how to get address of this expression" #code}
end

///TODO: add support to call methods
macro op. record component:
  addr := getMemberAddress ${#record.#component}

  ret ${load #addr}
end

/// Assigning values. Supports
/// a = b - for first class types
/// a.x = b - for struct members
/// ptr[10] = b - for pointers
macro op= l r:
  if ast:matchesShape(l, ${_[_]}):
    var ast* array ast:child(l, 0)
    var ast* index ast:child(l, 1)
    ret ${store ptradd(#array, #index) #r}
  elseif ast:matchesShape(l, ${__.__}):
    laddr := getMemberAddress(l)
    ret ${store #laddr #r}
  elseif ast:matchesShape(l, ${__*}):
    addr := ast:child l 0
    ret ${store #addr #r}
  else:
    ret ${assign #l #r}
  end

  ret ${internal error}
end

// /// Accessing pointers like C arrays
// template postop[] array index
//   load(ptradd #array #index)
// end

macro defineArray type varname values...:
  size := values.childCount
  arrayType := ast:fromString "postop[]"
  ast:addChild arrayType type
  ast:addChild arrayType ${#size}

  code := ${seq:
    var #arrayType #varname
  end}

  valnum := 0
  forEachAstChild value values:
    ast:addChild code ${zmp:array:set #varname #valnum #value}
    valnum = valnum + 1
  end

  ret code
end

template postop[] array index:
  zmp:array:get #array #index
end

template op+_ptr ptr offset:
  ptradd #ptr #offset
end

template zmp:array:get array index:
  load ptradd(zmp:array:addr &(#array), #index)
end

template zmp:array:set array index value:
  store ptradd(zmp:array:addr &(#array), #index) #value
end

// TODO rename, remove 2
func ast* cee:internal:makeInitCall(cstring typeName, ast* varPtr, ast* args):
  var ast* initCall ast:fromString(cstring:concat(typeName, ":init"))
  ast:addChild initCall varPtr
  forEachAstChild arg args:
    ast:addChild initCall arg
  end

  ret initCall
end

/// Allocate storage and initialize variable
/// `new Foo a b c' does the same as `Foo:init(malloc Foo, a, b, c)'
macro new type args...:
  uniqueId name "new"

  var ast* initCall cee:internal:makeInitCall(getField(type,id), ${#name}, args)

  ret ${seq:
    var (ptr #type) #name (malloc #type)
    #initCall
    #name
  end}
end

macro local type args...:
  uniqueId name "local"
  var ast* initCall cee:internal:makeInitCall(getField(type,id), ${ptr #name}, args)
  ret ${seq:
    var #type #name
    #initCall
    #name
  end}
end

template op++ lstring rstring:
  cstrings:append #lstring #rstring
end

template preop++ int:
  #int = #int + 1
  #int
end

template preop-- int:
  #int = #int - 1
  #int
end

template postop++ int:
  #int = #int + 1
  #int - 1
end

template postop-- int:
  #int = #int - 1
  #int + 1
end

func int "op**"(int l, int r):
  acc := 1
  for i 0 r:
    acc = acc * l
  end
  ret acc
end

macro swap a b:
  uniqueId t "swap"
  ret ${seq:
    t := #a
    #a = #b
    #b = t
  end}
end

macro preop& obj:
  code := getMemberAddress obj
  ret code
end

template preop* ptr:
  (load #ptr)
end

template postop* ptr:
  (load #ptr)
end

template isNotNull ptr:
  #ptr !=_ptr nullptr void
end

template isNull ptr:
  #ptr ==_ptr nullptr void
end

macro struct name members:
  unless (name.childCount == 0):
    ret ${error "Expected id" #name}
  end

  decl := ast:fromString "type"
  ast:addChild decl name

  forEachAstChild memberList members:
    if ast:matchesShape(memberList, ${__ _...}):
      memberType := ast:child memberList 0
      for memberNum 1 memberList.childCount:
        memberName := ast:child memberList memberNum
        ast:addChild decl ${#memberType #memberName}
      end
    else:
      ret ${error "Expected 'typeExpr id..." #memberList}
    end
  end

  ret decl
end

func bool isMultipleOf(int x, int m):
  ret (int:mod(x,m) == 0)
end

macro ast:foreach3 t0 t1 t2 tree code:
  if (bool:not isMultipleOf(tree.childCount, 3)):
    ret ${error "Can only iterate over 3-tuples if child count is a multiple of 3" tree}
  end

  uniqueId childnum "ast:foreach3"

  ret ${seq:
    #childnum := 0
    while (#childnum + 2 < #tree.childCount):
      #t0 := ast:child #tree (#childnum+0)
      #t1 := ast:child #tree (#childnum+1)
      #t2 := ast:child #tree (#childnum+2)
      #code
      #childnum = #childnum + 3
    end
  end}
end

macro ast:foreach2 t0 t1 tree code:
  if (bool:not isMultipleOf(tree.childCount, 3)):
    ret ${error "Can only iterate over pairs if child count is a multiple of 2" tree}
  end

  uniqueId childnum "ast:foreach2"

  ret ${seq:
    #childnum := 0
    while (#childnum + 1 < #tree.childCount):
      #t0 := ast:child #tree (#childnum+0)
      #t1 := ast:child #tree (#childnum+1)
      #code
      #childnum = #childnum + 2
    end
  end}
end

///
/// Will transform an expression of the form (<jux someId (<arg 0>) ..>) to
/// (<someId (<arg 0>) ...>)
///
func ast* ast:shiftLeft(ast* code):
  assert (code.childCount >= 1)
  assert (getField ast:child(code,0) childCount == 0)

  firstChild := ast:child code 0
  newcode := ast:fromString firstChild.id
  for i 1 code.childCount:
    ast:addChild newcode ast:child(code,i)
  end
  ret newcode
end

macro enum name cases:
  code := ${}
  ast:addChild code ${type #name int}

  caseNum := 0
  forEachAstChild enumCase cases:
    if ast:matchesShape(enumCase, ${_}):
      caseName := name.id ++ ":" ++ enumCase.id
      ast:addChild code ${const int #caseName #caseNum}
    else:
      ret ${error "Only identifiers allowed for enum cases" #enumCase}
    end
    ++caseNum
  end

  ret code
end

///-----------------------------------------------------------------------------
/// Section: control flow
///-----------------------------------------------------------------------------

///
/// A simple loop construct. You can break from the loop using a break
/// statement. Very experimental
///
/// TODO attention: do not nest (checking not possible, yet)...
macro cee:xp:loop code:
  uniqueId start "loop_start"
  uniqueId end "loop_end"

  ret ${seq:
    template break:
      branch #end
    end

    label #start
    #code
    branch #start
    label #end
  end}
end

/// execute code n times
macro times count code...:
  uniqueId counterVar "timesCounter"
  ret ${for #counterVar 0 #count #code}
end

///
/// switch statement
///
/// Example:
///
/// switch _intExpression
///   void
/// case _intExpression
///   _code
/// ...
/// end
///
macro switch intvalue default cases...:
  uniqueId value "the_value"

  first := true
  code := ${if false:
    printNewline()
  end}

  ast:foreach3 case caseval casecode cases:
    unless ast:matchesShape(case, ${case}):
      caseNode := ast:shiftLeft ${#case #caseval #casecode}
      ret ${error "Expected 'case VAL EXPR'" #caseNode}
    end

    ast:addChild code $elseif
    ast:addChild code ${#value == #caseval}
    ast:addChild code casecode
  end

  code = ${seq:
    var int #value #intvalue
    #code
  end}

  ret code
end

///-----------------------------------------------------------------------------
/// Section: Overloaded operators
///-----------------------------------------------------------------------------

func ast* defineOpCode(cstring type, cstring rettype, cstring opr, cstring func):
  funcname := type ++ ":" ++ func
  oprname := opr ++ "_" ++ type ++ "_" ++ type

  ret ${seq:
    func #rettype #oprname(#type l, #type r):
      #funcname(l, r)
    end
  end}
end

alias u32:greater u32:sgreater l r
alias u32:greaterEqual u32:sgreaterEqual l r
alias u32:less u32:sless l r
alias u32:lessEqual u32:slessEqual l r
alias u32:div u32:sdiv l r

alias char:greater char:sgreater l r
alias char:greaterEqual char:sgreaterEqual l r
alias char:less char:sless l r
alias char:lessEqual char:slessEqual l r

func char char:add(char l, char r):
  ret '?'
end
func char char:sub(char l, char r):
  ret '?'
end
func char char:mul(char l, char r):
  ret '?'
end
func char char:div(char l, char r):
  ret '?'
end


alias float:div float:fdiv l r
alias float:greater float:ogreater l r
alias float:greaterEqual float:ogreaterEqual l r
alias float:less float:oless l r
alias float:lessEqual float:olessEqual l r

alias double:equal double:oequal l r
alias double:notEqual double:onotEqual l r
alias double:div double:fdiv l r
alias double:greater double:ogreater l r
alias double:greaterEqual double:ogreaterEqual l r
alias double:less double:oless l r
alias double:lessEqual double:olessEqual l r

macro overloadedOps type:
  macro defop_ rettype opr name:
    oprName := cstring:quote opr.id
    funcName := cstring:quote name.id

    ret ${seq:
      ast:addChild code (defineOpCode type.id #rettype #oprName #funcName)
    end}
  end

  code := ${}

  defop_ "bool" op== equal
  defop_ "bool" op!= notEqual
  defop_ "bool" op> greater
  defop_ "bool" op>= greaterEqual
  defop_ "bool" op< less
  defop_ "bool" op<= lessEqual

  defop_ type.id op+ add
  defop_ type.id op- sub
  defop_ type.id op* mul
  defop_ type.id op/ div

  ret code
end

overloadedOps u32
overloadedOps float
overloadedOps double
overloadedOps char

template op+ l r:
  zmp:cee:add #l #r
end

template op- l r:
  zmp:cee:sub #l #r
end

template op* l r:
  zmp:cee:mul #l #r
end

template op/ l r:
  zmp:cee:div #l #r
end

template op| l r:
  zmp:cee:or #l #r
end

template op& l r:
  zmp:cee:and #l #r
end

template op^ l r:
  zmp:cee:xor #l #r
end

template op% l r:
  u32:mod #l #r
end

template op+= l r:
  #l = #l + #r
end

template op+.= l r:
  #l = #l +. #r
end

template op++= l r:
  #l = #l ++ #r
end

template op-= l r:
  #l = #l - #r
end

template op*= l r:
  #l = #l * #r
end

template op/= l r:
  #l = #l / #r
end

template op**= l r:
  #l = #l ** #r
end

template op&= l r:
  #l = #l & #r
end

template op|= l r:
  #l = #l | #r
end

template op^= l r:
  #l = #l ^ #r
end

template op%= l r:
  #l = #l % #r
end

template op&&= l r:
  #l = #l && #r
end

template op||= l r:
  #l = #l || #r
end

template op<<= l r:
  #l = #l << #r
end

template op>>= l r:
  #l = #l >> #r
end

template op%= l r:
  #l = #l % #r
end

template preop- v:
  zmp:cee:neg #v
end

template preop! v:
  zmp:cee:not #v
end

template op== l r:
  zmp:cee:equal #l #r
end

template op!= l r:
  bool:not (#l == #r)
end

template op> l r:
  zmp:cee:greater #l #r
end

template op>= l r:
  zmp:cee:greaterEqual #l #r
end

template op< l r:
  zmp:cee:less #l #r
end

template op<= l r:
  zmp:cee:lessEqual #l #r
end

func bool op<_ptr_ptr(void* l, void* r):
  ret u32:uless(cast int l, cast int r)
end

func bool op>_ptr_ptr(void* l, void* r):
  ret u32:ugreater(cast int l, cast int r)
end

func bool op<=_ptr_ptr(void* l, void* r):
  ret u32:ulessEqual(cast int l, cast int r)
end

func bool op>=_ptr_ptr(void* l, void* r):
  ret u32:ugreaterEqual(cast int l, cast int r)
end

func bool op!=_ptr_ptr(void* l, void* r):
  ret u32:notEqual(cast int l, cast int r)
end

func bool op==_ptr_ptr(void* l, void* r):
  ret u32:equal(cast int l, cast int r)
end

func bool op==_bool_bool(bool l, bool r):
  ret bool:not(bool:xor l r)
end

func bool op&_bool_bool(bool l, bool r):
  ret bool:and(l, r)
end

func bool op|_bool_bool(bool l, bool r):
  ret bool:or(l, r)
end

func bool op^_bool_bool(bool l, bool r):
  ret bool:xor(l, r)
end

func u32 op&_u32_u32(u32 l, u32 r):
  ret u32:and(l, r)
end

func u32 op|_u32_u32(u32 l, u32 r):
  ret u32:or(l, r)
end

func u32 op^_u32_u32(u32 l, u32 r):
  ret u32:xor(l, r)
end

func int neg_u32(int x):
  ret int:neg(x)
end

func float neg_float(float x):
  ret float:neg(x)
end

func double neg_double(double x):
  ret (0.0d - x)
end

func bool not_bool(bool x):
  ret bool:not(x)
end

///-----------------------------------------------------------------------------
/// Section: Overloaded printing
///-----------------------------------------------------------------------------

func void print_u32(int i):
  printInt i
end

func void print_float(float f):
  printFloat f
end

func void print_char(char c):
  printChar c
end

func void print_bool(bool b):
  printBool b
end

func void print_double(double d):
  printDouble d
end

func void "print_char*"(char* string):
  printString string
end

func void "print_ast*"(ast* code):
  ast:print code 0
end

macro print args...:
  var astp code ${}

  forEachAstChild arg args:
    ast:addChild code ${zmp:cee:print #arg}
  end

  ret code
end

/// print indent levels of spaces, then pass remaining arguments to print macro
macro iprint indent args...:
  var astp code ${seq:
    printIndent #indent
  end}

  forEachAstChild arg args:
    ast:addChild code ${zmp:cee:print #arg}
  end

  ret code
end

/// as iprint but pass arguments to println macro
macro println args...:
  var astp code ${}

  forEachAstChild arg args:
    ast:addChild code ${zmp:cee:print #arg}
  end

  ast:addChild code ${printNewline()}

  ret code
end

macro iprintln indent args...:
  var astp code ${seq:
    printIndent #indent
  end}

  forEachAstChild arg args:
    ast:addChild code ${zmp:cee:print #arg}
  end

  ast:addChild code ${printNewline()}

  ret code
end

func void printBits(int bitmask):
  printString "0b"
  for i 0 32:
    bitnum := 31 - i
    mask := int:shl 1 bitnum
    bit := int:lshr (int:and bitmask mask) bitnum
    printInt bit
  end
end

std:base:func void printHLine(char chr, int count):
  times count (printChar chr)
  printNewline()
end



macro structlit structType fieldsAndValues...:
  uniqueId structVar "struct"

  code := ${seq:
    var #structType #structVar
  end}

  ast:foreach2 field value fieldsAndValues:
    ast:addChild code ${#structVar.#field = #value}
  end

  ast:addChild code ${#structVar}
  ret code
end

///-----------------------------------------------------------------------------
/// Section: Overloaded conversion
///-----------------------------------------------------------------------------

alias toInt zmp:cee:toInt x
alias toFloat zmp:cee:toFloat x
alias toDouble zmp:cee:toDouble x
alias toChar zmp:cee:toChar x
alias toCString zmp:cee:toCString x


func int toInt_u32(int i):
  ret i
end

func int toInt_float(float f):
  float:toInt f
end

func int toInt_double(double d):
  double:toInt d
end

func int toInt_char(char c):
  ret char:zextToU32(c)
end

func int toInt_bool(bool b):
  if b:
    ret 1
  end
  ret 0
end


func float toFloat_u32(u32 i):
  int:toFloat i
end

func float toFloat_double(double d):
  double:toFloat d
end

func float toFloat_float(float f):
  ret f
end

func float toFloat_bool(bool b):
  toFloat(toInt b)
end


func double toDouble_u32(int i):
  int:toDouble i
end

func double toDouble_float(float f):
  float:toDouble f
end

func double toDouble_double(double d):
  ret d
end

func double toDouble_bool(bool b):
  toDouble(toInt b)
end


func char toChar_u32(int i):
  ret u32:toChar(i)
end


func char* toCString_u32(int i):
  int2cstring i
end

func char* toCString_float(float f):
  float2cstring f
end

func char* toCString_double(double d):
  double2cstring d
end

func char* toCString_char(char c):
  char2cstring c
end

func char* toCString_bool(bool b):
  ret bool2cstring(b)
end

func char* "toCString_char*"(char* c):
  c
end

macro ofunc rettype nameAndArgs impl:
  if ast:matchesShape(nameAndArgs, ${_(__...)}):
    name := getField(ast:child nameAndArgs 0, id)
    newNameAndArgs := ${_()}

    for i 1 nameAndArgs.childCount:
      param := ast:child nameAndArgs i

      if ast:matchesShape(param, ${__ _}):
        paramType := ast:child param 0
        if (paramType.childCount > 0):
          ret ${error "ofunc: Only supporting type names which are an id atm" #paramType}
        end
        paramName := ast:child param 1
        ast:addChild newNameAndArgs ${#paramType #paramName}
        name = name ++ "_" ++ paramType.id
      else:
        ret ${error "Invalid parameter, expected 'TYPE_EXPR NAME" ${#param}}
      end
    end

    nameAst := ast:child newNameAndArgs 0
    nameAst.id = name
    ret ${func #rettype #newNameAndArgs #impl}
  end

  ret ${error "Expected 'ofunc RETTYPE funcName(args...)'" ${ofunc #rettype #nameAndArgs "..."}}
end

///-----------------------------------------------------------------------------
/// Section: Unit tests
///-----------------------------------------------------------------------------

var int unittest:failedCount 0

/// Executes the given expression and prints an error
/// message containing the passed ast if it does not
/// evaluate to true
macro unittest:assert testCode:
  ret ${seq:
    unless #testCode:
      assign unittest:failedCount (int:add unittest:failedCount 1)
      printHLine '-' 40
      printlnString "error: Assertion failed"
      ast:print ${#testCode} 0
    end
  end}
end

/// Calls unittest:assert on all childs of the passed
/// sequence expression
macro unittest:assertAll checks:
  var (ptr ast) code ${}
  forEachAstChild check checks:
    when (cstring:equal (getField check id) "opseq"):
      printlnString "Warning: unittest:assertAll found opseq expression. This might indicate using this from indent syntax code which is not supported"
    end
    ast:addChild code ${unittest:assert #check}
  end

  ret code
end


/// Will define a function name_tests_nr which will
/// call all unittest:assert on all given testCases
macro unittest:testCasesFor name testCases...:
  var cstring testName (cstring:concat "test_" (getField name id) "_" (u32:toCString newUniqueId()))

  var astp impl (ast:fromString "unittest:assertAll")
  forEachAstChild testCase testCases:
    ast:addChild impl testCase
  end
  var ast* decl ast:fromString("opcall")
  ast:addChild decl ast:fromString(testName)
  var astp funcDecl ${std:base:func void #decl:
    #impl
  end}

  ret funcDecl
end

std:base:func cstring unittest:newTestFuncNameFor(cstring funcName):
  cstring:concat "test_" funcName "_" (u32:toCString newUniqueId())
end

macro unittest:testFunc funcName impl:
  var cstring testFuncName (unittest:newTestFuncNameFor (getField funcName id))
  var ast* decl ast:fromString("opcall")
  ast:addChild decl ast:fromString(testFuncName)
  ret ${std:base:func void #decl #impl}
end

///-----------------------------------------------------------------------------
/// Section: Assertions and testing
///-----------------------------------------------------------------------------

macro assert testCode:
  isCompare := false
  compareF := ast:fromString "op=="

  if ast:matchesShape(testCode, ${__ == __}):
    isCompare = true
  elseif ast:matchesShape(testCode, ${__ ==_f __}):
    isCompare = true
  elseif ast:matchesShape(testCode, ${__ ==_str __}):
    isCompare = true
    compareF = ast:fromString "op==_str"
  elseif ast:matchesShape(testCode, ${__ < __}):
    isCompare = true
    compareF = ast:fromString "op<"
  end

  if isCompare:
    uniqueId lvar "lvar"
    uniqueId rvar "rvar"
    l := ast:child(testCode, 0)
    r := ast:child(testCode, 1)
    ret ${seq:
      #lvar := #l
      #rvar := #r
      unless (#compareF #lvar #rvar):
        ++unittest:failedCount
        printHLine '-' 40
        printlnString "Assertion failed"
        printString "left = "
        print #lvar
        println()
        printString "right = "
        print #rvar
        println()
        ast:print ${#testCode} 0
      end
    end}
  else:
    ret ${seq:
      unless #testCode:
        ++unittest:failedCount
        printHLine '-' 40
        printlnString "Assertion failed"
        ast:print ${#testCode} 0
      end
    end}
  end

  ret ${}
end


