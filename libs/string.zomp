///
/// Various string utilities
///

requireLibs libcee unittest

struct StringBuffer:
  /// Pointer to 0-terminated string, or nullptr if length == 0
  char* buffer
  /// Number of bytes allocated
  size_t allocatedBytes
  /// Length of the string stored in buffer without terminating 0 byte
  size_t length
end

func void StringBuffer:init(StringBuffer* this):
  this.buffer = nullptr char
  this.allocatedBytes = cast size_t 0
  this.length = cast size_t 0
end

func void StringBuffer:delete(StringBuffer* this):
  free (cast void* this.buffer)
  this.buffer = nullptr char
  this.allocatedBytes = cast size_t 0
  this.length = cast size_t 0
end

func void StringBuffer:print(StringBuffer* this):
  print "StringBuffer("
  print "length = " this.length ", "
  print "buffer = " this.buffer ", "
  print "allocatedBytes = " this.allocatedBytes ")"
end


/// @param bytes Number of bytes including terminating 0 byte
func void StringBuffer:reserve(StringBuffer* this, size_t bytes):
  if (bytes > this.allocatedBytes):
    newBuffer := malloc char fixSizet(bytes)
    unless isNull(this.buffer):
      memcpy(cast void* newBuffer, cast void* this.buffer, this.length + cast size_t 1)
    end
    this.buffer = newBuffer
    this.allocatedBytes = bytes
  end
end

unittest:testCase StringBuffer_Reserve:
  buf := local StringBuffer

  StringBuffer:reserve buf (cast size_t 100)

  unittest:assertAll:
    buf.allocatedBytes == cast size_t 100
    buf.length == cast size_t 0
    isNotNull buf.buffer
  end
end

unittest:testCase StringBuffer_MultiReserve:
  buf := local StringBuffer

  StringBuffer:reserve(buf, cast size_t 100)
  sprintf(buf.buffer, "foo%s", "bar")
  buf.length = strlen(buf.buffer)
  StringBuffer:reserve(buf, cast size_t 200)

  unittest:assertAll:
    buf.allocatedBytes == cast size_t 200
    buf.length == cast size_t 6
    buf.buffer ==_str "foobar"
  end
end

func void StringBuffer:append(StringBuffer* this, char* str):
  strLength := strlen(str)
  requiredBytes := strLength + this.length + cast size_t 1
  StringBuffer:reserve(this, requiredBytes)
  memcpy(cast void* (this.buffer + fixSizet this.length), cast void* str, strLength)
  this.length += strLength
  (this.buffer + fixSizet this.length)* = '\0'
end

unittest:testCase StringBuffer_AppendSingle:
  buf := local StringBuffer

  StringBuffer:append(buf, "foobar")

  unittest:assertAll:
    buf.allocatedBytes == cast size_t 7
    buf.length == cast size_t 6
    buf.buffer ==_str "foobar"
  end
end

unittest:testCase StringBuffer_AppendMulti:
  buf := local StringBuffer

  StringBuffer:append(buf, "foo")
  StringBuffer:append(buf, "bar")

  unittest:assertAll:
    buf.length == cast size_t 6
    buf.allocatedBytes == cast size_t 7
    buf.buffer ==_str "foobar"
  end
end

