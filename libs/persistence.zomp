///
/// A very simple library for persistence. Allows to store hierarchical mappings
/// between string keys and string values into a file
///

requireLibs libcee stdio utils

struct Section:
  cstring name
  // <cstring>
  StringMap* settings
  // <Section>
  StringMap* subsections
end

func void Section:init(Section* this, cstring name):
  this.name = name
  this.settings = StringMap_new()
  this.subsections = StringMap_new()
end

func void Section:delete(Section* this):
  println "TODO: implement Section:delete"
end

func void* zompParse(cstring source)
func ast* parseZompSource(cstring source):
  ret (cast ast* zompParse(source))
end

func char* findOneOf(char* buffer, char* delims, bool inverted):
  pos := buffer
  while (!isNull(pos) && pos* != '\0'):
    foundDelim := false
    currentDelim := delims
    if isNotNull(delims):
      while (currentDelim* != '\0'):
        if (currentDelim* == pos*):
          foundDelim = true
        end
        ++currentDelim
      end
    end

    if (foundDelim != inverted):
      ret pos
    end

    ++pos
  end

  ret nullptr(char)
end

func char* findFirstIn(char* buffer, char* delim):
  ret findOneOf(buffer, delim, false)
end

func char* findFirstNotIn(char* buffer, char* delim):
  ret findOneOf(buffer, delim, true)
end

func char* copyStringRange(char* start, char* end_):
  // TODO well.. if we had pointer substraction right now..
  pos := start
  count := 0
  while (pos != end_):
    ++count
    ++pos
  end

  buffer := malloc char (count+1)
  strncpy(buffer, start, count)
  buffer[count] = '\0'
  return buffer
end

func void Section:loadFromAst(Section* this, ast* tree):
  if (isNull this || isNull tree):
    return
  end

  sectionPattern := ${_:
    __...
  end}

  if (tree.id ==_str "seq" || tree.id ==_str "opseq"):
    forEachAstChild item tree:
      if (item.id ==_str "op="):
        name := getField ast:child(item, 0) id
        value := getField ast:child(item, 1) id
        valueLength := strlen(value)
        if (*(value+0) == '"' && *(value + valueLength - 1) == '"'):
          (value + valueLength - 1)* = '\0'
          value += 1
        end
        StringMap_insert this.settings name (cast void* value)
      elseif ast:matchesShape(item, sectionPattern):
        sectionName := getField ast:child(item, 0) id
        subsection := new Section sectionName
        Section:loadFromAst subsection ast:child(item, 1)
        StringMap_insert this.subsections sectionName (cast void* subsection)
      else:
        println "Found invalid entry, skipping"
        ast:print item 1
        println()
      end
    end
  else:
    println "Invalid section, skipping"
    ast:print tree 1
    println()
  end
end

func void Section:loadFrom(Section* this, cstring fileName):
  buffer := nullptr char
  loadResult := zompLoadFileToMemory( fileName, &buffer )
  if (loadResult < 0):
    return
  end

  code := parseZompSource buffer
  dealloc buffer
  Section:loadFromAst this code
end

func void Section:print(Section* this, void(cstring)* printF_, int indent):
  printF := printF_
  quoteSign := "x"
  quoteSign[0] = '"' // '"' lalal, fucked up syntax highlighting

  pos := StringMap_range this.settings
  while StringMapRange_hasNext(pos):
    name := cast cstring StringMapRange_key(pos)
    value := cast cstring StringMapRange_value(pos)

    times indent:
      printF " "
    end
    printF name
    printF " = "
    printF quoteSign
    printF value
    printF quoteSign
    printF "\n"

    StringMapRange_next(pos)
  end

  subsection := StringMap_range this.subsections
  while StringMapRange_hasNext(subsection):
    sectionName := cast cstring StringMapRange_key(subsection)
    sec := cast Section* StringMapRange_value(subsection)

    times indent:
      printF " "
    end
    printF sectionName
    printF ":\n"
    Section:print(sec, printF, indent+2)
    times indent:
      printF " "
    end
    printF "end\n"

    StringMapRange_next subsection
  end
end

var FILE* Section:currentFile_ null
func void Section:printToCurrentFile_(cstring str):
  writeCString(Section:currentFile_, str)
  return
end

func void Section:writeTo(Section* this, cstring fileName):
  file := fopen(fileName, "w")
  if isNull(file):
    return
  end

  Section:currentFile_ = file
  Section:print(this, &Section:printToCurrentFile_, 0)
  Section:currentFile_ = nullptr FILE
  closeFile(file)
  return
end

// func int main():
//   s := new Section "testing"
//   fileName := "examples/test.cfg"
//   Section:loadFrom s fileName
//   StringMap_debugPrint s.settings
//   StringMap_debugPrint s.subsections
//   Section:writeTo s "examples/test2.cfg"
//   println "Content of " fileName ":"
//   Section:print s &printString 0
//   dealloc s
// 
//   ret 0
// end

