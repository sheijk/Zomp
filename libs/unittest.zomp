/**
 * Tools for writing and running unit tests
 */

require "libs/libcee.zomp"

///
/// An assertion macro which detects certain kinds of expressions and inserts
/// code printing the arguments for better error messages
///
/// Example:
/// x := 20.0
/// unittest:assert (sin 10.0 ==_f 20.0)
///
/// Will result in:
///
/// Assertion failed
/// left = -0.544021
/// right = 20.000000
/// op==_f [2 childs]
///   opjux [2 childs]
///     sinf [0 childs]
///     10.0 [0 childs]
///   x [0 childs]
///
macro unittest:assert testCode:
  isCompare := false
  compareF := ast:fromString "op=="

  if ast:matchesShape(testCode, ${__ == __}):
    isCompare = true
  elseif ast:matchesShape(testCode, ${__ ==_f __}):
    isCompare = true
  elseif ast:matchesShape(testCode, ${__ ==_str __}):
    isCompare = true
    compareF = ast:fromString "op==_str"
  end

  if isCompare:
    uniqueId lvar "lvar"
    uniqueId rvar "rvar"
    l := ast:child(testCode, 0)
    r := ast:child(testCode, 1)
    ret ${seq:
      #lvar := #l
      #rvar := #r
      unless (#compareF #lvar #rvar):
        ++unittest:failedCount
        printHLine '-' 40
        printlnString "Assertion failed"
        printString "left = "
        print #lvar
        println()
        printString "right = "
        print #rvar
        println()
        ast:print ${#testCode} 0
      end
    end}
  else:
    ret ${seq:
      unless #testCode:
        ++unittest:failedCount
        printHLine '-' 40
        printlnString "Assertion failed"
        ast:print ${#testCode} 0
      end
    end}
  end

  ret ${}
end

func int unittest:printReport():
  if (unittest:failedCount > 0):
    println unittest:failedCount " tests failed"
    ret 1
  end

  println "All unit tests succeeded"
  ret 0
end

struct TestCase:
  cstring name
  cstring functionName
  // (fptr void) function
  TestCase* next
end

func void TestCase:print(TestCase* this):
  printString "TestCase(name="
  printString getField(this,name)
  printString ", functionName="
  printString getField(this,functionName)
  printlnString ")"
end

func void TestCase:printAll(TestCase* this):
  unless (this == nullptr TestCase):
    TestCase:print this
    TestCase:printAll getField(this,next)
  end
end

func int TestCase:count(TestCase* this):
  var TestCase* current this
  var int count 0
  while (current != nullptr TestCase):
    assign count (count + 1)
    assign current getField(current,next)
  end
  ret count
end

var TestCase* unittest:testCases null

macro unittest:testCaseCount:
  ret ast:fromInt(TestCase:count unittest:testCases)
end

func TestCase* unittest:registerTestCase(cstring name):
  var TestCase* case malloc(TestCase)

  setField case name name
  setField case functionName ("testcase_" ++ name ++ int:toCString newUniqueId())
  setField case next unittest:testCases
  assign unittest:testCases case

  ret case
end

macro unittest:testCase name code:
  case := unittest:registerTestCase(name.id)
  funcName := (getField case functionName)
  funcDef := ${seq:
    func void #funcName():
      #code
    end
  end}
  if std:vm:isInteractive:
    println "Interactive, running unit test function " funcName
    ret ${seq:
      func void test():
        println "Last compilation of unit test failed!"
      end
      #funcDef
      func void test():
        #funcName()
      end
    end}
  end
  ret funcDef
end

macro unittest:runAllTestCases:
  var ast* code ${}
  var TestCase* case unittest:testCases
  while (case != nullptr TestCase):
    var cstring functionName getField(case, functionName)
    ast:addChild code ${#functionName()}

    assign case getField(case, next)
  end

  ret code
end


template unittest:main extraCode...:
  func int main():
    #extraCode
    unittest:runAllTestCases
    ret unittest:printReport()
  end
end

