/**
 * Bindings for assimp library to import 3d models from various file formats

!verify off
 */

linkclib "assimp.dylib"

require "libs/libcee.zomp"
require "libs/mesh.zomp"

// var int aiComponent_NORMALS 0x2u
// var int aiComponent_TANGENTS_AND_BITANGENTS 0x4u
// var int aiComponent_COLORS 0x8
// var int aiComponent_TEXCOORDS 0x10
// var int aiComponent_BONEWEIGHTS 0x20
// var int aiComponent_ANIMATIONS 0x40
// var int aiComponent_TEXTURES 0x80
// var int aiComponent_LIGHTS 0x100
// var int aiComponent_CAMERAS 0x200
// var int aiComponent_MESHES 0x400
// var int aiComponent_MATERIALS 0x800
// var int _aiComponent_Force32Bit 0x9ffffff

macro iprint args...
  code := ${}
  ast:addChild code ${times indent printChar(' ')}
  forEachAstChild arg args
    ast:addChild code arg
  end
  ret code
end

macro printField fieldName
  fieldNameQuoted := cstring:quote fieldName.id
  ret ${
    times (indent+2) printChar(' ')
    print #fieldNameQuoted " = " this.#fieldName
    println()
  end}
end

template printFieldi fieldName
  printField #fieldName
end

var int aiPrimitiveType_POINT 1
var int aiPrimitiveType_LINE 2
var int aiPrimitiveType_TRIANGLE 4
var int aiPrimitiveType_POLYGON 8

var int aiProcess_CalcTangentSpace 1
var int aiProcess_JoinIdenticalVertices 2
var int aiProcess_ConvertToLeftHanded 4
var int aiProcess_Triangulate 8
var int aiProcess_RemoveComponent 16
var int aiProcess_GenNormals 32
var int aiProcess_GenSmoothNormals 64
var int aiProcess_SplitLargeMeshes 128
var int aiProcess_PreTransformVertices 256
var int aiProcess_LimitBoneWeights 512
var int aiProcess_ValidateDataStructure 1024
var int aiProcess_ImproveCacheLocality 2048
var int aiProcess_RemoveRedundantMaterials 4096
var int aiProcess_FixInfacingNormals 8192
var int aiProcess_OptimizeGraph 16384
var int aiProcess_SortByPType 32768
var int aiProcess_FindDegenerates 65536
var int aiProcess_FindInvalidData 131072
var int aiProcess_GenUVCoords 262144
var int aiProcess_TransformUVCoords 524288

type uint int

struct aiVector2D
  float x y
end

func void aiVector2D:print(aiVector2D* this)
  print "aiVector2D(x=" this.x ", y=" this.y ")"
end

struct aiVector3D
  float x y z
end

func void aiVector3D:print(aiVector3D* this)
  print "aiVector3D(x=" this.x ", y=" this.y ", z=" this.z ")"
end

struct aiQuaternion
  float w x y z
end

func void aiQuaternion:print(aiQuaternion* this)
  print "aiQuaternion(w=" this.w ", x=" this.x ", y=" this.y ", z=" this.z ")"
end

struct aiMatrix3x3
  float a1 a2 a3
  float b1 b2 b3
  float c1 c2 c3
end

func void aiMatrix3x3:print(aiMatrix3x3* this)
  print "aiMatrix3x3(TODO)"
end

struct aiMatrix4x4
  float a1 a2 a3 a4
  float b1 b2 b3 b4
  float c1 c2 c3 c4
  float d1 d2 d3 d4
end

func void aiMatrix4x4:print(aiMatrix4x4* this)
  print "aiMatrix4x4(TODO)"
end

const int assimp:MAXLEN 1024
struct aiString
  uint length
  char[1024] data
end

func void aiString:print(aiString* this)
  printString zmp:array:addr( &(this.data) )
end

funcd cstring aiGetLegalString()
funcd int aiGetVersionMinor()
funcd int aiGetVersionMajor()
funcd int aiGetVersionRevision()

func void VertexStream:copyFromVector3D(VertexStream* this, aiVector3D* sourceVec_in)
  vertexPtr := cast float* this.data
  sourceVec := sourceVec_in
  for i 0 this.size
    store (vertexPtr +_ptr 0) sourceVec*.x
    store (vertexPtr +_ptr 1) sourceVec*.y
    store (vertexPtr +_ptr 2) sourceVec*.z
    vertexPtr = vertexPtr +_ptr 3
    sourceVec = sourceVec +_ptr 1
  end
end

struct aiNode
  aiString mName
  aiMatrix4x4 mTransformation
  aiNode* mParent
  uint mNumChildren
  aiNode** mChildren
  uint mNumMeshes
  uint* mMeshes
end

func void aiNode:print(aiNode* this, int indent)
  times indent printChar(' ')
  printString "aiNode '"
  aiString:print &(this.mName)
  println "':"
  printField mNumChildren

  times (2+indent) printChar(' ')
  print this.mNumMeshes " mMeshes = "
  for meshnum 0 this.mNumMeshes
    if (meshnum > 0)
      printString ", "
    end
    printInt load(ptradd this.mMeshes meshnum)
  end
  println()

  for childnum 0 this.mNumChildren
    aiNode:print(load(ptradd this.mChildren childnum), indent+2)
  end
end

struct aiVertexWeight
  uint mVertexId
  float mWeight
end

struct aiBone
  aiString mName
  uint mNumWeights
  aiVertexWeight* mWeights
  aiMatrix4x4 mOffsetMatrix
end

struct aiFace
  uint mNumIndices
  uint* mIndices
end


struct aiMesh
  uint mPrimitiveTypes
  uint mNumVertices
  uint mNumFaces
  aiVector3D* mVertices
  aiVector3D* mNormals
  aiVector3D* mTangents
  aiVector3D* mBitangents
  (array aiVector3D* 4) mColors
  (array aiVector3D* 4) mTextureCoords
  uint[4] mNumUVComponents
  aiFace* mFaces
  uint mNumBones
  aiBone** mBones
  uint mMaterialIndex
end

// macro printField printF fieldName
//   fieldNameQuoted := cstring:quote fieldName.id
//   ret ${
//     times indent printChar(' ')
//     printString #fieldNameQuoted
//     printString " = "
//     #printF this.#fieldName
//     println()
//   end}
// end

func void aiMesh:print(aiMesh* this, int indent)
  printIndent indent
  printlnString "aiMesh:"
  printField mPrimitiveTypes
  printField mNumVertices
  printField mNumFaces

  printIndent (indent+2)
  print "components="

  macro printUnlessNull fieldName
    fieldNameQ := cstring:quote fieldName.id

    ret ${
      if isNotNull(this.#fieldName)
        printString #fieldNameQ
        printChar ' '
      end
    end}
  end

  printUnlessNull mVertices
  printUnlessNull mNormals
  printUnlessNull mTangents
  printUnlessNull mBitangents
  println()

  printIndent (indent+2)
  printString "mNumUVComponents={"
  for i 0 4
    if (i > 0)
      printString ", "
    end
    printInt zmp:array:get(this.mNumUVComponents, i)
  end
  printlnString "}"

  printFieldi mNumBones
  printFieldi mMaterialIndex
end

struct aiVectorKey
  double mTime
  aiVector3D mValue
end

func void aiVectorKey:print(aiVectorKey* this)
  print "aiVectorKey("
  print "mTime=" this.mTime
  print ", mValue="
  vptr := fieldptr this mValue
  // aiVector3D:print &(this.mValue)
  aiVector3D:print vptr
  print ")"
end

struct aiQuatKey
  double mTime
  aiQuaternion mValue
end

func void aiQuatKey:print(aiQuatKey* this)
  print "aiQuatKey(mTime=" this.mTime
  print ", mValue="
  aiQuaternion:print &this.mValue
  print ")"
end

type aiAnimBehaviour int
var int aiAnimBehaviour_DEFAULT 0
var int aiAnimBehaviour_CONSTANT 1
var int aiAnimBehaviour_LINEAR 2
var int aiAnimBehaviour_REPEAT 3

struct aiNodeAnim
  aiString mNodeName

  uint mNumPositionKeys
  aiVectorKey* mPositionKeys

  uint mNumRotationKeys
  aiQuatKey* mRotationKeys

  uint mNumScalingKeys
  aiVectorKey* mScalingKeys

  aiAnimBehaviour mPreState
  aiAnimBehaviour mPostState
end

func void aiNodeAnim:print(aiNodeAnim* this, int indent)
  times indent printChar(' ')
  print "aiNodeAnim '"
  aiString:print &this.mNodeName
  println "':"
  printField mNumPositionKeys
  printField mNumRotationKeys
  printField mNumScalingKeys
  printField mPreState
  printField mPostState

  printIndent indent
  println "  mPositionKeys:"
  for posnum 0 this.mNumPositionKeys
    printIndent (indent+4)
    aiVectorKey:print (this.mPositionKeys + posnum)
    println()
  end

  printIndent indent
  println "  mRotationKeys:"
  for rotnum 0 this.mNumRotationKeys
    printIndent (indent+4)
    aiQuatKey:print (this.mRotationKeys + rotnum)
    println()
  end

  printIndent indent
  println "  mScalingKeys:"
  for scalenum 0 this.mNumScalingKeys
    printIndent (indent+4)
    aiVectorKey:print (this.mScalingKeys + scalenum)
    println()
  end
end

struct aiAnimation
  aiString mName
  double mDuration
  double mTicksPerSecond

  uint mNumChannels
  aiNodeAnim** mChannels
end

func void aiAnimation:print(aiAnimation* this, int indent)
  times indent printChar(' ')
  print "aiAnimation '"
  aiString:print &this.mName
  println "'"
  printField mDuration
  printField mTicksPerSecond
  printField mNumChannels
  for channum 0 this.mNumChannels
    aiNodeAnim:print *(this.mChannels + channum) (indent+2)
  end
end

type aiMaterial
type aiTexture
type aiLight

func void aiMaterial:print(aiMaterial* this, int indent)
  times indent printChar(' ')
  printlnString "aiMaterial"
end

struct aiCamera
  aiString mName
  aiVector3D mPosition mUp mLookAt
  float mHorizontalFOV
  float mClipPlaneNear mClipPlaneFar
  float mAspect
end

ofunc void print(aiVector3D vec)
  print "aiVector3D(" vec.x ", " vec.y ", " vec.z ")"
end

func void aiCamera:print(aiCamera* cam)
  print "aiCamera "
  aiString:print &(cam.mName)
  println()
  println "  mPosition = " cam.mPosition
  println "  mUp = " cam.mUp
  println "  mLookAt = " cam.mLookAt
  println "  mClipPlaneNear = " cam.mClipPlaneNear
  println "  mClipPlaneFar = " cam.mClipPlaneFar
  println "  mAspect = " cam.mAspect
end

struct aiScene
  int mFlags
  aiNode* mRootNode
  int mNumMeshes
  aiMesh** mMeshes
  int mNumMaterials
  aiMaterial** mMaterials
  int mNumAnimations
  aiAnimation** mAnimations
  int mNumTextures
  aiTexture** mTextures
  int mNumLights
  aiLight** mLights
  int mNumCameras
  aiCamera** mCameras
end

funcd aiScene* aiImportFile(cstring fileName, int flags)
funcd void aiReleaseImport(aiScene* scene)

funcd cstring aiGetErrorString()

func void aiScene:print(aiScene* this)
  indent := 2

  printlnString "aiScene"
  printString "  mFlags="
  printBits this.mFlags
  println()
  printFieldi mNumMeshes
  printFieldi mNumMaterials
  printFieldi mNumAnimations
  printFieldi mNumTextures
  printFieldi mNumLights
  printFieldi mNumCameras
  printlnString "  mRootNode:"
  aiNode:print this.mRootNode 4
  printlnString "  mMeshes:"
  for meshnum 0 this.mNumMeshes
    aiMesh:print load(this.mMeshes +_ptr meshnum) 4
  end
  println "  mAnimations:"
  for animnum 0 this.mNumAnimations
    aiAnimation:print *(this.mAnimations +_ptr animnum) 4
  end
  // for camnum 0 this.mNumCameras
  //   aiCamera:print *(this.mCameras +_ptr camnum)
  // end
  // printlnString "  mMaterials:"
  // for matnum 0 this.mNumMaterials
  //   aiMaterial:print load(ptradd this.mMaterials matnum) 4
  // end
  println()
end

func Mesh* aiMesh:toMesh(aiMesh* aim)
  Mesh:define m aim.mNumVertices
    gl_Position GL_FLOAT 3
    gl_Normal GL_FLOAT 3
  end

  VertexStream:copyFromVector3D (m.streams + 0) aim.mVertices
  VertexStream:copyFromVector3D (m.streams + 1) aim.mNormals

  ret m
end

func Mesh* aiScene:toMesh(aiScene* this)
  ret aiMesh:toMesh(*this.mMeshes)
end


