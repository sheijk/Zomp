///
/// Bindings for assimp library to import 3d models from various file formats.
///

linkclib "libassimp.dylib"

requireLibs libcee mesh

// var int aiComponent_NORMALS 0x2u
// var int aiComponent_TANGENTS_AND_BITANGENTS 0x4u
// var int aiComponent_COLORS 0x8
// var int aiComponent_TEXCOORDS 0x10
// var int aiComponent_BONEWEIGHTS 0x20
// var int aiComponent_ANIMATIONS 0x40
// var int aiComponent_TEXTURES 0x80
// var int aiComponent_LIGHTS 0x100
// var int aiComponent_CAMERAS 0x200
// var int aiComponent_MESHES 0x400
// var int aiComponent_MATERIALS 0x800
// var int _aiComponent_Force32Bit 0x9ffffff

macro printField fieldName:
  fieldNameQuoted := cstring:quote fieldName.id
  ret $:
    times (indent+2) printChar(' ')
    print #fieldNameQuoted " = " this.#fieldName
    println()
  end
end

template printFieldi fieldName:
  printField #fieldName
end

var int aiPrimitiveType_POINT 1
var int aiPrimitiveType_LINE 2
var int aiPrimitiveType_TRIANGLE 4
var int aiPrimitiveType_POLYGON 8

template areBitSet num bits:
  #num & #bits == #bits
end

func cstring assimp:primTypeDescr(int primType):
  if (primType == 0):
    ret "none"
  end

  template append str:
    if isFirst:
      descr ++= #str
    else:
      descr ++= ", " ++ #str
    end
    isFirst = false
  end

  isFirst := true
  descr := ""
  if (areBitSet primType aiPrimitiveType_POINT):
    append "Points"
  end
  if (areBitSet primType aiPrimitiveType_LINE):
    append "Lines"
  end
  if (areBitSet primType aiPrimitiveType_TRIANGLE):
    append "Triangles"
  end
  if (areBitSet primType aiPrimitiveType_POLYGON):
    append "Polygon"
  end

  ret descr
end

var int aiProcess_CalcTangentSpace 1
var int aiProcess_JoinIdenticalVertices 2
var int aiProcess_MakeLeftHanded 4
var int aiProcess_Triangulate 8
var int aiProcess_RemoveComponent 16
var int aiProcess_GenNormals 32
var int aiProcess_GenSmoothNormals 64
var int aiProcess_SplitLargeMeshes 128
var int aiProcess_PreTransformVertices 256
var int aiProcess_LimitBoneWeights 512
var int aiProcess_ValidateDataStructure 1024
var int aiProcess_ImproveCacheLocality 2048
var int aiProcess_RemoveRedundantMaterials 4096
var int aiProcess_FixInfacingNormals 8192
// var int aiProcess_OptimizeGraph 16384
var int aiProcess_SortByPType 32768
var int aiProcess_FindDegenerates 65536
var int aiProcess_FindInvalidData 131072
var int aiProcess_GenUVCoords 262144
var int aiProcess_TransformUVCoords 524288
var int aiProcess_FindInstances 1048576
var int aiProcess_OptimizeMeshes 2097152
var int aiProcess_OptimizeGraph 4194304
var int aiProcess_FlipUV 8388608
var int aiProcess_FlipWindingOrder 1048576

// var int aiProcess_ConvertToLeftHanded (aiProcess_MakeLeftHanded | aiProcess_FlipUVs | aiProcess_FlipWindingOrder)
// #define aiProcessPreset_TargetRealtime_Fast ( \
// 	aiProcess_CalcTangentSpace		|  \
// 	aiProcess_GenNormals			|  \
// 	aiProcess_JoinIdenticalVertices |  \
// 	aiProcess_Triangulate			|  \
// 	aiProcess_GenUVCoords           |  \
// 	aiProcess_SortByPType           |  \
// 	0 )

// #define aiProcessPreset_TargetRealtime_Quality ( \
// 	aiProcess_CalcTangentSpace				|  \
// 	aiProcess_GenSmoothNormals				|  \
// 	aiProcess_JoinIdenticalVertices			|  \
// 	aiProcess_ImproveCacheLocality			|  \
// 	aiProcess_LimitBoneWeights				|  \
// 	aiProcess_RemoveRedundantMaterials      |  \
// 	aiProcess_SplitLargeMeshes				|  \
// 	aiProcess_Triangulate					|  \
// 	aiProcess_GenUVCoords                   |  \
// 	aiProcess_SortByPType                   |  \
// 	aiProcess_FindDegenerates               |  \
// 	aiProcess_FindInvalidData               |  \
// 	0 )

// #define aiProcessPreset_TargetRealtime_MaxQuality ( \
// 	aiProcessPreset_TargetRealtime_Quality   |  \
// 	aiProcess_FindInstances                  |  \
// 	aiProcess_ValidateDataStructure          |  \
// 	aiProcess_OptimizeMeshes                 |  \
// 	0 )

type uint int

struct aiVector2D:
  float x y
end

func void aiVector2D:print(aiVector2D* this):
  print "aiVector2D(x=" this.x ", y=" this.y ")"
end

struct aiVector3D:
  float x y z
end

func void aiVector3D:print(aiVector3D* this):
  print "aiVector3D(x=" this.x ", y=" this.y ", z=" this.z ")"
end

struct aiQuaternion:
  float w x y z
end

func void aiQuaternion:print(aiQuaternion* this):
  print "aiQuaternion(w=" this.w ", x=" this.x ", y=" this.y ", z=" this.z ")"
end

struct aiMatrix3x3:
  float a1 a2 a3
  float b1 b2 b3
  float c1 c2 c3
end

func void aiMatrix3x3:print(aiMatrix3x3* this):
  print "aiMatrix3x3(TODO)"
end

/// row major. translate in (a4,b4,c4)
struct aiMatrix4x4:
  float a1 a2 a3 a4
  float b1 b2 b3 b4
  float c1 c2 c3 c4
  float d1 d2 d3 d4
end

func v3f transformNormal(aiMatrix4x4* mat, v3f v):
  ret mv3f(
      v.x * mat.a1 + v.y * mat.a2 + v.z * mat.a3,
      v.x * mat.b1 + v.y * mat.b2 + v.z * mat.b3,
      v.x * mat.c1 + v.y * mat.c2 + v.z * mat.c3)
end

func v3f transformVector(aiMatrix4x4* mat, v3f v):
  f := v.x * mat.d1 + v.y * mat.d2 + v.z * mat.d3 + mat.d4
  r := mv3f(
      v.x * mat.a1 + v.y * mat.a2 + v.z * mat.a3 + mat.a4,
      v.x * mat.b1 + v.y * mat.b2 + v.z * mat.b3 + mat.b4,
      v.x * mat.c1 + v.y * mat.c2 + v.z * mat.c3 + mat.c4)
  ret (r / f)
end

// func v3f transformVector(aiMatrix4x4* mat, v3f v):
//   ret (transformNormal mat v + mv3f mat.a4 mat.b4 mat.c4)
// end

func RBTransform aiMatrix4x4:toRBTransform(aiMatrix4x4* mat):
  trans := undef RBTransform
  trans.origin = transformVector mat mv3f(0.,0.,0.)
  trans.xaxis = transformNormal mat mv3f(1.,0.,0.)
  trans.yaxis = transformNormal mat mv3f(0.,1.,0.)
  trans.zaxis = transformNormal mat mv3f(0.,0.,1.)
  // trans.scale = (v3f:length trans.xaxis + v3f:length trans.yaxis + v3f:length trans.zaxis) / 3.0
  trans.scale = 1.0
  // RBTransform:makeNormalized &trans
  ret trans
end

func void aiMatrix4x4:print2(aiMatrix4x4* this, int indent_):
  indent := indent_
  times indent printChar(' ')
  println "aiMatrix4x4:"
  indent += 2
  times indent printChar(' ')
  println this.a1 ", " this.a2 ", " this.a3 ", " this.a4
  times indent printChar(' ')
  println this.b1 ", " this.b2 ", " this.b3 ", " this.b4
  times indent printChar(' ')
  println this.c1 ", " this.c2 ", " this.c3 ", " this.c4
  times indent printChar(' ')
  println this.d1 ", " this.d2 ", " this.d3 ", " this.d4
end

const int assimp:MAXLEN 1024
struct aiString:
  uint length
  char[1024] data
end

struct aiColor3D:
  float r g b
end

func cstring aiString:cstring(aiString* this):
  ret strdup(zmp:array:addr &(this.data))
end

func void aiString:print(aiString* this):
  printString aiString:cstring(this)
end

funcd cstring aiGetLegalString()
funcd int aiGetVersionMinor()
funcd int aiGetVersionMajor()
funcd int aiGetVersionRevision()

func void VertexStream:copyFromVector3D(VertexStream* this, aiVector3D* sourceVec_in):
  vertexPtr := cast float* this.data
  sourceVec := sourceVec_in
  for i 0 this.size:
    store (vertexPtr + 0) sourceVec*.x
    store (vertexPtr + 1) sourceVec*.y
    store (vertexPtr + 2) sourceVec*.z
    vertexPtr = vertexPtr + 3
    sourceVec = sourceVec + 1
  end
end

struct aiNode:
  aiString mName
  aiMatrix4x4 mTransformation
  aiNode* mParent
  uint mNumChildren
  aiNode** mChildren
  uint mNumMeshes
  uint* mMeshes
end

func void aiNode:print(aiNode* this, int indent):
  times indent printChar(' ')
  printString "aiNode '"
  aiString:print &(this.mName)
  println "':"
  aiMatrix4x4:print2 &this.mTransformation (indent+2)
  printField mNumChildren

  times (2+indent) printChar(' ')
  print this.mNumMeshes " mMeshes = "
  for meshnum 0 this.mNumMeshes:
    if (meshnum > 0):
      printString ", "
    end
    printInt load(ptradd this.mMeshes meshnum)
  end
  println()

  for childnum 0 this.mNumChildren:
    aiNode:print(load(ptradd this.mChildren childnum), indent+2)
  end
end

struct aiVertexWeight:
  uint mVertexId
  float mWeight
end

struct aiBone:
  aiString mName
  uint mNumWeights
  aiVertexWeight* mWeights
  aiMatrix4x4 mOffsetMatrix
end

struct aiFace:
  uint mNumIndices
  uint* mIndices
end

struct aiMesh:
  uint mPrimitiveTypes
  uint mNumVertices
  uint mNumFaces
  aiVector3D* mVertices
  aiVector3D* mNormals
  aiVector3D* mTangents
  aiVector3D* mBitangents
  (array aiVector3D* 4) mColors
  (array aiVector3D* 4) mTextureCoords
  uint[4] mNumUVComponents
  aiFace* mFaces
  uint mNumBones
  aiBone** mBones
  uint mMaterialIndex
end

// macro printField printF fieldName
//   fieldNameQuoted := cstring:quote fieldName.id
//   ret ${
//     times indent printChar(' ')
//     printString #fieldNameQuoted
//     printString " = "
//     #printF this.#fieldName
//     println()
//   end}
// end

func void aiMesh:print(aiMesh* this, int indent):
  printIndent indent
  printlnString "aiMesh:"
  seq:
    primDescr := assimp:primTypeDescr this.mPrimitiveTypes
    iprintln (indent+2) "mPrimitiveTypes = " primDescr
    dealloc primDescr
  end
  printField mNumVertices
  printField mNumFaces

  printIndent (indent+2)
  print "components="

  macro printUnlessNull fieldName:
    fieldNameQ := cstring:quote fieldName.id

    ret $:
      if isNotNull(this.#fieldName):
        printString #fieldNameQ
        printChar ' '
      end
    end
  end

  printUnlessNull mVertices
  printUnlessNull mNormals
  printUnlessNull mTangents
  printUnlessNull mBitangents
  println()

  printIndent (indent+2)
  printString "mNumUVComponents={"
  for i 0 4:
    if (i > 0):
      printString ", "
    end
    printInt zmp:array:get(this.mNumUVComponents, i)
  end
  printlnString "}"

  printFieldi mNumBones
  printFieldi mMaterialIndex
end

struct aiVectorKey:
  double mTime
  aiVector3D mValue
end

func void aiVectorKey:print(aiVectorKey* this):
  print "aiVectorKey("
  print "mTime=" this.mTime
  print ", mValue="
  vptr := fieldptr this mValue
  // aiVector3D:print &(this.mValue)
  aiVector3D:print vptr
  print ")"
end

struct aiQuatKey:
  double mTime
  aiQuaternion mValue
end

func void aiQuatKey:print(aiQuatKey* this):
  print "aiQuatKey(mTime=" this.mTime
  print ", mValue="
  aiQuaternion:print &this.mValue
  print ")"
end

type aiAnimBehaviour int
var int aiAnimBehaviour_DEFAULT 0
var int aiAnimBehaviour_CONSTANT 1
var int aiAnimBehaviour_LINEAR 2
var int aiAnimBehaviour_REPEAT 3

struct aiNodeAnim:
  aiString mNodeName

  uint mNumPositionKeys
  aiVectorKey* mPositionKeys

  uint mNumRotationKeys
  aiQuatKey* mRotationKeys

  uint mNumScalingKeys
  aiVectorKey* mScalingKeys

  aiAnimBehaviour mPreState
  aiAnimBehaviour mPostState
end

func void aiNodeAnim:print(aiNodeAnim* this, int indent):
  times indent printChar(' ')
  print "aiNodeAnim '"
  aiString:print &this.mNodeName
  println "':"
  printField mNumPositionKeys
  printField mNumRotationKeys
  printField mNumScalingKeys
  printField mPreState
  printField mPostState

  printIndent indent
  println "  mPositionKeys:"
  for posnum 0 this.mNumPositionKeys:
    printIndent (indent+4)
    aiVectorKey:print (this.mPositionKeys + posnum)
    println()
  end

  printIndent indent
  println "  mRotationKeys:"
  for rotnum 0 this.mNumRotationKeys:
    printIndent (indent+4)
    aiQuatKey:print (this.mRotationKeys + rotnum)
    println()
  end

  printIndent indent
  println "  mScalingKeys:"
  for scalenum 0 this.mNumScalingKeys:
    printIndent (indent+4)
    aiVectorKey:print (this.mScalingKeys + scalenum)
    println()
  end
end

struct aiAnimation:
  aiString mName
  double mDuration
  double mTicksPerSecond

  uint mNumChannels
  aiNodeAnim** mChannels
end

func void aiAnimation:print(aiAnimation* this, int indent):
  times indent printChar(' ')
  print "aiAnimation '"
  aiString:print &this.mName
  println "'"
  printField mDuration
  printField mTicksPerSecond
  printField mNumChannels
  for channum 0 this.mNumChannels:
    aiNodeAnim:print *(this.mChannels + channum) (indent+2)
  end
end

///-----------------------------------------------------------------------------
/// Section: aiMaterial.h
///-----------------------------------------------------------------------------

var cstring AI_DEFAULT_MATERIAL_NAME "DefaultMaterial"
var cstring AI_DEFAULT_TEXTURED_MATERIAL_NAME "TexturedDefaultMaterial"

var int aiTextureOp_Multiply 0
var int aiTextureOp_Add 1
var int aiTextureOp_Subtract 2
var int aiTextureOp_Divide 3
var int aiTextureOp_SmoothAdd 4
var int aiTextureOp_SignedAdd 5

var int aiTextureMapMode_Wrap 0
var int aiTextureMapMode_Clamp 1
var int aiTextureMapMode_Decal 3
var int aiTextureMapMode_Mirror 2

var int aiTextureMapping_UV 0
var int aiTextureMapping_SPHERE 1
var int aiTextureMapping_CYLINDER 2
var int aiTextureMapping_BOX 3
var int aiTextureMapping_PLANE 4
var int aiTextureMapping_OTHER 5

var int aiTextureType_NONE 0
var int aiTextureType_DIFFUSE 1
var int aiTextureType_SPECULAR 2
var int aiTextureType_AMBIENT 3
var int aiTextureType_EMISSIVE 4
var int aiTextureType_HEIGHT 5
var int aiTextureType_NORMALS 6
var int aiTextureType_SHININESS 7
var int aiTextureType_OPACITY 8
var int aiTextureType_DISPLACEMENT 9
var int aiTextureType_LIGHTMAP 10
var int aiTextureType_REFLECTION 11
var int aiTextureType_UNKNOWN 12

var int aiShadingMode_Flat 1
var int aiShadingMode_Gouraud 2
var int aiShadingMode_Phong 3
var int aiShadingMode_Blinn 4
var int aiShadingMode_Toon 5
var int aiShadingMode_OrenNayar 6
var int aiShadingMode_Minnaert 7
var int aiShadingMode_CookTorrance 8
var int aiShadingMode_NoShading 9
var int aiShadingMode_Fresnel 10

var int aiTextureFlags_Invert 1
var int aiTextureFlags_UseAlpha 2
var int aiTextureFlags_IgnoreAlpha 4

var int aiBlendMode_Default 0
var int aiBlendMode_Additive 1

struct aiUVTransform:
  aiVector2D mTransformation mScaling
  float mRotation
end

var int aiPTI_Float   1
var int aiPTI_String  3
var int aiPTI_Integer 4
var int aiPTI_Buffer  5
type aiPropertyTypeInfo int

func cstring aiPropertyTypeInfo:toCString(aiPropertyTypeInfo pti):
  if (pti == aiPTI_Float):
    ret "aiPTI_Float"
  elseif (pti == aiPTI_String):
    ret "aiPTI_String"
  elseif (pti == aiPTI_Integer):
    ret "aiPTI_Integer"
  elseif (pti == aiPTI_Buffer):
    ret "aiPTI_Buffer"
  end
  ret "invalid"
end

struct aiMaterialProperty:
  aiString mKey
  int mSemantic mIndex mDataLength
  aiPropertyTypeInfo mType
  cstring mData
end

func void aiMaterialProperty:print(aiMaterialProperty* this, int indent):
  iprintln indent "aiMaterialProperty"
  iprint (indent+2) "mKey = "
  aiString:print &this.mKey
  println()
  printFieldi mSemantic
  printFieldi mIndex
  printFieldi mDataLength
  iprintln (indent+2) "mType = " aiPropertyTypeInfo:toCString(this.mType)
  iprint (indent+2) "mData = "
  if (this.mType == aiPTI_Float):
    for fnum 0 (this.mDataLength/4):
      if (fnum > 0) print(", ")
      print *(cast float* this.mData + fnum)
    end
    println()
  elseif (this.mType == aiPTI_String):
    data := cast aiString* this.mData
    print '"'
    aiString:print data
    println '"'
  elseif (this.mType == aiPTI_Integer):
    for inum 0 (this.mDataLength/4):
      if (inum > 0) print(", ")
      print *(cast int* this.mData + inum)
    end
    println()
  elseif (this.mType == aiPTI_Buffer):
    println "buffer"
  else:
    println "invalid"
  end
end

struct aiMaterial:
  aiMaterialProperty** mProperties
  int mNumProperties
  int mNumAllocated
end

func void aiMaterial:print(aiMaterial* this, int indent):
  times indent printChar(' ')
  printlnString "aiMaterial"
  printFieldi mNumProperties
  printFieldi mNumAllocated
  for propnum 0 this.mNumProperties:
    aiMaterialProperty:print *(this.mProperties+propnum) (indent+2)
  end
end

// dfunc aiReturn aiGetMaterialProperty(aiMaterial* mat, cstring key, uint type, uint index, aiMaterialProperty** propOut)
// dfunc aiReturn aiGetMaterialFloatArray(
//     aiMaterial* pmat,
//     cstring pKey,
//     uint type,
//     uint index,
//     float* pOut,
//     uint* pMax)
// ASSIMP_API C_ENUM aiReturn aiGetMaterialIntegerArray(const C_STRUCT aiMaterial* pMat, 
//     const char* pKey,
// 	 unsigned int  type,
// 	 unsigned int  index,
//     int* pOut,
//     unsigned int* pMax)
// ASSIMP_API C_ENUM aiReturn aiGetMaterialColor(const C_STRUCT aiMaterial* pMat, 
//     const char* pKey,
// 	 unsigned int type,
//     unsigned int index,
// 	 C_STRUCT aiColor4D* pOut)
//  ASSIMP_API C_ENUM aiReturn aiGetMaterialString(const C_STRUCT aiMaterial* pMat, 
//     const char* pKey,
// 	 unsigned int type,
//     unsigned int index,
//     C_STRUCT aiString* pOut)
// ASSIMP_API unsigned int aiGetMaterialTextureCount(const C_STRUCT aiMaterial* pMat,  
// 	C_ENUM aiTextureType type);
// C_ENUM aiReturn aiGetMaterialTexture(const C_STRUCT aiMaterial* mat,
//     C_ENUM aiTextureType type,
//     unsigned int  index,
//     C_STRUCT aiString* path,
// 	C_ENUM aiTextureMapping* mapping	/*= NULL*/,
//     unsigned int* uvindex				/*= NULL*/,
//     float* blend						/*= NULL*/,
//     C_ENUM aiTextureOp* op				/*= NULL*/,
// 	C_ENUM aiTextureMapMode* mapmode	/*= NULL*/,
// 	unsigned int* flags                 /*= NULL*/)

///-----------------------------------------------------------------------------
/// Section: aiTexture.h
///-----------------------------------------------------------------------------

struct aiTexel:
  char b g r a
end

struct aiTexture:
  uint mWidth mHeight
  char[4] achFormatHint
  aiTexel* pcData
end

///-----------------------------------------------------------------------------
/// Section: aiLight.h
///-----------------------------------------------------------------------------

const uint aiLightSource_UNDEFINED 0
const uint aiLightSource_DIRECTIONAL 1
const uint aiLightSource_POINT 2
const uint aiLightSource_SPOT 3

type aiLightSourceType uint

struct aiLight:
  aiString mName
  aiLightSourceType mType
  aiVector3D mPosition mDirection
  float mAttenuationConstant mAttenuationLinear mAttenuationQuadratic
  aiColor3D mColorDiffuse mColorSpecular mColorAmbient
  float mAngleInnerCone mAngleOuterCone
end

///-----------------------------------------------------------------------------
/// Section: more
///-----------------------------------------------------------------------------

struct aiCamera:
  aiString mName
  aiVector3D mPosition mUp mLookAt
  float mHorizontalFOV
  float mClipPlaneNear mClipPlaneFar
  float mAspect
end

func void aiCamera:print(aiCamera* cam, int indent):
  iprint indent "aiCamera "
  aiString:print &(cam.mName)
  println()
  iprintln indent "  mPosition = " cam.mPosition
  iprintln indent "  mUp = " cam.mUp
  iprintln indent "  mLookAt = " cam.mLookAt
  iprintln indent "  mClipPlaneNear = " cam.mClipPlaneNear
  iprintln indent "  mClipPlaneFar = " cam.mClipPlaneFar
  iprintln indent "  mAspect = " cam.mAspect
end

struct aiScene:
  int mFlags
  aiNode* mRootNode
  int mNumMeshes
  aiMesh** mMeshes
  int mNumMaterials
  aiMaterial** mMaterials
  int mNumAnimations
  aiAnimation** mAnimations
  int mNumTextures
  aiTexture** mTextures
  int mNumLights
  aiLight** mLights
  int mNumCameras
  aiCamera** mCameras
end

func int aiNode:totalCount(aiNode* this):
  count := 1
  for childNum 0 this.mNumChildren:
    count = count + aiNode:totalCount *(this.mChildren + childNum)
  end

  ret count
end

func int aiScene:totalNodeCount(aiScene* this):
  ret aiNode:totalCount(this.mRootNode)
end

funcd aiScene* aiImportFile(cstring fileName, int flags)
funcd void aiReleaseImport(aiScene* scene)

funcd cstring aiGetErrorString()

func void aiScene:print(aiScene* this):
  indent := 2

  println "aiScene"
  print "  mFlags="
  printBits this.mFlags
  println()
  printFieldi mNumMeshes
  printFieldi mNumMaterials
  printFieldi mNumAnimations
  printFieldi mNumTextures
  printFieldi mNumLights
  printFieldi mNumCameras
  println "  mRootNode:"
  aiNode:print this.mRootNode 4
  println "  mMeshes(" this.mNumMeshes "):"
  for meshnum 0 this.mNumMeshes:
    aiMesh:print load(this.mMeshes + meshnum) 4
  end
  println "  mAnimations(" this.mNumAnimations "):"
  for animnum 0 this.mNumAnimations:
    aiAnimation:print *(this.mAnimations + animnum) 4
  end
  println "  mCameras (" this.mNumCameras "):"
  for camnum 0 this.mNumCameras:
    aiCamera:print *(this.mCameras + camnum) 4
  end
  println "  mMaterials (" this.mNumMaterials "):"
  for matnum 0 this.mNumMaterials:
    aiMaterial:print load(ptradd this.mMaterials matnum) 4
  end
  println "  mTextures (" this.mNumTextures "):"
  println "  mLights (" this.mNumLights "):"
  println()
end

func Mesh* aiMesh:toMesh(aiMesh* aim):
  Mesh:define m aim.mNumVertices:
    gl_Position GL_FLOAT 3
    gl_Normal GL_FLOAT 3
  end

  VertexStream:copyFromVector3D (m.streams + 0) aim.mVertices
  VertexStream:copyFromVector3D (m.streams + 1) aim.mNormals

  ret m
end

func Mesh* aiScene:toMesh(aiScene* this):
  ret aiMesh:toMesh(*this.mMeshes)
end


