/*
!verify off
!load libglfw.dylib
!load libGLEW.dylib
*/

(include "opengl20.zomp")
(include "glfw.zomp")

(template assert_GL_TRUE msg (rest form) (
  (if (int.notEqual GL_TRUE #form)
    (printlnString #msg)
    ())
  ))

// abstuerze in opengl apps evtl. durch while macro bedingt? */
// -> schleife mit while ergibt crash */
// -> mit label + branch (scheinbar) nicht */
// zeit bis absturz messen, kucken ob label-variante auch abkackt */
// generierten code ankucken */
//
// ergebnisse:
// schmiert mit while ab, bei labeln laeuft es mehrere stunden
// schmiert nicht mit forever ab (auch bei benutzung von uniqueId)
//
// var im loop ein problem? (siehe geinlinetes do/:while)

(macro forever (rest code) (
  (uniqueId start "forever_start")
  (uniqueId fakelabel "forever_faking")
  (uniqueId thetruth "forever_trude")
  (ret `(
    (var bool #thetruth true)
    (label #start)
    (label #fakelabel)
    #code
    (branch #thetruth #start #fakelabel)
    ))
  ))

(macro uniqueIds purpose (rest ids) (
  (var (ptr ast) code (simpleAst "seq"))
  
  (forEachAstChild child ids (
    (addChild code `(uniqueId #child #purpose))
    ))
  
  (ret code)
  ))

(macro do code while cond (
  (uniqueIds "dowhile" start end testVar)
  
  (ret `(
    (label #start)
    #code
    (var bool #testVar #cond)
    (branch #testVar #start #end)
    (label #end)
    ))
  ))

(func int main () (
  (assert_GL_TRUE "init glfw failed" (glfwInit))

  (glfwOpenWindow 400 300 8 8 8 8 16 0 GLFW_WINDOW)

  // crashes for var test at 2,3 - no crash at 1
  //1
//   (var bool test true) */
//   (label start) */
  //2

  (while true (
    (glClear GL_COLOR_BUFFER_BIT)
    (glfwSwapBuffers)
    ))

  //3  
//   (branch test start end) */
//   (label end) */
  
  (ret 0)
  ))

