/**
Demonstrates using OpenGL.

Enter this into toplevel to load libs:
x!load libglfw.dylib
x!load libGLEW.dylib

You will need to copy the file libglfw.dylib from the lib/macosx dir
of GLFW 2.6 into the zomp main dir

Conventions for function names:
  send* - sending vertex data (to be included in glbegin/end)
  render* - send geometry (outside of glBegin/glEnd)
  draw* - setup material and render
*/

(include "opengl20.zomp")
(include "glfw.zomp")

(func void glfwSetWindowTitle ((cstring title)))

(func cstring gluErrorString ((GLenum error)))

(func void printGLError () (
  (var int error 0)

  (while ((assign error (glGetError)) (int.notEqual error 0)) (
    (const cstring message (gluErrorString error))
    (printString "OpenGL error ")
    (printInt error)
    (printString ": ")
    (printlnString message)
    ))
  ))

(func void printGlfwVersion () (
  (var int major 0)
  (var int minor 0)
  (var int rev 0)

  (glfwGetVersion (ptr major) (ptr minor) (ptr rev))
  
  (printString "Glfw version: ")
  (printString "major = ") (printInt major)
  (printString ", minor = ") (printInt minor)
  (printString ", rev = ") (printInt rev)
  (println)
  ))

(const int windowWidth 400)
(const int windowHeight 300)

(func bool openWindow () (
  (printlnString "Opening window... ")
//   (glfwOpenWindowHint GLFW_FSAA_SAMPLES GL_TRUE) */
  (var int result
    (glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW))
  (const bool succeeded (int.equal result GL_TRUE))

  (if succeeded
    (printlnString "ok")
    (printlnString "failed") )
  (ret succeeded)
  ))

(var bool wasInitialized false)

(func void init () (
  (if wasInitialized
    (printlnString "Already initialized")
  // else
    (
    (zompLoadLib "libglfw.dylib")
    (zompLoadLib "libGLEW.dylib")
    
    (glfwInit)
    (openWindow)
    (glewInit)
    (glfwSetWindowTitle "renderTest")
    (glClear GL_COLOR_BUFFER_BIT)
    (glfwSwapBuffers)
    (printGLError)
    (assign wasInitialized true)
    ))
  ))

(func void clearScreen () (
  (glClearColor 1.0 1.0 1.0 1.0)
  (glClear GL_COLOR_BUFFER_BIT)
  (glfwSwapBuffers)
  (printGLError)
  ))


(func void renderTriangle () (
  (glTranslatef 0.0 0.0 1.0)
  (rendergl GL_TRIANGLES
    (glVertex3f -1.0 0.0 0.0)
    (glVertex3f 0.0 1.0 0.0)
    (glVertex3f 1.0 0.0 0.0) )
  ))

(func bool isPressed ((int key)) (
  (int.equal (glfwGetKey key) GL_TRUE)
  ))

// (func bool bool.not ((bool v)) (
//   (bool.xor v true) ))

(func void setupProjection () (
  (var int width 0)
  (var int height 0)
  (glfwGetWindowSize (ptr width) (ptr height))
  (var double aspect (double.fdiv (int.toDouble width) (int.toDouble height)))
  
  (glMatrixMode GL_PROJECTION)
  (glLoadIdentity)
  (gluPerspective 90.0d aspect 1.0d 100.0d)
  (glMatrixMode GL_MODELVIEW)
  (glLoadIdentity)
  ))

(func void renderQuadOverScreen () (
  (glMatrixMode GL_PROJECTION)
  (glLoadIdentity)
  (glMatrixMode GL_MODELVIEW)
  (glLoadIdentity)
  (renderQuad 1.0)
  ))

(macro free ptr ())


(func GLuint makeBillboard ((int width) (int height)) (
//   (const GLuint program (createShader
// "
// varying vec3 normal;

// void main(void) {
//   gl_Position = ftransform();
//   normal = vec4( 1.0, 0.0, 0.0 );
// }
// "

// "
// varying vec3 normal;

// void main(void) {
//   gl_FragColor = vec4( 1.0, 1.0, 0.0, 1.0 );
// }
// "))
//   (printString "billboard shader id = ")
//   (printInt program)
//   (println)

  (var (ptr framebuffer) fbo (fbo_make 1024 1024))
  (fbo_attachColorTexture fbo)
  (fbo_create fbo)
  (fbo_bind fbo)
  
  (saveTransforms
    (glClearColor .0 1.0 0.0 0.0)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 90.0d 1.0d 1.0d 100.0d)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      0.d 0.d 1.d
      0.d 0.d 0.d
      0.d 1.d 0.d)

//     (glUseProgram program)

    (rendergl GL_TRIANGLE_FAN
      (glColor4f 1. 1. 1. 1.)
      (glVertex3f 0. 0. 0.)
      (sendCircle)
      )

//     (glUseProgram 0)
//     (glDeleteProgram program)  => GL_INVALID_OPERATION
    )
    
  (fbo_makeColorTexture fbo)
  (fbo_unbind fbo)
    
  (ret (getField fbo colorTexture))
  ))

(template int.neg x (int.sub 0 x))


(var double autoTimeout 100000.0)

(func int rand ())

(func int random ((int max)) (
  (ret (int.srem (rand) max))
  ))

// (testf (printlnInt (random 10)))

(template float.neg x (float.sub 0. #x))

  
(func void anim () (
  (init)
  (glfwPollEvents)
  (glfwPollEvents)


  (glEnable GL_DEPTH_TEST)
  (glDepthFunc GL_LEQUAL)

//   (var GLuint shader (createShader
// "
// varying vec2 texCoord;
// void main(void) {
//   gl_Position = ftransform();
//   texCoord = gl_MultiTexCoord0.xy;
// }
// "

// "
// varying vec2 texCoord;
// uniform sampler2D texture;

// void main(void) {
//   gl_FragColor = vec4(0.1, 0.1, 0.1, 0.0) + texture2D(texture, texCoord);
// }
// " ))

//   (var GLuint billboard (makeBillboard 128 128))
  (var GLuint billboard 0)
  
  (const double startTime (glfwGetTime))

  (const int sphereCount 100)
  (var (ptr float) positions (malloc float (int.mul 3 sphereCount)))
  (template foreachSphere indexVar posVar code (
    (var int #indexVar 0)
    (var (ptr float) #posVar (nullptr float))
    (while (int.sless #indexVar sphereCount) (
      (assign #posVar (ptradd positions (int.mul #indexVar 3)))
      #code
      (assign #indexVar (int.add #indexVar 1))
      ))
    ))

  (template frand ((int.toFloat (random 10))))

  (foreachSphere index pos (
    (store (ptradd pos 0) (frand))
    (store (ptradd pos 1) (frand))
    (store (ptradd pos 2) (frand))
    ))

  (var bool abortLoop false)
  
  (while (bool.not abortLoop) (
    (if (isPressed GLFW_KEY_ESC) (assign abortLoop true) ())
    (if (double.ogreater (double.sub (glfwGetTime) startTime) autoTimeout)
      (assign abortLoop true) ())
    
    (glClearColor 0. 0. 0. 1.)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (autoSetupViewport)
    (setupProjection)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (glTranslatef -1.0 -0.5 -32.0)

//     (const double z (double.mul 2.0d (sin (glfwGetTime)))) */
//     (glTranslated 0.0d 0.0d z) */
//     (glRotated (double.mul 500.0d (sin (double.mul (glfwGetTime) 1.3d))) 0.0d 0.0d 1.0d) */

    (showCoordSys 3.0)
    
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_NOTEQUAL 0.0)

    (glColor4f 1.0 1.0 1.0 1.0)
//     (glUseProgram shader)
//     (glBindTexture2D billboard)
    (renderQuad 2.0)

    (glTranslatef 1. 1. 1.)
    (renderQuad 2.0)

    (foreachSphere index2 pos2 (
      (var float x (load (ptradd pos2 0)))
      (var float y (load (ptradd pos2 1)))
      (var float z (load (ptradd pos2 2)))
      
      (glTranslatef x y z)
      (renderQuad 2.0)
      (glTranslatef (float.neg x) (float.neg y) (float.neg z))
      ))

//     (glBindTexture2D 0)
//     (glUseProgram 0)
    
    (glfwSwapBuffers)
    (glfwPollEvents)
    ))

//   (glDeleteProgram shader)

  (drawPausedOverlay)
    
  (printGLError)
  ))

(func void testExtensions () (
  (init)
  
  (glfwPollEvents)
  (glfwPollEvents)
  
  (if (int.notEqual (glfwInit) GL_TRUE) (
    (printlnString "glfw initialization failed")
    (ret void))
    ())

  (var GLuint program (createShader
"
void main(void) {
  gl_Position = ftransform();
}
"
"
void main(void) {
  gl_FragColor = vec4(0., 1., 0., 1.);
}
"))

  (glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW)

  (var bool abort false)

  (while (bool.not abort) (
    (if (int.equal (glfwGetKey GLFW_KEY_ESC) GL_TRUE) (
      (assign abort true)
      )())

    (glClearColor 1. 1. 0. 1.)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (autoSetupViewport)

    (setupProjection)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (glTranslatef -1.0 -0.5 -5.0)
    (glColor4f 1. 1. 1. 1.)
    (drawOrientationGrid)

    (glUseProgram program)
    (renderQuad 1.0)
    (glUseProgram 0)
  
    (glfwSwapBuffers)
    (glfwPollEvents)
    ))

  (drawPausedOverlay)
  (printGLError)
  ))

(func int main () (
  (zompLoadLib "libglfw.dylib")
  (zompLoadLib "libGLEW.dylib")
  (init)
  (ret 0)
  ))
  
// (testf (
//   (assign autoTimeout 6000.0)
//   (anim)
// //   (testExtensions)
//   ))


