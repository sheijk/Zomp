/**
 * developing an algol/common lisp like loop construct
 *
 */
// TODO: make sure that all orders of modifiers yield the same result,
// especially interaction of if and while

requireLibs libcee

struct Loop:
  ast* init test body
  cstring initLabel testLabel bodyLabel exitLabel continueLabel
  cstring counterName
end

func void loop_modifier_for(Loop* loop, ast* args, int* childNum):
  name := getField ast:child(args, childNum* + 1) id
  childNum*++
  counterName := loop.counterName
  init := loop.init
  loop.init = ${seq:
    var int #name #counterName
    #init
  end}
  test := loop.test
  loop.test = ${seq:
    #name = #counterName
    #test
  end}
end

func void loop_modifier_to(Loop* loop, ast* args, int* childNum):
  supremum := getField ast:child(args, ++childNum*) id
  counterName := loop.counterName
  exitLabel := loop.exitLabel
  test := loop.test
  loop.test = ${seq:
    #test
    if (#counterName >= #supremum):
      branch #exitLabel
    end
  end}
end

func void loop_modifier_from(Loop* loop, ast* args, int* childNum):
  startValue := getField ast:child(args, ++childNum*) id
  counterName := loop.counterName
  init := loop.init
  loop.init = ${seq:
    #counterName = #startValue
    #init
  end}
end

func void loop_modifier_if(Loop* loop, ast* args, int* childNum):
  cond := ast:child args ++childNum*
  continueLabel := loop.continueLabel
  test := loop.test
  loop.test = ${seq:
    #test
    if !(#cond):
      branch #continueLabel
    end
  end}
end

func void loop_modifier_while(Loop* loop, ast* args, int* childNum):
  cond := ast:child args ++childNum*
  test := loop.test
  exitLabel := loop.exitLabel
  loop.test = ${seq:
    #test
    if !(#cond):
      branch #exitLabel
    end
  end}
end

macro loop modsAndBody...:
  loop := undef Loop
  loop.init = ${println "[loop.init]"}
  loop.test = ${println "[loop.test]"}
  loop.body = ast:child modsAndBody (modsAndBody.childCount-1)
  loop.initLabel = "no init label.."
  loop.testLabel = newUniqueNameFor "loop.test"
  loop.bodyLabel = newUniqueNameFor "loop.body"
  loop.counterName = newUniqueNameFor "loop.counter"
  loop.exitLabel = newUniqueNameFor "loop.exit"
  loop.continueLabel = newUniqueNameFor "loop.continue"

  childNum := 0
  while (childNum < modsAndBody.childCount - 1):
    child := ast:child(modsAndBody, childNum)
    if (child.id ==_str "for"):
      loop_modifier_for(&loop, modsAndBody, &childNum)
    elseif (child.id ==_str "to"):
      loop_modifier_to(&loop, modsAndBody, &childNum)
    elseif (child.id ==_str "from"):
      loop_modifier_from(&loop, modsAndBody, &childNum)
    elseif (child.id ==_str "if"):
      loop_modifier_if(&loop, modsAndBody, &childNum)
    elsewhile (child.id ==_str "while"):
      loop_modifier_while(&loop, modsAndBody, &childNum)
    else:
      msg2 := "Found invalid modifier in loop '" ++ child.id ++ "'"
      ret ${error #msg2}
    end

    ++childNum
  end

  if (childNum != modsAndBody.childCount - 1):
    msg := "Processed " ++ toCString childNum ++ " childs instead " ++ toCString modsAndBody.childCount
    ret ${error #msg}
  end

  counterName := loop.counterName
  init := loop.init
  testLabel := loop.testLabel
  test := loop.test
  bodyLabel := loop.bodyLabel
  body := loop.body
  exitLabel := loop.exitLabel
  continueLabel := loop.continueLabel

  mret ${seq:
    var int #counterName 0
    #init
    label #testLabel
    #test
    label #bodyLabel
    #body
    label #continueLabel
    ++#counterName
    branch #testLabel
    label #exitLabel
  end}
end

func int main():
  count := 0
  loop for i from 3 to 20 for x if (i > 5) while (x < 19):
    // if (count >= 100) ret(99)
    print "  count = " count
    print "  i = " i
    print "  x = " x
    println()
    ++count
  end

  ret 0
end


