///
/// various ways of using quotes
///

(func (ptr ast) makeSampleAst () (
/// a simple quotation
  `(main arg0 (arg1 arg10 arg11) arg2 (arg3 (arg30 arg300 arg 301) arg31))
  ))

(xmacro macroPrint (
/// a simple macro using a quotation
  `(printlnString "Generated by a macro")
  ))

(xmacro dotwice code (
/// simple antiquotations
  `((#code) (#code))
  ))

(func void usingAntiquotes () (
  (var (ptr ast) name `(you))
  (printAst `(hello #name) 0)
  ))

(func void nestedQuotes () (
  (printAst `(toplevel `(nested quote more args)) 0)
  ))

(func void nestedAntiquotes () (
  (var (ptr ast) name `(foobar blah))
  (printAst `(toplevel `(nested #name foo)) 0)
  ))
  
(testf ((nestedAntiquotes)))

(func void quoteAsIs () (
  (printAst ``(will be left as it is #(even if antiquoted)) 0)
  ))
  
(xmacro printit tree (
  (printAst tree 1)
  (ret `(func void test () ()))
  ))

(printit (foo bar #baz))

/// TODO nested quotations and antiquotations
// ``(foo #bar) -> antiquotations don't work here */
// `(foo #bar) -> antiquotations work here */

// alternativen: */
// `(foo bar `(nested ##(replaced))) */
// (replace placeholder expr `(foo bar `(nested placeholder))) */
// `(foo bar `(nested #_2(replaced))) */

(func int main () (
  (printlnString "Sample ast:")
  (printAst (makeSampleAst) 0)
  (macroPrint)
  (dotwice (printlnString "printed again and again"))
  
  (ret 1)
  ))
  
