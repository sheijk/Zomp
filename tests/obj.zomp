/**

!verify off

* A simple .obj loader

!load libglfw.dylib
!load libGLEW.dylib
*/

!syntax indent

include "opengl20.zomp"
include "glfw.zomp"
include "tests/glutils.zomp"

//------------------------------------------------------------------------------
// base lib

template macro:failUnless cond
  unless #{cond}
    ret ${error expression is false #{cond}}
  end
end

macro uniqueIds purpose ids...
  var ast* code ${seq}

  forEachAstChild child ids
    addChild code ${uniqueIds #child #purpose}
  end

  ret code
end

/// if statement
///
/// Usage example:
/// 
/// if a > 10 then
///   print "It's bigger!"
/// else if a < 5 then
///   print "It's smaller!"
/// else
///   print "Neither to big nor to small. Purrfect"
/// end
macro if2 cond then onTrue remArgs...
  println()

  macro:failUnless cstring:equal(getField(then, id), "then")

  uniqueId endLabel "if_end"

  var astp code ${seq}

  addChild code ${when #cond
    #onTrue
    branch #endLabel
  end}

  var int currentArg 0
  const int argCount getField(remArgs, childCount)

  while currentArg+3 <= argCount
    var astp econd ast:child(remArgs, currentArg+1)
    var astp eexpr ast:child(remArgs, currentArg+2)

    addChild code ${seq
      when #econd
        #eexpr
        branch #endLabel
      end
    end}

    currentArg = currentArg + 3
  end

  when currentArg+1 < argCount
    var astp elseCode ast:child(remArgs, currentArg+1)

    addChild code elseCode
  end

  addChild code ${label #endLabel}

  ret code
end

/// Allocate storage and initialize variable
/// `new Foo a b c' does the same as `var Foo* this (malloc Foo); Foo:init(this,a,b,c); this'
macro new type args...
  uniqueId name "new"

  var ast* initCall astFromString(cstring:concat(getField(type, id), ":init"))
  addChild initCall astFromString(name)
  forEachAstChild arg args
    addChild initCall arg
  end

  var ast* code ${seq}
  addChild code ${var (ptr #type) #name (malloc #type)}
  addChild code initCall
  addChild code astFromString(name)

  ret code
end

type IntArray
  int size
  int* elements
end

func void IntArray:init(IntArray* this, int size)
  setField this size size
  setField this elements malloc(int, size)
end

func void IntArray:set(IntArray* array, int index, int value)
  assert index < getField(array, size)
  store ptradd(getField(array, elements), index) value
end

// func void test()
//   var IntArray* arr new(IntArray, 10)
//   IntArray:set arr 0 123
// end

// func void test()
//   var int result main()
//   printString "main() returned "
//   printlnInt result
// end

//------------------------------------------------------------------------------
// mesh utils

type VertexStream
  int size
  float* data
end

func void VertexStream:init(VertexStream* this, int size)
  setField this size size
  setField this data (malloc float size)
end

type Mesh
  int size
  VertexStream positions
  IntArray indices
end

func Mesh* makeMesh(int vertexCount, int indexCount)
  var Mesh* m (malloc Mesh)

  setField m size vertexCount
  VertexStream:init(fieldptr m positions, vertexCount)
  IntArray:init(fieldptr m indices, indexCount)

  ret m
end

func void Mesh:setVertex(Mesh* this, int num, float x, float y, float z)
  var VertexStream* vertices fieldptr(this, positions)
  var float* vertArray getField(vertices, data)

  store ptradd(vertArray, 3 * num + 0) x
  store ptradd(vertArray, 3 * num + 1) y
  store ptradd(vertArray, 3 * num + 2) z
end

func void Mesh:clear(Mesh* this)
  var int* indices getField(fieldptr this indices, elements)
  var int indexCount getField(fieldptr this indices, size)

  for indexNum 0 indexCount
    store ptradd(indices, indexNum) 0
  end

  var int vertexCount getField(this, size)
  for vertexNum 0 vertexCount
    Mesh:setVertex(this, vertexNum, 0., 0., 0.)
  end
end

func void Mesh:print(Mesh* this)
  var int indexCount getField(fieldptr(this, indices), size)

  printInt indexCount
  printString " indices"

  var int* indices getField(fieldptr(this, indices), elements)

  for indexNum 0 indexCount
    if2 int:mod(indexNum, 4) == 0 then
      println()
    else
      printString " "
    end
    var int index load(ptradd(indices, indexNum))
    printInt index
  end

  println()

  var float* vertex getField(fieldptr(this, positions), data)
  var int vertexCount getField(this, size)

  printInt vertexCount
  printlnString " vertices"

  for vertexNum 0 vertexCount
    printString "("
    printFloat load(ptradd(vertex, 0))
    printString ", "
    printFloat load(ptradd(vertex, 1))
    printString ", "
    printFloat load(ptradd(vertex, 2))
    printString ")"
    println()
    vertex = ptradd(vertex, 3)
  end

  println()
end

func Mesh* makeCube(float size)
  var Mesh* cube makeMesh(8, 4 * 6)

  Mesh:setVertex(cube, 0, float:neg 1., float:neg 1., float:neg 1.)
  Mesh:setVertex(cube, 1, float:neg 1., float:neg 1.,  1.)
  Mesh:setVertex(cube, 2, float:neg 1.,  1., float:neg 1.)
  Mesh:setVertex(cube, 3, float:neg 1.,  1.,  1.)
  Mesh:setVertex(cube, 4,  1., float:neg 1., float:neg 1.)
  Mesh:setVertex(cube, 5,  1., float:neg 1.,  1.)
  Mesh:setVertex(cube, 6,  1.,  1., float:neg 1.)
  Mesh:setVertex(cube, 7,  1.,  1.,  1.)

  var int* indices getField(fieldptr(cube, indices), elements)

  ret cube
end


//   template setCubeSide num a b c d
//     store ptradd(indices, 4 * #num + 0) #a
//     store ptradd(indices, 4 * #num + 1) #b
//     store ptradd(indices, 4 * #num + 2) #b
//     store ptradd(indices, 4 * #num + 3) #d
//   end

// func void test()
//   var char zero '\0'
//   printChar(zero)
// end

// macro File:forEachLine fileName lineVar onLine
//   uniqueId fileVar "file"
//   uniqueId bufferSize "file"
//   uniqueId eof "file"
//   uniqueId result "file"
//   uniqueId nothingRead "file"

//   var ast* code ${
//     var FILE* #fileVar fopen(#fileName, "r")
//     var int #bufferSize 1000
//     var char* #lineVar malloc(char, #bufferSize)

//     var bool #eof false

//     while bool:not(#eof)
//       var char* #result fgets(#lineVar, #bufferSize, #fileVar)

//       #onLine

//       var bool #nothingRead #result ==_ptr nullptr(char)
//       #eof = #nothingRead
//     end

//     fclose(#fileVar)
//   end}

//   ret code
// end

// func void test()
//   var char* chr malloc(char)
//   store chr 'x'
//
//   printChar load(chr)
//   println()
// end

// macro Cstring:forEachChar string char onChar
//   uniqueId ptr "forEachChar"

//   mret ${
//     var char* #ptr #string
//     while bool:not( char:equal(load(#ptr), '\0') )
//       var char #char load(#ptr)
//       #onChar
//       #ptr = ptradd(#ptr, 1)
//     end
//   end}
// end macro

// func void printLine(char* line)
//   var char* ptr line
//   while bool:not( char:equal(load(ptr), '\0') )
//     var char chr load(ptr)
//     printChar chr
//     ptr = ptradd(ptr, 1)
//   end
// end

// macro Cstring:forEachChar string char onChar
//   uniqueId ptr "forEachChar"

//   mret ${
//     var char* ptr line
//     while bool:not( char:equal(load(ptr), zero) )
//       var char chr load(ptr)
//       printChar chr
//       ptr = ptradd(ptr, 1)
//     end
//   end}
// end macro

// func void printLine(char* line)
//   var char zero '\0'

//   Cstring:forEachChar line chr
//     printChar chr
//   end
// end

// func void test()
//   printLine "abc"
// end

// func Mesh* Mesh:loadPly(cstring fileName)

//   File:forEachLine fileName buffer
//     printString("=> ")

//     printLine(buffer)
//   end

//   ret nullptr(Mesh)
// end

// func void test()
//   var Mesh* mesh Mesh:loadPly("data/test.ply")
// end

//------------------------------------------------------------------------------

var int windowWidth 400
var int windowHeight 300
var bool initCalled false

func void init()
  if2 bool:not(initCalled) then
    glfwInit()
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glewInit()
    times 2 glfwPollEvents()

    printString "Initialized"
    println()

    initCalled = true
  else
    printString "Already initialized"
    println()
  end
end

var float angle 0.0

template coloredLine r g b
  glColor4f #r #g #b 1.
  glVertex3f 0. 0. 0.
  glVertex3f #r #g #b
end

func int main()
  init()

  glMatrixMode( GL_PROJECTION )
  glLoadIdentity()
  const double aspect int:toDouble(windowWidth) /_d int:toDouble(windowHeight)
  gluPerspective( 90.0d, aspect, 1.0d, 100.0d )

  var Mesh* mesh makeCube(1.0)
  Mesh:print(mesh)

  var float time 0.0
  var bool running true

  while running
    time = double:toFloat(glfwGetTime())
    angle = time *_f 128.0

    glClearColor(0.0, 0.0, 0.0, 1.0)
    glClear int:or(GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT)

    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
    glTranslatef( 0., 1., float:neg(4.) )
    glRotatef( angle, 0., 1., 0. )

    rendergl GL_LINES
      coloredLine 1. 0. 0.
      coloredLine 0. 1. 0.
      coloredLine 0. 0. 1.
    end

    // drawCoordSys( 8.0 )

    glfwSwapBuffers()
    glfwPollEvents()
    running = bool:not( isPressed(GLFW_KEY_ESC) )
  end

  drawPausedOverlay()
  glfwSwapBuffers()
  glfwPollEvents()

  printlnString "cu"

  ret 0
end


