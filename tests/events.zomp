
require "libs/libcee.zomp"

///-----------------------------------------------------------------------------
/// Section: list
///-----------------------------------------------------------------------------

func cstring List:listTypeName(cstring memberType):
  ret (memberType ++ "_List")
end

macro defineListType memberT:
  listT := ast:fromString List:listTypeName(memberT.id)
  code := ${seq:
    struct #listT:
      #memberT data
      #listT* next
    end
    func void INITFUNCNAME(#listT* this, #memberT data, #listT* next):
      this.data = data
      this.next = next
    end
  end}
  ast:replace code "INITFUNCNAME" ast:fromString(listT.id ++ ":init")
  ret code
end

defineListType int
defineListType float

macro makeList type nums...:
  listT := ast:fromString(type.id ++ "_List")
  list := ${nullptr #listT}
  i := nums.childCount - 1
  while (i >= 0):
    num := ast:child(nums, i)
    list = ${new #listT #num #list}
    --i
  end

  ret list
end

macro List:foreach_ptr list indexVar dataVar code:
  uniqueId current "Current_list_item"

  ret ${seq:
    #current := #list
    #indexVar := 0
    while isNotNull(#current):
      #dataVar := fieldptr #current data
      #code
      ++(#indexVar)
      #current = #current.next
    end
  end}
end

macro List:foreach list indexVar dataVar code:
  uniqueId current "Current_list_item"

  ret ${seq:
    #current := #list
    #indexVar := 0
    while isNotNull(#current):
      #dataVar := #current.data
      #code
      ++(#indexVar)
      #current = #current.next
    end
  end}
end

///-----------------------------------------------------------------------------
/// Section: events
///-----------------------------------------------------------------------------

defineListType astp

func cstring eventVarName(cstring id):
  ret ("event_" ++ id)
end

macro defineEvent id:
  varname := eventVarName id.id
  ret ${seq:
    var astp_List* #varname null
  end}
end

macro onEvent id handlerId code:
  varname := eventVarName id.id
  handlerName := "on_event_" ++ id.id ++ "_" ++ handlerId.id
  handlerSig := ${#handlerName
  ret ${seq:
    func void #handlerSig:
      #code
    end
    macro mtmp:
      newList := malloc astp_List
      newList.next = #varname
      newList.data = ${#handlerSig}
      #varname = newList
      ret ${}
    end
    mtmp
  end}
end

defineEvent init

onEvent init:
  println "Initializing!"
end

macro triggerEvent id:
  varname := eventVarName id.id
  ret ${seq:
    macro mtmp:
      code := ${}
      List:foreach #varname i icode:
        ast:addChild code icode
      end
      ret code
    end
    mtmp
  end}
end

func void test():
  println "will init now"
  triggerEvent init
end


