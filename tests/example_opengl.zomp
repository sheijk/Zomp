/**

!verify off

* A simple .obj loader

!load libglfw.dylib
!load libGLEW.dylib
*/

!syntax indent

//------------------------------------------------------------------------------
// basic control flow

/// if statement
///
/// Usage example:
/// 
/// if a > 10 then
///   print "It's bigger!"
/// else if a < 5 then
///   print "It's smaller!"
/// else
///   print "Neither to big nor to small. Purrfect"
/// end
macro if2 cond then onTrue remArgs...
  println()

  macro:failUnless cstring:equal(getField(then, id), "then")

  uniqueId endLabel "if_end"

  var astp code ${seq}

  addChild code ${when #cond
    #onTrue
    branch #endLabel
  end}

  var int currentArg 0
  const int argCount getField(remArgs, childCount)

  while currentArg+3 <= argCount
    var astp econd ast:child(remArgs, currentArg+1)
    var astp eexpr ast:child(remArgs, currentArg+2)

    addChild code ${seq
      when #econd
        #eexpr
        branch #endLabel
      end
    end}

    currentArg = currentArg + 3
  end

  when currentArg+1 < argCount
    var astp elseCode ast:child(remArgs, currentArg+1)

    addChild code elseCode
  end

  addChild code ${label #endLabel}

  ret code
end

macro for2 counter in first to last body... 
  // generate some fresh, unused, unique identifiers 
  uniqueIds "for" start continue exit testVar 

  // the in and to parameters should also be checked 
  // to be "in" and "to" identifiers which is omitted here 

  // $ is quotation syntax to create an AST representing the given source 
  // # is antiquotation, inserting a variable's value into the source 
  ret ${ 
    var int #counter #first 
    label #start 
    var bool #testVar #counter <= #last 
    branch #testVar #continue #exit 
    label #continue 
    #body 
    #counter = #counter + 1 
    branch #start 
    label #exit 
  end} 
end 


include "opengl20.zomp"
include "glfw.zomp"
include "tests/glutils.zomp"

var int windowWidth 400
var int windowHeight 300
var bool initCalled false

func void init()
  if bool:not(initCalled) then
    glfwInit()
    glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW
    glewInit()
    times 2 glfwPollEvents()

    printString "Initialized"
    println()

    initCalled = true
  else
    printString "Already initialized"
    println()
  end
end

var float angle 0.0

// avoid writing it over and over, part of utils lib
macro mainloop body...
  ret ${
    var float time 0.0
    var bool running true
    while running
      time = double:toFloat(glfwGetTime())
      angle = time *_f 128.0

      #body

      glfwSwapBuffers()
      glfwPollEvents()
      running = bool:not( isPressed(GLFW_KEY_ESC) )
    end
  end}
end

func int main()
  init()

  glMatrixMode( GL_PROJECTION )
  glLoadIdentity()
  const double aspect int:toDouble(windowWidth) /_d int:toDouble(windowHeight)
  gluPerspective( 90.0d, aspect, 1.0d, 100.0d )

  mainloop
    glClearColor(0.0, 0.0, 0.0, 1.0)
    glClear int:or(GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT)

    glMatrixMode GL_MODELVIEW
    glLoadIdentity()
    glTranslatef( 0., 1., float:neg(4.) )
    glRotatef( angle, 0., 1., 0. )

    drawCoordSys( 8.0 )
  end

  drawPausedOverlay()
  glfwSwapBuffers()
  glfwPollEvents()

  printlnString "cu"

  ret 0
end


