///
/// Tests variadic macros. A variadic macro is one whose last parameter will collect
/// an arbitrary number of parameters stored in a seq expression
///

(macro vartest firstArg (rest remArgs) (
  (const int argCount (getField remArgs childCount))
 
  (printString "Invoked macro ")
  (printString (getField firstArg id))
  (printString " with ")
  (printInt argCount)
  (printString " arguments")
  (println)

  (ret `(
    (printString "vartest ")
    (printlnInt #argCount)))
  ))

(template print2 p ((printInt #p) (printInt #p)))

// (macro print2 p (ret ``((printInt #p) (printInt #p))))

(macro alias name replacement (
  (var (ptr ast) code (simpleAst "template"))
  (addChild code name)
  (addChild code replacement)
  (ret code)
  ))

(alias hello (printlnString "hello!"))

(func int main () (
  (vartest foo0)
  (vartest foo1 a b c)

  (print2 10)
  (println)
  (hello)

  (forEachAstChild c `(foo bar (baz buzz bozz bizz) blup) (
    (printString "ast: ")
    (printAst c 0) ))

  (ret 24)
  ))

(macro times count code (
  (uniqueId index "times")

  (ret `(for #index 1 #count #code))
  ))
  
// (testf ( */
//   (times 10 (printlnString (newUniqueNameFor "test"))) */
//   )) */



