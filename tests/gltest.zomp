/**
Demonstrates using OpenGL.

!verify off

Enter this into toplevel to load libs:
!load libglfw.dylib
!load libGLEW.dylib

You will need to copy the file libglfw.dylib from the lib/macosx dir
of GLFW 2.6 into the zomp main dir

Conventions for function names:
  send* - sending vertex data (to be included in glbegin/end)
  render* - send geometry (outside of glBegin/glEnd)
  draw* - setup material and render
*/

(include "opengl20.zomp")
(include "glfw.zomp")
(include "tests/glutils.zomp")

(template float.neg x (float.sub 0. #x))

(template op+ l r (int.add #l #r))
(template op- l r (int.sub #l #r))
(template op* l r (int.mul #l #r))
(template op/ l r (int.sdiv #l #r))

(template op== l r (int.equal #l #r))
(template op!= l r (int.notEqual #l #r))

(template op> l r (int.sgreater #l #r))
(template op< l r (int.sless #l #r))
(template op>= l r (int.sgreaterEqual #l #r))
(template op<= l r (int.slessEqual #l #r))


(template op+_f l r (float.add #l #r))
(template op-_f l r (float.sub #l #r))
(template op*_f l r (float.mul #l #r))
(template op/_f l r (float.fdiv #l #r))

(template op==_f l r (float.equal #l #r))
(template op!=_f l r (float.notEqual #l #r))


(template op= l r (assign #l #r))


(const int windowWidth 400)
(const int windowHeight 300)

(var bool initialized false)

(func bool init () (
  (template assertGLTrue code (
    (if (int.notEqual GL_TRUE #code)
      ((printlnString "Init failed")
       (printAst `#code 0)
       (ret false))
      ())
    ))
  
  (if initialized (ret true) ())

  (assertGLTrue (glfwInit))
  (assertGLTrue (glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW))
  (glewInit)

  (assign initialized true)
  (ret true)
  ))

(func GLuint makeBillboardGShader () (
  (var GLuint shader (createShader
"
varying vec3 normal;
void main(void) {
  gl_Position = ftransform();
  normal = normalize( gl_Position.xyz );
}
"

"
varying vec3 normal;

void main(void) {
  gl_FragColor = vec4( normal, 1.0 );
}
"))
  (ret shader)
  ))

(func GLuint makeBillboard ((int width) (int height)) (
  (var (ptr framebuffer) fbo (fbo_make width height))
  (fbo_attachColorTexture fbo)
  (fbo_create fbo)
  (fbo_bind fbo)

  (const GLuint shader (makeBillboardGShader))
  
  (saveTransforms
    (glClearColor .0 1.0 0.0 0.0)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 90.0d 1.0d 1.0d 100.0d)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      0.d 0.d 1.d
      0.d 0.d 0.d
      0.d 1.d 0.d)

    (glUseProgram shader)
    (rendergl GL_TRIANGLE_FAN
      (glColor4f 1. 0. 0. 1.)
      (glVertex3f 0. 0. 0.)
      (sendCircle)
      )
    (glUseProgram 0)
    )

  (glDeleteProgram shader)
    
  (fbo_makeColorTexture fbo)
  (fbo_unbind fbo)
    
  (ret (getField fbo colorTexture))
  ))
  
(var double autoTimeout 1000.0)

(func GLuint makeMainShader () (
  (createShader
"
varying vec2 texCoord;

void main(void) {
  gl_Position = ftransform();
  texCoord = gl_MultiTexCoord0.xy;
}"

"
uniform vec4 lightPos;
uniform sampler2D texture;
varying vec2 texCoord;

void main(void) {
  vec4 texval = texture2D( texture, texCoord );
  float alpha = texval.a;
  vec3 normal = texval.xyz;

  vec3 lightDir = normalize( lightPos.xyz );
  float intensity = dot( lightDir, normal );
  intensity += 0.3;

  gl_FragColor = vec4( intensity, intensity, intensity, alpha );
}
")
  ))

// (template op[] left right (load (ptradd #left #right)))
  
(func float getx (((ptr float) ptr)) (
  (load (ptradd ptr 0))
  ))
(func float gety (((ptr float) ptr)) (
  (load (ptradd ptr 1))
  ))
(func float getz (((ptr float) ptr)) (
  (load (ptradd ptr 2))
  ))

///-----------------------------------------------------------------------------
/// support for simple meshes

(type mesh
  (int size)
  ((ptr float) vertices)
  ((ptr float) texcoords)
  )

(func (ptr mesh) mesh:create ((int size)) (
  (var (ptr mesh) mesh (malloc mesh))
  (setField mesh size size)
  (setField mesh vertices (malloc float (size * 3)))
  (setField mesh texcoords (malloc float (size * 2)))

  (ret mesh)
  ))

(func void mesh:setPos (((ptr mesh) mesh) (int index) (float x) (float y) (float z)) (
  (const (ptr float) posAddr (ptradd (getField mesh vertices) (int.mul 3 index)))
  (store (ptradd posAddr 0) x)
  (store (ptradd posAddr 1) y)
  (store (ptradd posAddr 2) z)
  ))

(func void mesh:setTexCoord (((ptr mesh) mesh) (int index) (float u) (float v)) (
  (const (ptr float) texcoords (ptradd (getField mesh texcoords) (int.mul 2 index)))
  (store (ptradd texcoords 0) u)
  (store (ptradd texcoords 1) v)    
  ))

/// Will send the mesh's geometry using intermediate mode functions
/// (glVertex, glNormals etc.)
(func void mesh:sendgl (((ptr mesh) m)) (
  (var (ptr float) pos (getField m vertices))
  (var (ptr float) tc (getField m texcoords))

  (for index 0 (getField m size) (
    (glTexCoord2f (getx tc) (gety tc))
    (glVertex3f (getx pos) (gety pos) (getz pos))
    (assign pos (ptradd pos 3))
    (assign tc (ptradd tc 2))
    ))
  ))

/// Will send the geometry to OpenGL
(func void mesh:render (((ptr mesh) m)) (
  (glEnableClientState GL_VERTEX_ARRAY)
  (glVertexPointer 3 GL_FLOAT 0 (cast (ptr void) (getField m vertices)))

  (glEnableClientState GL_TEXTURE_COORD_ARRAY)
  (glTexCoordPointer 2 GL_FLOAT 0 (cast (ptr void) (getField m texcoords)))

  (glDrawArrays GL_QUADS 0 (getField m size))

  (glDisableClientState GL_VERTEX_ARRAY)
  (glDisableClientState GL_TEXTURE_COORD_ARRAY)
  ))




(func int rand ())

(func int random ((int max)) (
  (ret (int.srem (rand) max))
  ))
  

(template array:set array index value (store (ptradd #array #index) #value))

(func int main () (
  (if (bool.not (init)) (ret 100) ())

  (glfwPollEvents)
  (glfwPollEvents)

  (const int sphereCount 15000)
  (var (ptr float) positions (malloc float (int.mul 3 sphereCount)))
  (template foreachSphere indexVar posVar code (
    (var int #indexVar 0)
    (assign #indexVar 0)
    (var (ptr float) #posVar (nullptr float))
    (while (int.sless #indexVar sphereCount) (
      (assign #posVar (ptradd positions (int.mul #indexVar 3)))
      #code
      (assign #indexVar (int.add #indexVar 1))
      ))
    ))

  (template frand ((int.toFloat (int.sub (random 30) 15))))
  (template unitRandf ((int.toFloat (random 1025)) /_f 1024.0))

  (const float turns (8.0 +_f 4.0))
  (const float dist_max (16.0 +_f 8.0))
  (const float pi (2.0 *_f acosf 0.0))
  (const float angle_delta (2.0 *_f pi *_f turns /_f (int.toFloat sphereCount)))
  (const float diff_delta (dist_max /_f (int.toFloat sphereCount)))
  (var float angle 0.0)
  (var float diff 0.0)
  (foreachSphere index pos (
    (var float diff2 (unitRandf))
    (diff2 = diff2 *_f diff2)
    (diff2 = diff2 *_f 2.0 +_f diff)
    (array:set pos 0 (diff2 *_f sinf angle))
    (array:set pos 2 (0.5 *_f 0.125 *_f (frand)))
    (array:set pos 1 (diff2 *_f cosf angle))
    
    (diff = diff +_f diff_delta)
    (angle = angle +_f angle_delta)
    ))
//   (foreachSphere index pos (
//     (store (ptradd pos 0) (frand))
//     (store (ptradd pos 1) (0.5 *_f 0.125 *_f (frand)))
//     (store (ptradd pos 2) (frand))
//     ))

  (const int vertexCount (4 * sphereCount))
  (const (ptr mesh) sphereMesh (mesh:create vertexCount))
  (for sphereNum 0 sphereCount (
    (const (ptr float) p2 (ptradd positions (3 * sphereNum)))
    
    (const float sx (getx p2))
    (const float sy (gety p2))
    (const float sz (getz p2))
    
    (const float bbsize (1.0 /_f 4.0))
    (const int vertexNum (sphereNum*4))
    
    (mesh:setTexCoord sphereMesh (vertexNum+0) 0. 0.)
    (mesh:setPos sphereMesh (vertexNum+0) (sx -_f bbsize) (sy -_f bbsize) sz)
    
    (mesh:setTexCoord sphereMesh (vertexNum+1) 1. 0.)
    (mesh:setPos sphereMesh (vertexNum+1) (sx +_f bbsize) (sy -_f bbsize) sz)
    
    (mesh:setTexCoord sphereMesh (vertexNum+2) 1. 1.)
    (mesh:setPos sphereMesh (vertexNum+2) (sx +_f bbsize) (sy +_f bbsize) sz)
    
    (mesh:setTexCoord sphereMesh (vertexNum+3) 0. 1.)
    (mesh:setPos sphereMesh (vertexNum+3) (sx -_f bbsize) (sy +_f bbsize) sz)
    ))

  (var bool abort false)

  (var GLuint billboard (makeBillboard 1024 1024))
  (var GLuint sphereShader (makeMainShader))

  (var double startTime (glfwGetTime))
  (var int frameCount 0)
  
  (while (bool.not abort) (
    (const double time (glfwGetTime))
    (const double frameTime (double.sub time startTime))
    (frameCount = frameCount + 1)
    
    (if (int.equal (glfwGetKey GLFW_KEY_ESC) GL_TRUE) (
      (assign abort true)
      )())

    (if (double.ogreater (double.sub (glfwGetTime) startTime) autoTimeout)
      (assign abort true) ())

    (glEnable GL_DEPTH_TEST)
    (glDepthFunc GL_LEQUAL)
    (glEnable GL_ALPHA_TEST)
    (glAlphaFunc GL_NOTEQUAL 0.0)

    (var int width 0)
    (var int height 0)
    (glfwGetWindowSize (ptr width) (ptr height))
    (var double aspect (double.fdiv (int.toDouble width) (int.toDouble height)))
    (glViewport 0 0 width height)

    (glClearColor 0.0 0.0 0.0 1.0)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 90.0d aspect 1.0d 100.0d)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (glTranslatef -2. -1.5 -20.)

    (glRotatef (8.0 *_f (double.toFloat frameTime)) 0.0 0.0 1.0)

    //     (drawOrientationGrid) */
    (const float sunAngle (double.toFloat (glfwGetTime)))
    
    (glUseProgram sphereShader)
    (glBindTexture2D billboard)
    (const GLuint lightPosL (glGetUniformLocation sphereShader "lightPos"))
    (glUniform4f lightPosL (sinf sunAngle) (cosf sunAngle) 2.0 1.0)
    (renderQuad 0.5)

    (mesh:render sphereMesh)
//     (glBegin GL_QUADS)
//     (mesh:sendgl sphereMesh)
//     (glEnd)
    
    (glBindTexture2D 0)
    (glUseProgram 0)
    
    (glfwSwapBuffers)
    (glfwPollEvents)
    ))

  (const double endTime (glfwGetTime))
  (const float totalTime ((double.toFloat endTime) -_f (double.toFloat startTime)))
  (const float fps ((int.toFloat frameCount) /_f totalTime))

  (printInt frameCount) (printString " frames, ")
  (printFloat totalTime) (printString " seconds")
  (println)
  (printFloat fps) (printString " fps average")
  (println)

  (glDeleteProgram sphereShader)
  (glDeleteTextures 1 (ptr billboard))

  (drawPausedOverlay)
  (ret 0)
  ))

(func void zompvm:immediate () (
  (glfwSetWindowSize 400 300)
  (glfwPollEvents)
  ))
  
// (testf ( */
//   (const int retval (main)) */
//   (printString "Main returned ") */
//   (printInt retval) */
//   (println) */
//   )) */

(func void long () ((assign autoTimeout 1000.0d) (test)))
(func void short () ((assign autoTimeout 1.0d) (test)))
(func void run5s () ((assign autoTimeout 5.0d) (test)))

  