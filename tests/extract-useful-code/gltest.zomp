!syntax sexpr
/**
 * Demonstrates using OpenGL.
 *
 * You will need to copy the file libglfw.dylib from the lib/macosx dir
 * of GLFW 2.6 into the zomp main dir
 *
 * Conventions for function names:
 *  send* - sending vertex data (to be included in glbegin/end)
 *  render* - send geometry (outside of glBegin/glEnd)
 *  draw* - setup material and render
 */

TODO: does not compile anymore. Should be ported

(linkclib "libglfw.dylib" "libGLEW.dylib")

(include "opengl20.zomp")
(include "glfw.zomp")
(include "tests/glutils.zomp")


(const int windowWidth 400)
(const int windowHeight 300)

(var bool initialized false)

(func bool init () (
  (template assertGLTrue code (
    (if (int.notEqual GL_TRUE #code) (
      (printlnString "Init failed")
      (printAst `#code 0)
      (ret false))
    ())))
  
  (if initialized (ret true) ())

  (assertGLTrue (glfwInit))
  (assertGLTrue (glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW))
  (glewInit)

  (glfwSetWindowSize 800 600)
  //   (glfwSetWindowPos 300 1300) */

  (assign initialized true)
  (ret true)
  ))

(func GLuint makeBillboardGShader () (
  (var GLuint shader (createShader
    " "
    "
    varying vec3 normal;
    void main(void) {
    gl_Position = ftransform();
    normal = normalize( gl_Position.xyz );
    }
    "

    "
    varying vec3 normal;

    void main(void) {
    gl_FragColor = vec4( normal, 1.0 );
    }
    "))
  (ret shader)
  ))

(func GLuint makeBillboard ((int width) (int height)) (
  (var (ptr framebuffer) fbo (new framebuffer width height))
  (framebuffer:attachColorTexture fbo)
  (framebuffer:create fbo)
  (framebuffer:bind fbo)

  (const GLuint shader (makeBillboardGShader))
  
  (saveTransforms
    (glClearColor .0 1.0 0.0 0.0)
    (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 90.0d 1.0d 1.0d 100.0d)
    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (gluLookAt
      0.d 0.d 1.d
      0.d 0.d 0.d
      0.d 1.d 0.d)

    (glUseProgram shader)
    (rendergl GL_TRIANGLE_FAN
      (glColor4f 1. 0. 0. 1.)
      (glVertex3f 0. 0. 0.)
      (sendCircle)
      )
    (glUseProgram 0)
    )

  (glDeleteProgram shader)
    
  (framebuffer:makeColorTexture fbo)
  (framebuffer:unbind fbo)
    
  (ret (getField fbo colorTexture))
  ))
  
(var double autoTimeout 1000.0)

(func GLuint makeMainShader () (
  (createShader
    "
    varying vec2 texCoord;
    "
    
    "
    /// the sprites size will be scalingDiff + 1.0
    uniform float scalingDiff;
    
    void main(void) {
      float  scaling = 1.0 + scalingDiff;
      vec2 offset  = gl_MultiTexCoord0.xy * scaling - vec2( 0.5 * scaling );
      vec4 vertex = gl_Vertex + vec4( offset.x, offset.y, 0., 0. );
      gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * vertex;
      texCoord = gl_MultiTexCoord0.xy;
      }
    "

    "
    uniform vec4 lightPos;
    uniform sampler2D texture;

    void main(void) {
      vec4 texval = texture2D( texture, texCoord );
      float alpha = texval.a;
      vec3 normal = texval.xyz;

      vec3 lightDir = normalize( lightPos.xyz );
      float intensity = dot( lightDir, normal );
      intensity += 0.3;

      gl_FragColor = vec4( intensity, intensity, intensity, alpha );
      }
    ")
  ))

(func float getx (((ptr float) ptr)) (
  (load (ptradd ptr 0))
  ))
(func float gety (((ptr float) ptr)) (
  (load (ptradd ptr 1))
  ))
(func float getz (((ptr float) ptr)) (
  (load (ptradd ptr 2))
  ))

///-----------------------------------------------------------------------------
/// support for simple meshes

(type mesh
  (int size)
  ((ptr float) vertices)
  ((ptr float) texcoords)
  )

(func (ptr mesh) mesh:create ((int size)) (
  (var (ptr mesh) mesh (malloc mesh))
  (setField mesh size size)
  (setField mesh vertices (malloc float (size * 3)))
  (setField mesh texcoords (malloc float (size * 2)))

  (ret mesh)
  ))

(func void mesh:setPos (((ptr mesh) mesh) (int index) (float x) (float y) (float z)) (
  (const (ptr float) posAddr (ptradd (getField mesh vertices) (int.mul 3 index)))
  (store (ptradd posAddr 0) x)
  (store (ptradd posAddr 1) y)
  (store (ptradd posAddr 2) z)
  ))

(func void mesh:setTexCoord (((ptr mesh) mesh) (int index) (float u) (float v)) (
  (const (ptr float) texcoords (ptradd (getField mesh texcoords) (int.mul 2 index)))
  (store (ptradd texcoords 0) u)
  (store (ptradd texcoords 1) v)    
  ))

/// Will send the mesh's geometry using intermediate mode functions
/// (glVertex, glNormals etc.)
(func void mesh:sendgl (((ptr mesh) m)) (
  (var (ptr float) pos (getField m vertices))
  (var (ptr float) tc (getField m texcoords))

  (for index 0 (getField m size) (
    (glTexCoord2f (getx tc) (gety tc))
    (glVertex3f (getx pos) (gety pos) (getz pos))
    (assign pos (ptradd pos 3))
    (assign tc (ptradd tc 2))
    ))
  ))

/// Will send the geometry to OpenGL
(func void mesh:render (((ptr mesh) m)) (
  (glEnableClientState GL_VERTEX_ARRAY)
  (glVertexPointer 3 GL_FLOAT 0 (cast (ptr void) (getField m vertices)))

  (glEnableClientState GL_TEXTURE_COORD_ARRAY)
  (glTexCoordPointer 2 GL_FLOAT 0 (cast (ptr void) (getField m texcoords)))

  (glDrawArrays GL_QUADS 0 (getField m size))

  (glDisableClientState GL_VERTEX_ARRAY)
  (glDisableClientState GL_TEXTURE_COORD_ARRAY)
  ))




(func int rand ())

(func int random ((int max)) (
  (ret (int.srem (rand) max))
  ))
  
(template frand ((int.toFloat (int.sub (random 30) 15))))
(template unitRandf ((int.toFloat (random 1025)) /_f 1024.0))
(template sunitRandf ((int.toFloat (random 2049 - 1024)) /_f 1024.0))
  
(template array:set array index value (store (ptradd #array #index) #value))
(template array:get array index (load (ptradd #array #index)))

(macro xtype name typeExpr ... (
  (var (ptr ast) defs (seqAst))
  
  (var cstring ptrname (cstrings.append (getField name id) "ptr"))
  
  (var (ptr ast) te `(type #name))
  (forEachAstChild child typeExpr (
    (addChild te child)
    ))
    
  (addChild defs te)
  (addChild defs `(type #ptrname (ptr #name)))
  (ret defs)
  ))

(xtype path
  (int size)
  ((ptr float) positions)
  )



(func pathptr makePath ((int size)) (
  (var pathptr path (malloc path))
  (setField path size size)
  (setField path positions (malloc float (3 * size)))
  (ret path)
  ))

(func pathptr makeRingPath ((int count) (float radius)) (
  (var pathptr path (makePath count))
  
  (const float twoPi (4.0 *_f acosf 0.0))
  (var float angle_delta (twoPi /_f (int.toFloat count)))

  (var (ptr float) pos (getField path positions))
  (var float angle 0.0)
  
  (for sphereNum 0 count (
    (var float x 0.0)
    (var float y (sinf angle))
    (var float z (cosf angle))

    (x = radius *_f (x +_f z))
    (y = radius *_f y)
    (z = radius *_f z)

    (array:set pos 0 x)
    (array:set pos 1 y)
    (array:set pos 2 z)
    
    (pos = ptradd pos 3)
    (angle = angle +_f angle_delta)
    ))

  (ret path)
  ))

(func pathptr path:cloneEachVertex ((pathptr p) (int times)) (
  (var pathptr newPath (makePath (getField p size * times)))
  
  (const int size (getField p size))

  (var (ptr float) originalPositions (getField p positions))
  (var (ptr float) clonedPositions (getField newPath positions))

  (for vertexNum 0 size (
    (for i 0 times (
      (for offset 0 3 (
        (array:set clonedPositions offset (array:get originalPositions offset))
        ))
      
      (clonedPositions = ptradd clonedPositions 3)
      ))
    
    (originalPositions = ptradd originalPositions 3)
    ))

  (ret newPath)
  ))

(func void path:offsetVerticesRandomly ((pathptr p) (float maxAmount)) (
  (var (ptr float) pos (getField p positions))
  
  (for index 0 (3 * (getField p size)) (
    (const float offset (maxAmount *_f (sunitRandf)))
    (array:set pos index (offset +_f array:get pos index))
    ))
  ))


(func void addGalaxy (((ptr float) positions) (int sphereCount)) (
  (const float turns (4.0 +_f 2.0))
  (const float dist_max (16.0 +_f 8.0))
  (const float pi (2.0 *_f acosf 0.0))
  (const float angle_delta (2.0 *_f pi *_f turns /_f (int.toFloat sphereCount)))
  (const float diff_delta (dist_max /_f (int.toFloat sphereCount)))
  (var float angle 0.0)
  (var float diff 0.0)
  
  (var (ptr float) pos positions)
  (for index 0 sphereCount (
    (var float diff2 (unitRandf))
    (diff2 = diff2 *_f diff2)
    (diff2 = diff2 *_f 2.0 +_f diff)
    (array:set pos 0 (diff2 *_f sinf angle))
    (array:set pos 2 (0.5 *_f 0.125 *_f (frand)))
    (array:set pos 1 (diff2 *_f cosf angle))
    
    (diff = diff +_f diff_delta)
    (angle = angle +_f angle_delta)

    (pos = ptradd pos 3)
    ))
  ))

(func void addRing (((ptr float) positions) (int sphereCount)) (
  (const float pi_half (acosf 0.0))
  (var float angle_delta ((int.toFloat sphereCount) /_f pi_half))

  (const float radius 10.0)
  
  (var (ptr float) pos positions)
  (var float angle 0.0)
  
  (for sphereNum 0 sphereCount (
    (const float x 0.0)
    (const float y (sinf angle))
    (const float z (cosf angle))

    (array:set pos 0 (radius *_f (x +_f z)))
    (array:set pos 1 (radius *_f y))
    (array:set pos 2 (radius *_f z))
    
    (pos = ptradd pos 3)
    (angle = angle +_f angle_delta)
    ))
  ))

(type floatptr (ptr float))

(func void addPath (((ptr float) positions) (pathptr p)) (
  (var floatptr pathPos (getField p positions))
  (var floatptr pos positions)
  
  (for i 0 (getField p size) (
    (array:set pos 0 (array:get pathPos 0))
    (array:set pos 1 (array:get pathPos 1))
    (array:set pos 2 (array:get pathPos 2))
    
    (pathPos = ptradd pathPos 3)
    (pos = ptradd pos 3)
    ))
  ))

(func void adjustViewportToWindowSize () (
  (var int width 0)
  (var int height 0)
  (glfwGetWindowSize (ptr width) (ptr height))
  (var double aspect (double.fdiv (int.toDouble width) (int.toDouble height)))
  (glViewport 0 0 width height)
  ))

(func GLuint makeAOShader () (
  (var GLuint shader (createShader
    "
    varying vec2 centerDiff;
    const float  scaling = 16.0;
    "

    "
    void main(void) {
      vec2 offset  = gl_MultiTexCoord0.xy * scaling - vec2( 0.5 * scaling );
      vec4 vertex = gl_Vertex + vec4( offset.x, offset.y, 0., 0. );
      gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * vertex;
      centerDiff = offset * 2.0;
      }
    "
    
    "
    uniform sampler2D texture;
    const vec2 screenSize = vec2( 800.0, 600.0 );
    
    void main(void) {
      vec2 texCoord = gl_FragCoord.xy / screenSize;
      float dist = length( centerDiff );

      float light = (1.0 - smoothstep(1.0, scaling , dist)
        ) * smoothstep( 0.8, 0.9, dist );

      light = 1.0 - light*0.9;
      gl_FragColor = vec4( light, light, light, 1.0 );
      float scale = 1.0;
      gl_FragColor = vec4( scale, scale, scale, light * 0.1 );
      
      //       float dist = length( texCoord - center );
      //       gl_FragColor = vec4(1., dist, 0., 0.1); */
      //       gl_FragColor = texture2D( texture, texCoord ) + vec4( 0.1 ); */
      }
    "
    ))
  (ret shader)
  ))

(func void glsl:param1f ((GLuint program) (cstring name) (float value)) (
  (var GLuint location (glGetUniformLocation program name))
  (glUniform1f location value)
  ))

(const GLint GL_FUNC_SUBTRACT 32778)
(const GLint GL_FUNC_ADD 32774)

(func void gl:clear ((float r) (float g) (float b) (float a)) (
  (glClearColor r g b a)
  (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
  ))
  
(func int main () (
  (if (bool.not (init)) (ret 100) ())

  (glfwPollEvents)
  (glfwPollEvents)

  //   (const int galaxySize 150000) */
  //   (const int ringSize 50000) */
  (const int galaxySize 10000)
  (const int ringSize 0)
  
  (const int sphereCount (galaxySize + ringSize))
  (var (ptr float) positions (malloc float (int.mul 3 sphereCount)))
  (template foreachSphere indexVar posVar code (
    (var int #indexVar 0)
    (assign #indexVar 0)
    (var (ptr float) #posVar (nullptr float))
    (while (int.sless #indexVar sphereCount) (
      (assign #posVar (ptradd positions (int.mul #indexVar 3)))
      #code
      (assign #indexVar (int.add #indexVar 1))
      ))
    ))

  (if (galaxySize > 0)
    (addGalaxy positions galaxySize)
    ())

  (if (ringSize > 0)
    (
      (const int ringCloneCount 50)
      (const pathptr ringPath (path:cloneEachVertex
        (makeRingPath (ringSize / ringCloneCount) 10.0) ringCloneCount))
      (path:offsetVerticesRandomly ringPath 4.0)
      (addPath (ptradd positions (3 * galaxySize)) ringPath)
      )
    ())
  
  //   (foreachSphere index pos (
    //     (store (ptradd pos 0) (frand))
    //     (store (ptradd pos 1) (0.5 *_f 0.125 *_f (frand)))
    //     (store (ptradd pos 2) (frand))
    //     ))

  (glfwSetWindowSize 800 600)

  (const int vertexCount (4 * sphereCount))
  (const (ptr mesh) sphereMesh (mesh:create vertexCount))
  (for sphereNum 0 sphereCount (
    (const (ptr float) p2 (ptradd positions (3 * sphereNum)))
    
    (const float sx (getx p2))
    (const float sy (gety p2))
    (const float sz (getz p2))
    
    (const float bbsize (1.0 /_f 4.0))
    (const int vertexNum (sphereNum*4))

    (template vertexxx vnum u v (
      (mesh:setTexCoord sphereMesh #vnum #u #v)
      (mesh:setPos sphereMesh #vnum sx sy sz)
      ))

    (vertexxx (vertexNum+0) 0. 0.)
    (vertexxx (vertexNum+1) 1. 0.)
    (vertexxx (vertexNum+2) 1. 1.)
    (vertexxx (vertexNum+3) 0. 1.)
    
    //     (template vertexx vnum u v posx posy posz ( */
      //       (mesh:setTexCoord sphereMesh #vnum #u #v) */
      //       (mesh:setPos sphereMesh #vnum #posx #posy #posz) */
      //       )) */
    //     (vertexx (vertexNum+0) 0. 0. (sx -_f bbsize) (sy -_f bbsize) sz) */
    //     (vertexx (vertexNum+1) 1. 0. (sx +_f bbsize) (sy -_f bbsize) sz) */
    //     (vertexx (vertexNum+2) 1. 1. (sx +_f bbsize) (sy +_f bbsize) sz) */
    //     (vertexx (vertexNum+3) 0. 1. (sx -_f bbsize) (sy +_f bbsize) sz) */
    ))

  (var bool abort false)

  (var GLuint billboard (makeBillboard 32 32))
  (var GLuint sphereShader (makeMainShader))

  (var double startTime (glfwGetTime))
  (var int frameCount 0)

  (template keyDown key (glfwGetKey #key == GL_TRUE))

  (var (ptr framebuffer) sceneImage (new framebuffer 1024 1024))
  (framebuffer:attachColorTexture sceneImage)
  (framebuffer:create sceneImage)

  (var GLuint aoShader (makeAOShader))
  
  (while (bool.not abort) (
    (const double time (glfwGetTime))
    (const double frameTime (double.sub time startTime))
    (frameCount = frameCount + 1)

    
    (if (int.equal (glfwGetKey GLFW_KEY_ESC) GL_TRUE) (
      (assign abort true)
      )())
    (if ((glfwGetTime) -_d startTime >_d autoTimeout)
      (assign abort true) ())
    

    (var int width 0)
    (var int height 0)
    (glfwGetWindowSize (ptr width) (ptr height))
    (var double aspect (int.toDouble width /_d int.toDouble height))
    (glViewport 0 0 width height)

    (template setupMatrices (
      (glMatrixMode GL_PROJECTION)
      (glLoadIdentity)
      (gluPerspective 90.0d aspect 1.0d 100.0d)
      (glMatrixMode GL_MODELVIEW)
      (glLoadIdentity)
      (glTranslatef -2. -1.5 -20.)
      //       (glRotatef (8.0 *_f (double.toFloat frameTime)) 0.0 0.0 1.0) */
      ))

    //     (renderToTarget sceneImage
      (glEnable GL_DEPTH_TEST)
      (glDepthFunc GL_LEQUAL)
      (glEnable GL_ALPHA_TEST)
      (glAlphaFunc GL_NOTEQUAL 0.0)

      (setupMatrices)
      
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      
      //       (if (keyDown GLFW_KEY_LSHIFT) */
        //         (drawOrientationGrid) */
        //         ()) */
      
      (const float sunAngle (double.toFloat (glfwGetTime)))
      (glUseProgram sphereShader)
      (glBindTexture2D billboard)
      (const GLuint lightPosL (glGetUniformLocation sphereShader "lightPos"))
      (glUniform4f lightPosL (sinf sunAngle) (cosf sunAngle) 2.0 1.0)

      (glsl:param1f sphereShader "scalingDiff" -0.5)
      
//       (mesh:render sphereMesh) */
      
      (glBindTexture2D 0)
      (glUseProgram 0)
      //       ) */
    
    //     (autoSetupViewport) */
    //     (glClearColor 0. 0. 0. 0.) */
    //     (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT)) */

    /// splat occluder proxies on screen
    
    //     (makeGLIdentityTransforms) */
    //     (glEnable GL_TEXTURE_2D) */
    //     (glBindTexture2D (getField sceneImage colorTexture)) */
    //     (drawFullscreenQuad) */
    //     (glBindTexture2D 0) */
    //     (glDisable GL_TEXTURE_2D) */

    
    (glUseProgram aoShader)
    (glBindTexture2D (getField sceneImage colorTexture))
    
    (setupMatrices)
    
    (glEnable GL_BLEND)
    (glBlendEquation GL_FUNC_SUBTRACT)
    (glBlendFunc GL_DST_COLOR GL_SRC_ALPHA)

    (glDisable GL_DEPTH_TEST)

//     (mesh:render sphereMesh) */

    (glDisable GL_BLEND)
    (glBlendEquation GL_FUNC_ADD)
    (glBlendFunc GL_SRC_ALPHA GL_ONE)

    (gl:clear 0. 0. 0. 0.)
    (glColor4f 1. 0. 0. 1.)
    (renderQuad 8.0)
    
    (glUseProgram 0)

    (glfwSwapBuffers)
    (glfwPollEvents)
    (printGLError)
    ))

  (const double endTime (glfwGetTime))
  (const float totalTime ((double.toFloat endTime) -_f (double.toFloat startTime)))
  (const float fps ((int.toFloat frameCount) /_f totalTime))

  (printInt frameCount) (printString " frames, ")
  (printFloat totalTime) (printString " seconds")
  (println)
  (printFloat fps) (printString " fps average")
  (println)

  
  (glDeleteProgram aoShader)
  
  (glDeleteProgram sphereShader)
  (glDeleteTextures 1 (ptr billboard))

  (drawPausedOverlay)
  
  (ret 0)
  ))

(func void zompvm:immediate () (
  (glfwSetWindowSize 800 600)
  (glfwSetWindowPos 100 100)
  (glfwPollEvents)
  ))
  
// (testf ( */
//   (const int retval (main)) */
//   (printString "Main returned ") */
//   (printInt retval) */
//   (println) */
//   )) */

(func void long () ((assign autoTimeout 1000.0d) (test)))
(func void short () ((assign autoTimeout 1.0d) (test)))
(func void run2s () ((autoTimeout = 2.0d) (test)))
(func void run5s () ((assign autoTimeout 5.0d) (test)))

  