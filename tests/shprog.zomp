/**
Generates and shows several SH functions

!verify off

Enter this into toplevel to load libs:
!load libglfw.dylib
!load libGLEW.dylib
!load glut.dylib

You will need to copy the file libglfw.dylib from the lib/macosx dir
of GLFW 2.6 into the zomp main dir

Conventions for function names:
  send* - sending vertex data (to be included in glbegin/end)
  render* - send geometry (outside of glBegin/glEnd)
  draw* - setup material and render
*/

TODO: does not compile anymore, but code should be ported

(include "opengl20.zomp")
(include "glfw.zomp")
(include "tests/glutils.zomp")
(include "glut.zomp")

(const int windowWidth 800)
(const int windowHeight 600)
(const float windowAspect 1.0)
(var bool initialized false)

(func bool init () (
  (template assertGLTrue code (
    (if (int.notEqual GL_TRUE #code) (
      (printlnString "Init failed")
      (printAst `#code 0)
      (ret false))
    ())))
  
  (if initialized (ret true) ())

  (assertGLTrue (glfwInit))
  (assertGLTrue (glfwOpenWindow windowWidth windowHeight 8 8 8 8 16 0 GLFW_WINDOW))
  (glewInit)

  //   (glfwSetWindowPos 300 1300) */

  (windowAspect = int.toFloat windowWidth /_f int.toFloat windowHeight)

  (assign initialized true)
  (ret true)
  ))

//------------------------------------------------------------------------------
// utils

(macro arrayOf type values ... (
  (uniqueId array "arrayOf")
  
  (var (ptr ast) code `())
  (var int size (getField values childCount))
  (addChild code `(var (ptr #type) #array (malloc #type #size)))

  (var int index 0)
  (forEachAstChild val values (
    (addChild code `(store (ptradd #array #index) #val))
    
    (index = index + 1)
    ))

  (addChild code `(#array))

  (ret code)
  ))

(macro arrayOfFuncs type initCalls ... (
  (uniqueId array "arrayOfFuncs")

  (var (ptr ast) code `())
  (var int size (getField initCalls childCount))
  (addChild code `(var (ptr #type) #array (malloc #type #size)))

  (var int index 0)
  (forEachAstChild call initCalls (
    (ast.replace call "this" `(ptradd #array #index))

    (addChild code call)

    (index = index + 1)
    ))

  (addChild code `(#array))

  (ret code)
  ))

(template array:set array index value (store (ptradd #array #index) #value))
(template array:get array index (load (ptradd #array #index)))
(template op[] array index (load (ptradd #array #index)))


//------------------------------------------------------------------------------

(macro constructor type fields ... (
  (var cstring funcName (cstring:concat (getField type id) ":init"))
  (var (ptr ast) args `(((ptr #type) this)))
  (var (ptr ast) impl `())

  (forEachAstChild field fields (
    (const int fieldChildCount (getField field childCount))

    (var (ptr ast) fieldType (nullptr ast))
    (var cstring fieldName (nullptr char))
    
    (if (fieldChildCount == 1)
      ((fieldType = (simpleAst (getField field id)))
        (fieldName = getField (astChild field 0) id)
        )
      (// else
        (printlnString "Error: Expected (type name) for fields")
        (printAst field 2) (println)
        )
      )
    
    (addChild args field)

    (addChild impl `(setField this #fieldName #fieldName))
    ))
  
  (var (ptr ast) funcDef `(func void #funcName #args #impl))

  (ret funcDef)  
  ))

(macro xtype name fields ... (
  (var astp typedef `(type #name))
  (var astp ctor `(constructor #name))
  
  (forEachAstChild field fields (
    (addChild typedef field)
    (addChild ctor field)
    ))

  (var astp code `(#typedef #ctor))
  //   (printAst code 0)
  
  (ret code)
  ))

(macro new type args ... (
  (uniqueId name "new")

  (var astp initCall (astFromString (cstring:concat (getField type id) ":init")))
  (addChild initCall (astFromString name))
  (forEachAstChild arg args (
    (addChild initCall arg)
    ))
  
  (var astp code `())
  (addChild code `(var (ptr #type) #name (malloc #type)))
  (addChild code initCall)
  (addChild code (astFromString name))

  (ret code)
  ))

//------------------------------------------------------------------------------
// OpenGL utils

(func void clear ((float r) (float g) (float b) (float a)) (
  (glClearColor r g b a)
  (glClear (int.or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
  ))

(func GLint gluBuild2DMipmaps (
  (GLenum target)
  (GLint internalFormat)
  (GLsizei width)
  (GLsizei height)
  (GLenum format)
  (GLenum type)
  ((ptr void) data) ))

/// turns 4 colors values in [0, 255] into an RGBA color suitable for OpenGL
(func int rgbaColor ((int r) (int g) (int b) (int a)) (
  (template clampToByte x (int:max 0 (int:min 255 #x)))
  (const int red (clampToByte r))
  (const int green (clampToByte g))
  (const int blue (clampToByte b))
  (const int alpha (clampToByte a))
  
  (ret (alpha*256*256*256 + blue*256*256 + green*256 + red))
  ))

(func int rgbaColor_f ((float r) (float g) (float b) (float a)) (
  (template mapfi value (float.toInt (#value *_f 255.0)))
  (rgbaColor (mapfi r) (mapfi g) (mapfi b) (mapfi a))
  ))

//------------------------------------------------------------------------------
// vector math

(type float3
  (float x)
  (float y)
  (float z) )
(type float3p (ptr float3))

(constructor float3 (float x) (float y) (float z))

(func void float3:print((float3p this)) (
  (printString "{ ")
    (printString "x = ") (printFloat (getField this x))
    (printString ", y = ") (printFloat (getField this y))
    (printString ", z = ") (printFloat (getField this z))
    (printString " }")
  ))

(func bool float3:equalDelta((float delta) (float3p l) (float3p r)) (
  (ret (bool.and (float:equalDelta delta (getField l x) (getField r x))
    (bool.and (float:equalDelta delta (getField l y) (getField r y))
      (float:equalDelta delta (getField l z) (getField r z))))
    )
  ))

(func float3p float3:new ((float x) (float y) (float z)) (
  (var float3p this (malloc float3))
  (float3:init this x y z)
  (ret this)
  ))


(macro float3:apply2 this func l r (
  (var astp code `(
    (setField #this x (funcPlaceholder (getField #l x) (getField #r x)))
    (setField #this y (funcPlaceholder (getField #l y) (getField #r y)))
    (setField #this z (funcPlaceholder (getField #l z) (getField #r z)))
    ))

  // workaround because `(#func l r) would turn into (seq funcValue l r)
  (ast:replaceId code "funcPlaceholder" (getField func id))
  
  (ret code)
  ))

(template float3:deriveApplyArgFunc name simpleFunc
  (func void #name ((float3p this) (float3p r)) (
    (float3:apply2 this #simpleFunc this r)
    ))
  )

(float3:deriveApplyArgFunc float3:add op+_f)
(float3:deriveApplyArgFunc float3:sub op-_f)
(float3:deriveApplyArgFunc float3:mul op*_f)
(float3:deriveApplyArgFunc float3:div op/_f)


(func void float3:interpolate ((float3p this) (float t) (float3p a) (float3p b)) (
  (template interpolateField field
    (setField this #field (t *_f getField a #field +_f (1.0 -_f t) *_f getField b #field)))

  (interpolateField x)
  (interpolateField y)
  (interpolateField z)
  ))

(func float float3:lengthSquared ((float3p this)) (
  (const float x (getField this x))
  (const float y (getField this y))
  (const float z (getField this z))
  (x *_f x  +_f  y *_f y  +_f  z *_f z)
  ))

(func float float3:length ((float3p this)) (
  (sqrtf (float3:lengthSquared this))
  ))

(func void float3:normalize ((float3p this)) (
  (const float factor (1.0 /_f float3:length this))
  (setField this x (getField this x *_f factor))
  (setField this y (getField this y *_f factor))
  (setField this z (getField this z *_f factor))
  ))

/// gets an (ptr float3) and a function (float -> float) and applies the function
/// to all elements of the vector
(template float3:apply this func (
  (setField #this x (func (getField #this x)))
  (setField #this y (func (getField #this y)))
  (setField #this z (func (getField #this z)))
  ))


/// t \in [0, 1], 0.0 -> a, 1.0 -> b
(func float float:interpolate ((float t) (float a) (float b)) (
  (t *_f a  +_f  (1.0 -_f t) *_f b)
  ))


(xtype CylindricalCoord
  (float longitude)
  (float latitude)
  (float z)
  )

/// TODO: testing!
(func (ptr CylindricalCoord) float3.toCylindricalCoord((float3p v)) (
  (var float x (getField v x))
  (var float y (getField v y))
  (var float z (getField v z))
  
  (var float p (sqrtf (x *_f x +_f y *_f y)))
  (var float j 0.0)
  
  (if (x >_f 0.0)
    (j = atanf (y /_f x))
    ())
  (if (bool.and (x ==_f 0.0) (y >_f 0.0))
    (j = p /_f 2.0)
    ())
  (if (x <_f 0.0)
    (j = p +_f atanf (y /_f x))
    ())
  (if (bool.and (x ==_f 0.0) (y <_f 0.0))
    (j = (2.0 +_f 1.0) *_f p /_f 2.0)
    ())

  (ret (new CylindricalCoord p j z))
  ))

(func float pi() ((2.0 *_f asinf 1.0)))

(type radian float)
(type degree float)

(func degree radian:toDegree((radian angle)) (
  (angle /_f (pi) *_f 180.0)
  ))

(func radian degree:toRadian((degree angle)) (
  (angle *_f (pi) /_f 180.0)
  ))

(unittest:testCasesFor radian:toDegree
  (0.0 ==_f radian:toDegree 0.0)
  (180.0 ==_f radian:toDegree (pi))
  // (0.0 ==_f radian:toDegree (2.0 *_f (pi)))
  )

(func radian angle ((float x) (float y)) (
  (const float length (sqrtf (squaref x +_f squaref y)))
  (var float angle (asinf (y /_f length)))

  (if (x <_f 0.0)
    (angle = (pi) -_f angle)
    ())

  (ret angle)
  ))

(unittest:testCasesFor angle
  (float:equalDelta (1.0 /_f 100.0) 0.0 (angle 1.0 0.0))
  (float:equalDelta (1.0 /_f 100.0) ((pi) /_f 4.0) (angle 1.0 1.0))
  (float:equalDelta (1.0 /_f 100.0) ((pi) /_f 2.0) (angle 0.0 1.0))
  )

(type PolarCoord
  /// ccw angle between x-axis and dir \in [0, 360)
  (radian longitude)
  /// ccw angle between y-axis and dir \in [0, 180]
  (radian latitude)
  (radian distance)
  )
(type PolarCoord_ptr (ptr PolarCoord))

(func float float:modPos((float x) (float div)) (
  (assert (div >_f 0.0))
  
  (var float val x)
  (while (val <_f 0.0)
    (val = val +_f div))
  (while (val >=_f div)
    (val = val -_f div))
  (ret val)
  ))

(func void PolarCoord:makeCanonic((PolarCoord_ptr this)) (
  (setField this longitude (fmodf (longitude +_f
  ))

(func void PolarCoord:init((PolarCoord_ptr this) (float longitude) (float latitude) (float distance)) (
  (setField this longitude (float:modPos longitude (2.0 *_f (pi))))
  (setField this latitude (float:clamp 0. (pi) latitude))
  (setField this distance distance)
  ))

(func void PolarCoord:print ((PolarCoord_ptr this)) (
  (printString "{ ")
    (printString "longitude = ") (printFloat (getField this longitude))
    (printString ", latitude = ") (printFloat (getField this latitude))
    (printString ", distance = ") (printFloat (getField this distance))
  (printString " }")
  ))
  
(func float length2 ((float x) (float y)) (
  (sqrtf (squaref x +_f squaref y))
  ))
(func float length3 ((float x) (float y) (float z)) (
  (sqrtf (squaref x +_f squaref y +_f squaref z))
  ))

///TODO: fix
(func PolarCoord_ptr polarCoord3f ((float x) (float y) (float z)) (
  (const float radius (length3 x y z))
  
  (var float longitude (angle x z))
  (if (bool.and (x ==_f 0.0) (z ==_f 0.0))
    (longitude = 0.0) ())
  
  (const float latitude (0.5 *_f (pi)  -_f  angle (length2 x z) y))

  (longitude = fmodf longitude (2.0 *_f (pi)))
  (latitude = (float:clamp 0. (pi) latitude))

  (new PolarCoord longitude latitude radius)
  ))

(func PolarCoord_ptr float3:toPolarCoord ((float3p this)) (
  (var float x (getField this x))
  (var float y (getField this y))
  (var float z (getField this z))

  (ret (polarCoord3f x y z))
  ))

(func float3p PolarCoord:toFloat3 ((PolarCoord_ptr this)) (
  (const float d (getField this distance))
  (const float long (getField this longitude))
  (const float lat (getField this latitude))
  
  (new float3
    (d *_f cosf long *_f sinf lat)
    (d *_f cosf lat)
    (d *_f sinf long *_f sinf lat)
    )
  ))

(func bool PolarCoord:equalDelta ((float delta) (PolarCoord_ptr l) (PolarCoord_ptr r)) (
  (const float pi2 (2.0 *_f (pi)))

  (template fieldsEqD fieldName
    (float:equalDelta delta (getField l #fieldName) (getField r #fieldName)))
  
  (bool.and (float:modPos (getField l longitude -_f getField r longitude) pi2 <=_f delta)
    (bool.and (fieldsEqD latitude) (fieldsEqD distance)))
  ))

(template ifnot condition onFalse
  (if (bool.not #condition) #onFalse ()))

(func void PolarCoord:test () (
  (const float delta (1.0 /_f 100.0))

  (var float3p foundDir (new float3 0. 0. 0.))
  
  (template expectDir x y z pc (
    (foundDir = PolarCoord:toFloat3 #pc)
    (ifnot (float3:equalDelta delta (new float3 #x #y #z) foundDir) (
      (printString "-- Error --\nInput: ")
      (PolarCoord:print #pc)
      (printString "\nExpected: ")
      (float3:print (new float3 #x #y #z))
      (printString "\nFound: ")
      (float3:print foundDir)
      (println)
      ))
    ))

  (template d2r degree (degree:toRadian #degree))
  
  (expectDir 0. 1. 0. (new PolarCoord 0. 0. 1.))
  (expectDir 1. 0. 0. (new PolarCoord 0. (d2r 90.0) 1.))
  (expectDir 0. -1. 0. (new PolarCoord 0. (d2r 180.0) 1.))

  (expectDir 1. 0. 0. (new PolarCoord 0. (d2r 90.) 1.))
  (expectDir 0. 0. 1. (new PolarCoord (d2r 90.) (d2r 90.) 1.))
  (expectDir -1. 0. 0. (new PolarCoord (d2r 180.) (d2r 90.) 1.))
  (expectDir 0. 0. -1. (new PolarCoord (d2r 270.) (d2r 90.) 1.))
  
  (const float step_longitude (degree:toRadian 90.0))

  (var PolarCoord_ptr pc (new PolarCoord 0. (d2r 90.) 1.))
  
  (while (getField pc longitude <=_f (degree:toRadian 360.0))

    (const float3p dir (PolarCoord:toFloat3 pc))
    (const PolarCoord_ptr pc2 (float3:toPolarCoord dir))

    (if (bool.not (PolarCoord:equalDelta delta pc pc2))
      ( (printString "-- Error --\nInput: ")
        (PolarCoord:print pc)
        (printString "\nDir: ")
        (float3:print dir)
        (printString "\nResult: ")
        (PolarCoord:print pc2)
        (println)
        )
      ( (printString "-- Success: ")
        (PolarCoord:print pc)
        (println)
        )
      )

    (setField pc longitude (getField pc longitude +_f step_longitude))
    )
  ))

//------------------------------------------------------------------------------

(func void plot ((int size) ((ptr float) values)) (
  (glBegin GL_LINE_STRIP)

  (const float delta (2.0 /_f int.toFloat size))

  (var float x -1.0)
  (for i 0 size (
    (const float y (array:get values i))
    (glVertex2f x y)
    (x = x +_f delta)
    ))
  
  (glEnd)
  ))

(type RGBA int)

(func int factorial((int x)) (
  (if (x > 0)
    (ret (factorial (x - 1) * x))
    ())
  (ret 1)
  ))

(func float factorial_f((float x)) (
  (ret (int.toFloat (factorial (float.toInt x))))
  ))

(func float sh:k((int l) (int m)) (
  (const float m_f (int.toFloat m))
  (const float l_f (int.toFloat l))
  (const float temp (
    ((2.0 *_f l_f +_f 1.0) *_f int.toFloat (factorial(l - m)))
    /_f (4.0 *_f (pi) *_f int.toFloat (factorial(l + m))) ))

  (sqrtf temp)
  ))

(func float legendre ((int l) (int m) (float x)) (
  (var float pnm 1.0)

  (if (m > 0)
    (//then
      (var float somx2 (sqrtf( (1.0 -_f x) *_f (1.0 +_f x) )))
      (var float fact 1.0)
      (for i 1 (m+1) (
        (pnm = pnm *_f float.neg fact *_f somx2)
        (fact = fact +_f 2.0)
        ))
      )
    () )

  (if (l == m) (ret pnm) ())

  (var float pnmp1 (x *_f (2.0 *_f int.toFloat m +_f 1.0) *_f pnm))

  (if (l == m + 1) (ret pnmp1) ())
  
  (var float pll 0.0)

  (for ll (m+2) (l+1) (
    (pll = ( (2.0 *_f int.toFloat ll -_f 1.0) *_f x *_f pnmp1
      -_f (int.toFloat(m+ll) -_f 1.0) *_f pnm ) /_f int.toFloat (ll - m) )

    (pnm = pnmp1)
    (pnmp1 = pll)
    ))
    
  (ret pll)
  ))

(template ift condition onTrue (if #condition #onTrue ()))

(func float sh:base((int l) (int m) (float latitude) (float longitude)) (
  (const float sqrt2 (sqrtf 2.0))
  
  (ift (m == 0)
    (ret ((sh:k l 0) *_f legendre l m (cosf longitude))) )
  (ift (m > 0)
    (ret (sqrt2 *_f sh:k l m *_f cosf (int.toFloat m *_f latitude) *_f legendre l m (cosf longitude))) )

  (ret (sqrt2 *_f sh:k l (int:neg m) *_f sinf (-1.0 *_f int.toFloat m *_f latitude) *_f legendre l (int:neg m) (cosf longitude)))
  ))

(func RGBA shColor((int l) (int m) (float longitude) (float latitude)) (
  (var float shval (sh:base l m longitude latitude))
  (const int shvalByte (float.toInt (shval *_f 255.0)))
  
  (if (shval <_f 0.0)
    (ret (rgbaColor (abs shvalByte) 0 0 255))
    (ret (rgbaColor 0 (abs shvalByte) 0 255))
    )

  (ret (rgbaColor 255 255 255 255))
  ))
  
(func void free(((ptr void) ptr)))

(template c:free ptr (cast (ptr void) #ptr))

(type GLuint_ptr (ptr GLuint))

(func int sh:index((int l) (int m)) (
  (square(l) + m + l)
  ))

(template onDebugBuild code ... #code)

(const GLint GL_RGBA32F_ARB 34836)
// #define GL_RGBA32F_ARB                      0x8814

/// will calculate the SH base functions up to level maxL and store them
/// in cube map textures of resolution size
(func GLuint_ptr shBaseFuncCubeTextures ((int maxL) (int size)) (
  (const float sizef (int.toFloat size))

  (var (ptr float3) edges (arrayOfFuncs float3
    (float3:init this -1. -1. 1.)
    (float3:init this  1. -1. 1.)
    (float3:init this  1.  1. 1.)
    (float3:init this -1.  1. 1.)
    
    (float3:init this -1. -1. -1.)
    (float3:init this  1. -1. -1.)
    (float3:init this  1.  1. -1.)
    (float3:init this -1.  1. -1.)
    ))
  
  (var (ptr (ptr int)) edgeIndices (arrayOf (ptr int)
    (arrayOf int 1 5 6 2)
    (arrayOf int 4 0 3 7)
    (arrayOf int 3 2 6 7)
    (arrayOf int 4 5 1 0)
    (arrayOf int 0 1 2 3)
    (arrayOf int 5 4 7 6)
    ))

  (onDebugBuild
    (var (ptr float) colors (malloc float 6))
    (for csnum 0 6 (
      (array:set colors csnum (int.toFloat csnum /_f (4.0 +_f 1.0)))
      ))
    )
  
  (var (ptr float) pixels (malloc float (size * size * 4 * 6)))

  (const int textureCount (((sh:index maxL maxL + 1) + 3) / 4))
  //   (const int textureCount (sh:index maxL maxL + 1))
  (var (ptr GLuint) textures (malloc int textureCount))
  (glGenTextures textureCount textures)
  
  (var int l 0)
  (var int m 0)
  
  (printString "maxL = ") (printInt maxL) (println)
  (printString "textureCount = ") (printInt textureCount) (println)

  (for textureNum 0 textureCount (
    (const int texture (array:get textures textureNum))
    (glBindTexture GL_TEXTURE_CUBE_MAP texture)

    (for componentNum 0 4 (
      (for sideNum 0 6 (
        (var (ptr int) sideEdgeIndices (edgeIndices[sideNum]))
        
        (var (ptr float3) lowerLeft (ptradd edges (sideEdgeIndices[0])))
        (var (ptr float3) lowerRight (ptradd edges (sideEdgeIndices[1])))
        (var (ptr float3) upperRight (ptradd edges (sideEdgeIndices[2])))
        (var (ptr float3) upperLeft (ptradd edges (sideEdgeIndices[3])))

        (var float3p left (new float3 0. 0. 0.))
        (var float3p right (new float3 0. 1. 0.))
        
        (var float3p dir (new float3 0. 0. 0.))
        
        (for y 0 size (
          (var float yUnit (int.toFloat y /_f sizef))
          
          (float3:interpolate left yUnit lowerLeft upperLeft)
          (float3:interpolate right yUnit lowerRight upperRight)
          
          (for x 0 size (
            (float3:interpolate dir (int.toFloat x /_f sizef) right left)
            (float3:normalize dir)

            (const PolarCoord_ptr polarCoord (float3:toPolarCoord dir))
            
            (var float shval (sh:base l m (getField polarCoord longitude) (getField polarCoord latitude)))
            (shval = 0.5 *_f shval +_f 0.5)
            (var (ptr float) sidePixels (ptradd pixels (size * size * sideNum * 4)))
            (const int pixelNum (y * size + x))
            // (shval = array:get colors sideNum)
            (array:set sidePixels (4*pixelNum + componentNum) shval)
            ))
          ))
        )) // for sideNum

      (m = m + 1)
      (ift (m > l) (
        (l = l + 1)
        (m = int:neg l)
        ))
      )) // for componentNum

    (for sideNum2 0 6 (
      (var (ptr float) sidePixels2 (ptradd pixels (size * size * sideNum2 * 4)))
      (const int target (GL_TEXTURE_CUBE_MAP_POSITIVE_X + sideNum2))

      // (glTexImage2D target 0 GL_RGBA size size 0 GL_RGBA GL_FLOAT)
      (gluBuild2DMipmaps target 4 size size GL_RGBA GL_FLOAT
        (cast (ptr void) sidePixels2) )
      (printGLError)
      ))
    )) // for textureNum

  (glBindTexture GL_TEXTURE_CUBE_MAP 0)

  (c:free pixels)
  
  (ret textures)
  ))

(func GLuint makeCubemap ((int l) (int m) (int size)) (
  (var GLuint texture (makeTexture))

  (const float sizef (int.toFloat size))
  
  (glBindTexture GL_TEXTURE_CUBE_MAP texture)

  (var (ptr int) colors (arrayOf int
    (rgbaColor 255 0 0 255)
    (rgbaColor 0 255 0 255)
    (rgbaColor 0 0 255 255)
    (rgbaColor 0 255 255 255)
    (rgbaColor 255 0 255 255)
    (rgbaColor 255 255 0 255) ))

  (var (ptr float3) edges (arrayOfFuncs float3
    (float3:init this -1. -1. 1.)
    (float3:init this  1. -1. 1.)
    (float3:init this  1.  1. 1.)
    (float3:init this -1.  1. 1.)
    
    (float3:init this -1. -1. -1.)
    (float3:init this  1. -1. -1.)
    (float3:init this  1.  1. -1.)
    (float3:init this -1.  1. -1.)
    ))


  (var (ptr (ptr int)) edgeIndices (arrayOf (ptr int)
    (arrayOf int 1 5 6 2)
    (arrayOf int 4 0 3 7)
    (arrayOf int 3 2 6 7)
    (arrayOf int 4 5 1 0)
    (arrayOf int 0 1 2 3)
    (arrayOf int 5 4 7 6)
    ))
  
  //   (var (ptr int) pixels (malloc int (size * size)))
  (var (ptr float) pixels (malloc float (size * size)))

  (for sideNum 0 6 (
    (const int target (GL_TEXTURE_CUBE_MAP_POSITIVE_X + sideNum))
    
    (var int c (load colors))

    (var (ptr int) sideEdgeIndices (edgeIndices[sideNum]))
    
    (var (ptr float3) lowerLeft (ptradd edges (sideEdgeIndices[0])))
    (var (ptr float3) lowerRight (ptradd edges (sideEdgeIndices[1])))
    (var (ptr float3) upperRight (ptradd edges (sideEdgeIndices[2])))
    (var (ptr float3) upperLeft (ptradd edges (sideEdgeIndices[3])))

    (var float3p left (new float3 0. 0. 0.))
    (var float3p right (new float3 0. 1. 0.))
    
    (var float3p dir (new float3 0. 0. 0.))
    
    (for y 0 size (
      (var float yUnit (int.toFloat y /_f sizef))
      
      (float3:interpolate left yUnit lowerLeft upperLeft)
      (float3:interpolate right yUnit lowerRight upperRight)
      
      (for x 0 size (
        (float3:interpolate dir (int.toFloat x /_f sizef) right left)
        (float3:normalize dir)

        (const int pixelNum (y * size + x))
        (const PolarCoord_ptr polarCoord (float3:toPolarCoord dir))
        //         (c = rgbaColor_f (getField dir x) (getField dir y) (getField dir z) 1.0)
        
        //         (c = shColor l m (getField polarCoord longitude) (getField polarCoord latitude))
        //         (array:set pixels pixelNum c)
        (var float shval (sh:base l m (getField polarCoord longitude) (getField polarCoord latitude)))
        (shval = 0.5 *_f shval +_f 0.5)
        (array:set pixels pixelNum shval)
        ))
      ))

    (gluBuild2DMipmaps target 1 size size GL_LUMINANCE GL_FLOAT
      (cast (ptr void) pixels) )
    //     (gluBuild2DMipmaps target GL_RGBA size size GL_RGBA GL_UNSIGNED_BYTE
      //       (cast (ptr void) pixels))

    (printGLError)
    
    (colors = ptradd colors 1)
    ))

  (glBindTexture GL_TEXTURE_CUBE_MAP 0)

  (c:free pixels)
  
  (ret texture)
  ))
  
(func GLuint makeShowRotatedSHShader () (
  (var GLuint shader (createShader
    "
    #version 120
    varying vec3 dir;
    uniform vec3 occluderDir;
    "
    
    "
    void main(void) {
      gl_Position = ftransform();
      
      vec4 vertexDir = normalize( gl_Vertex );
      dir = vertexDir.xyz;
      }
    "
    
    "
    uniform samplerCube texture0;
    uniform samplerCube texture1;
    uniform samplerCube texture2;
    uniform samplerCube texture3;

    float shprod(vec3 dir, samplerCube texture, vec4 coeffs) {
      vec4 shvals = textureCube( texture, dir );
      shvals = shvals * 2.0 - 1.0;
      vec4 products = shvals * coeffs;
      return products.x + products.y + products.z + products.w;
      }

    float gstar( float g, int l ) {
      return sqrt( 4 * 3.1415 / (2*l+1)) * g;
      }

    float sum( vec4 v ) {
      return v.x + v.y + v.z + v.w;
      }
    
    void main(void) {
      float[4] zonalCoeffs;
      zonalCoeffs[0] = 0.0;
      zonalCoeffs[1] = 1.0;
      zonalCoeffs[2] = 0.0;
      zonalCoeffs[3] = 0.0;

      vec4 coeffs0 = textureCube( texture0, occluderDir );
      vec4 coeffs1 = textureCube( texture1, occluderDir );
      vec4 coeffs2 = textureCube( texture2, occluderDir );
      vec4 coeffs3 = textureCube( texture3, occluderDir );

      coeffs0.x *= gstar( zonalCoeffs[0], 0 );
      coeffs0.yzw *= gstar( zonalCoeffs[1], 1 );
      coeffs1.xyzw *= gstar( zonalCoeffs[2], 2 );
      coeffs2.x *= gstar( zonalCoeffs[2], 2 );
      coeffs2.yzw *= gstar( zonalCoeffs[3], 3 );
      coeffs3.xyzw *= gstar( zonalCoeffs[3], 3 );

      float shval =
      shprod(dir, texture0, coeffs0) +
      shprod(dir, texture1, coeffs1) +
      shprod(dir, texture2, coeffs2) +
      shprod(dir, texture3, coeffs3);

      if( shval > 0.0 ) {
        gl_FragColor = vec4( 0.0, shval, 0.0, 1.0 );
        }
      else {
        gl_FragColor = vec4( -shval, 0.0, 0.0, 1.0 );
        }
      }
    "))
  (ret shader)
  ))


(func GLuint makeShowSHShader () (
  (var GLuint shader (createShader
    "
    #version 120
    varying vec3 dir;
    "
    
    "
    void main(void) {
      gl_Position = ftransform();
      
      vec4 vertexDir = normalize( gl_Vertex );
      dir = vertexDir.xyz;
      }
    "
    
    "
    uniform samplerCube texture0;
    uniform vec4 coeffs0;
    uniform samplerCube texture1;
    uniform vec4 coeffs1;
    uniform samplerCube texture2;
    uniform vec4 coeffs2;
    uniform samplerCube texture3;
    uniform vec4 coeffs3;

    float shprod(vec3 dir, samplerCube texture, vec4 coeffs) {
      vec4 shvals = textureCube( texture, dir );
      shvals = shvals * 2.0 - 1.0;
      vec4 products = shvals * coeffs;
      return products.x + products.y + products.z + products.w;
      }
    
    void main(void) {
      vec3 occluderDir = vec3( 0.0, 0.0, -1.0 );
      
      float shval =
      shprod(dir, texture0, coeffs0) +
      shprod(dir, texture1, coeffs1) +
      shprod(dir, texture2, coeffs2) +
      shprod(dir, texture3, coeffs3);

      if( shval > 0.0 ) {
        gl_FragColor = vec4( 0.0, shval, 0.0, 1.0 );
        }
      else {
        gl_FragColor = vec4( -shval, 0.0, 0.0, 1.0 );
        }
      }
    "))
  (ret shader)
  ))

(template onKey key code ...
  (if (isPressed #key) #code ()))


(xtype trackball
  /// rotation around y axis (in degrees)
  (float longitude)
  /// rotation around x axis (in degrees)
  (float latitude)
  (float distance)
  )

(func void trackball:update (((ptr trackball) this) (float seconds)) (
  (var float rotationSpeed 90.0)
  (onKey GLFW_KEY_LSHIFT
    (rotationSpeed = rotationSpeed *_f 3.0))

  (template addToField name value
    (setField this #name (getField this #name +_f #value)) )

  (onKey GLFW_KEY_LEFT
    (addToField longitude (seconds *_f float.neg rotationSpeed)) )
  (onKey GLFW_KEY_RIGHT
    (addToField longitude (seconds *_f rotationSpeed)) )
  (onKey GLFW_KEY_UP
    (addToField latitude (seconds *_f rotationSpeed)) )
  (onKey GLFW_KEY_DOWN
    (addToField latitude (seconds *_f float.neg rotationSpeed)) )

  (setField this longitude (fmodf (getField this longitude) 360.0))
  (setField this latitude (float:max -90.0 (float:min 90.0 (getField this latitude))))
  ))

(func void trackball:transform (((ptr trackball) this)) (
  (glTranslatef 0. 0. (float.sub 1.0 (getField this distance)))
  (glRotatef (getField this latitude) 1. 0. 0.)
  (glRotatef (getField this longitude) 0. -1. 0.)
  ))


(macro arrayType elementType (
  (const cstring name (cstring:concat "array_" (getField elementType id)))
  (const cstring initName (cstring:concat name ":init"))
  
  (ret `(
    (type #name (int size) ((ptr #elementType) values))
    
    (func void #initName (((ptr #name) this) (int size)) (
      (setField this size size)
      (setField this values (malloc #elementType size))
      ))
    ))
  ))

(arrayType float)
(arrayType array_float)

(template mainloop code ... (
  (var bool abort false)

  (var double startTime (glfwGetTime))
  (var double lastTime startTime)
  
  (while (bool.not abort)
    (if (isPressed GLFW_KEY_ESC)
      (abort = true) ())

    (var double frameTime (glfwGetTime))
    (var double frameDur_d (frameTime -_d lastTime))
    (var float frameDur (double.toFloat frameDur_d))
    (lastTime = frameTime)

    #code
    
    (glfwPollEvents)
    (glfwSwapBuffers)
    )
  ))

(func GLuint makeLegendreDL((int legendreSize)) (
  (var GLuint legendreDL (glGenLists 1))
  (glNewList legendreDL GL_COMPILE)
  
  (for l 0 3 (
    (for m 0 (l+1) (
      
      (glBegin GL_LINE_STRIP)
      (for i 0 legendreSize (
        (var float x (-1.0 +_f 2.0 *_f (int.toFloat i /_f int.toFloat (legendreSize - 1))))
        (var float y (legendre l m x))
        (glVertex2f x y)
        ))
      (glEnd)
      
      )) // for m
    )) // for l

  (glEndList)

  (ret legendreDL)
  ))

(macro profile:measureAndPrintTime message measuredCode (
  (uniqueId startTime "profile")
  (uniqueId stopTime "profile")

  (var astp code `(
    (var double #startTime (glfwGetTime))
    #measuredCode
    (var double #stopTime (glfwGetTime))
    (printString #message)
    (printString " took: ")
    (printDouble (#stopTime -_d #startTime))
    (printString "s\n")
    ))

  (ret code)
  ))

(func void bindTextureCube ((int textureUnit) (GLuint texture)) (
  (glActiveTexture (GL_TEXTURE0 + textureUnit))
  (glBindTexture GL_TEXTURE_CUBE_MAP texture)
  (glActiveTexture GL_TEXTURE0)
  ))

(func void printGLCaps() (
  (template capsPrintInt msg enum (
    (printString #msg) (printInt (gl:getInteger #enum)) (println)
    ))
  
  (printString "OpenGL device caps:\n")
  (capsPrintInt "max texture units = " GL_MAX_TEXTURE_UNITS)
  (capsPrintInt "max texture size = " GL_MAX_TEXTURE_SIZE)
  ))

(func int rand ())

(func int random ((int max)) (
  (ret (int.srem (rand) max))
  ))
  
(template frand ((int.toFloat (int.sub (random 30) 15))))
(template unitRandf ((int.toFloat (random 1025)) /_f 1024.0))
(template sunitRandf ((int.toFloat (random 2049 - 1024)) /_f 1024.0))

(func int main () (
  (init)

  (times 10 (glfwPollEvents) )

  (var GLuint cubeShader (makeShowRotatedSHShader))
  //   (var GLuint cubeShader (makeShowSHShader))

  (const int maxL 4)

  (var int l (maxL - 1))
  (var int m 0)

  (const int shbaseCubemapCount (sh:index (maxL - 1) (maxL - 1) + 1))
  (var (ptr GLuint) shbaseCubemaps (shBaseFuncCubeTextures (maxL - 1) 64))

  (glMatrixMode GL_PROJECTION)
  (glLoadIdentity)
  (gluPerspective 90.0d (float.toDouble windowAspect) 1.0d 500.0d)
  
  (glMatrixMode GL_MODELVIEW)
  (glLoadIdentity)
  (gluLookAt
    10.0d 10.0d 10.0d
    0.0d 0.0d 0.0d
    0.0d 1.0d 0.0d)

  (glEnable GL_DEPTH_TEST)
  (glDepthFunc GL_LEQUAL)

  (const GLuint legendreDL (makeLegendreDL 100))
  
  (var (ptr trackball) cam (new trackball 45.0 10.0 10.0))

  (var (ptr float) coeffs (malloc float shbaseCubemapCount))
  (for coeffNum 0 shbaseCubemapCount (
    (array:set coeffs coeffNum 0.0)
    ))
  
  (mainloop
    (trackball:update cam frameDur)

    (glMatrixMode GL_MODELVIEW)
    (glLoadIdentity)
    (trackball:transform cam)

    (for key GLFW_KEY_0 (GLFW_KEY_0 + maxL) (
      (ift (isPressed key) (
        (const int oldL l)
        (const int oldM m)
        // (array:set coeffs (sh:index oldL oldM) 0.0)
        
        (if (isPressed GLFW_KEY_LSHIFT)
          (l = key - GLFW_KEY_0)
          (if (isPressed GLFW_KEY_LALT)
            (m = GLFW_KEY_0 - key)
            (m = key - GLFW_KEY_0) )
          )
        (l = int:clamp 0 maxL l)
        (m = int:clamp (int:neg l) l m)

        (ift (l != oldL)
          ((printString "l = ") (printInt l) (println)) )
        (ift (m != oldM)
          ((printString "m = ") (printInt m) (println)) )

        (ift (bool.or (l != oldL) (m != oldM)) (
          (array:set coeffs (sh:index oldL oldM) 0.0)
          (array:set coeffs (sh:index l m) 1.0)
          ))
        ))
      ))

    (onKey GLFW_KEY_R
      (for coeffNum2 0 shbaseCubemapCount (
        (array:set coeffs coeffNum2 (unitRandf))
        ))
      )
    
    (clear 0. 0. 0. 1.)

    (drawOrientationGrid)

    (var (ptr float3) occluderDir (malloc float3))
    (float3:init
      occluderDir
      (cosf (double.toFloat frameTime))
      (sinf (double.toFloat frameTime))
      0.0)

    (const float dirLength 20.0)
    (rendergl GL_LINES
      (glColor4f 1. 1. 1. 1.)
      (glVertex3f 0. 0. 0.)
      (glVertex3f
        (dirLength *_f getField occluderDir x)
        (dirLength *_f getField occluderDir y)
        (dirLength *_f getField occluderDir z))
      )

    (glUseProgram cubeShader)
    (bindTextureCube 0 (array:get shbaseCubemaps 0))
    (bindTextureCube 1 (array:get shbaseCubemaps 1))
    (bindTextureCube 2 (array:get shbaseCubemaps 2))
    (bindTextureCube 3 (array:get shbaseCubemaps 3))
    //     (glBindTexture GL_TEXTURE_CUBE_MAP (array:get shbaseCubemaps 0))
    (gl:uniform1i cubeShader "texture0" 0)
    (gl:uniform1i cubeShader "texture1" 1)
    (gl:uniform1i cubeShader "texture2" 2)
    (gl:uniform1i cubeShader "texture3" 3)

    (gl:uniform4fv cubeShader "coeffs0" (ptradd coeffs 0))
    (gl:uniform4fv cubeShader "coeffs1" (ptradd coeffs 4))
    (gl:uniform4fv cubeShader "coeffs2" (ptradd coeffs 8))
    (gl:uniform4fv cubeShader "coeffs3" (ptradd coeffs 12))
    
    //     (gl:uniform4f cubeShader "coeffs0" 0. 0. 0. 0.)
    //     (gl:uniform4f cubeShader "coeffs1" 0. 0. 0. 0.)
    //     (gl:uniform4f cubeShader "coeffs2" 0. 0. 0. 0.)
    //     (gl:uniform4f cubeShader "coeffs3" 0. 0. 0. 0.)

    (gl:uniform3f cubeShader "occluderDir"
      (getField occluderDir x) (getField occluderDir y) (getField occluderDir z))
    
    
    (glutSolidSphere 5.0d 20 20)
    (glBindTexture GL_TEXTURE_CUBE_MAP 0)
    (glUseProgram 0)

    (saveTransforms
      (glRotatef 45.0 0. 1. 0.)
      (glTranslatef 0. 1. (4. +_f 2.))
      (const float scale 1.0)
      (glScalef (2.0 *_f scale) scale scale)
      
      (glColor4f 1. 1. 0. 1.)
      (glCallList legendreDL)

      (glTranslatef 0. 0. (-1.0 /_f 100.0))
      (glBegin GL_LINES)
      (glColor4f 1. 1. 1. 1.)
      (glVertex2f -1. 0.) (glVertex2f 1. 0.)
      (glVertex2f 0. -1.) (glVertex2f 0. 1.)
      (glEnd)

      (glPushAttrib (int.or GL_BLEND GL_DEPTH))
      (glDepthFunc GL_LESS)
      (glEnable GL_BLEND)
      (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
      (glColor4f 1. 1. 1. (1.0 /_f 4.0))
      (renderQuad 1.0)
      (glPopAttrib)
      )
    )

  (drawPausedOverlay)

  (glDeleteLists legendreDL 1)
  (glDeleteTextures shbaseCubemapCount shbaseCubemaps)
  //   (glDeleteTextures 1 (ptr cubemap))
  (glDeleteShader cubeShader)

  (ret 0)
  ))

(func void drawBlackScreen () (
  (clear 0. 0. 0. 1.)
  (glfwSwapBuffers)
  ))

(func void interactivelyMoveWindow() (
  (glfwSetWindowTitle "- move window -")
  (times 10 (glfwPollEvents))
  (while (bool.not (isPressed GLFW_KEY_ESC))
    (glfwPollEvents)
    )
  (glfwSetWindowTitle "done moving")
  (glfwSleep 0.1d)
  (times 10 (glfwPollEvents))
  ))
  
  
