
func bool ast:locationValid(ast* code):
  if (u32:equal (cast int (getField code file)) 0):
    std:base:ret false
  end

  if (getField code file ==_str "???.zomp"):
    std:base:ret false
  end

  std:base:ret true
end

/// Will propagate location of ASTs upwards to their parents if the parent does
/// not have a valid location.
func void ast:propagateLocationUpwards(ast* code):
  forEachAstChild child code:
    ast:propagateLocationUpwards(child)
  end

  if bool:not(ast:locationValid(code)):
    printString "invalid location, looking for valid one in childs\n"
    forEachAstChild child2 code:
      if ast:locationValid(child2):
        printString "updated location\n"
        ast:setLocation(code, getField child2 file, getField child2 line, getField child2 column)
        std:base:ret
      end
    end
  end
end

/// Will propagate location of ASTs to their childs if childs do not have valid
/// locations.
func void ast:propagateLocationDownwards(ast* code, ast* parent):
  if u32:notEqual(cast int parent, 0):
    if (bool:not ast:locationValid(code) && ast:locationValid(parent)):
      ast:setLocation(code, ast:file(parent), ast:line(parent), ast:column(parent))
    end
  end

  forEachAstChild child2 code:
    ast:propagateLocationDownwards(child2, code)
  end
end

(func void quoteTest () (
  (printlnString "Printing quoted ast:")
  (var (ptr ast) tree `(theid arg0 arg1 (arg2 arg2a arg2b)))
  (printAst tree 0)

  (printlnString "Printing handcrafted ast:")
  (var (ptr ast) tst (seq
    (var (ptr ast) t (ast:fromString "foo"))
    (addChild t (ast:fromString "a"))
    (addChild t (ast:fromString "b"))
    t ))
  (printAst tst 0)
  ))

(func void printBuilder ((cstring name)) (
  (var (ptr ast) tree `(print #(ast:fromString name)))
  (printString "Printing ast for ") (printString name) (println)
  (printAst tree 1)
  ))

(macro compileMessage (
  (printlnString "hello, compiler")
  (ret `(seq))
  ))

(func int main () (
  (printlnString "hello, ast")

  (var (ptr ast) tree (ast:fromString "simple"))
  (template extraChild name (
    (addChild tree (ast:fromString #name))
    ))
  (extraChild "child")
  (extraChild "child2")
  (extraChild "child3")
  (extraChild "child4")
  (printAst tree 0)

  (quoteTest)

  (printBuilder "foo")
  (printBuilder "bar")
  (printBuilder "baz")
  
  100
  ))

  