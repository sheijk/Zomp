/**
 * Minimalistic test for interactive toplevel integration in emacs
 */

(func int main () (
  (printlnInt 1000)
  (ret 104)
  ))

(template twice code (
  (code)
  (code)
  ))

(macro printCode code (
  (printAst code 0)
  (ret `())
  ))

(printCode (foo bar))

(func (ptr ast) astSeq () (
  (simpleAst "seq") ))

(macro makeIntVars baseName count (
  (var (ptr ast) vars (astSeq))
  (for i 0 4 (
    (addChild vars `(var int #(simpleAst (newUniqueNameFor "var")) 0)) ))
  (printAst vars 2)
  (ret vars)
  ))

(makeIntVars "foo" 2)


(macro toplevelSeq (
  (ret `(
    (var int somevar1 10)
    (var int somevar2 20)
    ))
  ))

(toplevelSeq)


(template for index min max code (
  (var int index min)
  (label start)
  (var bool t (int.uless index max))
  (branch t goon end)
  (label goon)
  code
  (assign index (int.add index 1))
  (branch start)
  (label end)
  ))

(func void printChars ((char c) (int count)) (
  (for i 0 count
    (printChar c) )
  ))

(func (ptr char) foo () (
  (ret "hello, there")
  ))
  
(func void test () (
  (println)
  (printChars '-' 40) (println)
  (printString "Calling main()... \n")
  (var int retval (main))
  (printString "Returned: ")
  (printInt retval)
  (println)
  (twice (printString "=x=- "))
  (println)
  (for i 10 20 ((printString "index = ") (printlnInt i)))
  (println)
  ))

(testf (
  (var (ptr ast) t `(foo (bar x) baz))
  (printlnInt (getField t childCount))
  ))
  
